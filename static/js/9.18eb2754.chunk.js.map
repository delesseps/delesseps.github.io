{"version":3,"sources":["components/PaddedContainer.tsx","components/form/TextField.tsx","components/form/AutoCompleteField.tsx","components/Card.tsx","types/FacilityType.ts","pages/accounts/Facility.tsx"],"names":["PaddedContainer","styled","div","TextFieldStyle","css","TextField","props","name","control","label","error","rules","multiline","minRows","placeholder","disabled","autoFocus","transform","render","onChange","onBlur","value","id","fullWidth","event","target","InputLabelProps","shrink","helperText","message","AutoCompleteField","creatable","getOptionLabel","option","disableClearable","renderOption","options","autoHighlight","freeSolo","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputProps","rest","Title","Head","Root","Card","children","title","ariaLabel","aria-label","FacilityType","FacilityTypeLabels","Map","Disclosed","Confidential","NonRecourse","defaultValues","get","facilityTypeOptions","entries","map","facilityType","Facilty","methods","useForm","mode","handleSubmit","onSubmit","Grid","container","spacing","item","xs","lg","sm"],"mappings":"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","file":"static/js/9.18eb2754.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={name}\n          fullWidth\n          autoFocus={autoFocus}\n          css={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={ (event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiAutocomplete from '@material-ui/lab/Autocomplete';\nimport { AutocompleteRenderOptionState, InputLabelProps, TextField } from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                css={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n\n  @media (min-width: 600px) {\n    border: 2px solid rgba(0,0,0,0.12);\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    padding: 0;\n    border-bottom: 2px solid rgba(0,0,0,0.12);\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  // actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n      title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;\n","\n\n\nexport enum FacilityType {\n  None = 0,\n  Disclosed = 1,\n  Confidential = 3,\n  NonRecourse = 5,\n}\n\nexport const FacilityTypeLabels = new Map<FacilityType, string>([\n  [FacilityType.Disclosed, 'Disclosed'],\n  [FacilityType.Confidential, 'Confidential'],\n  [FacilityType.NonRecourse, 'Non Recourse'],\n]);\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n// import styled from '@emotion/styled';\n// import { GoCheck } from 'react-icons/go';\n// import { MdEdit, MdEmail, MdLocalPhone, MdSend } from 'react-icons/md';\n// import { useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\nimport AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport TextField from 'components/form/TextField';\nimport PaddedContainer from 'components/PaddedContainer';\n// import DisplayField from 'components/form/DisplayField';\nimport Card from 'components/Card';\nimport { FacilityType, FacilityTypeLabels } from 'types/FacilityType';\n\ninterface FacilityForm {\n  FacilityType: SelectOption<FacilityType> | undefined;\n  Limit?: number;\n  // ABN: string;\n  // ACN: string;\n  // TradingName: string;\n  // TradingAddress: string;\n  // WebSite: string;\n  // Notes: string;\n  // Abn: string;\n  // PrimaryContact: SelectOption<string> | undefined;\n  // SecondaryContact: SelectOption<string> | undefined;\n}\n\nconst defaultValues: FacilityForm = {\n  FacilityType: { value: FacilityType.Disclosed, label: FacilityTypeLabels.get(FacilityType.Disclosed)! },\n  // LegalName: 'Breaking Bad Pty Ltd',\n  // ABN: '',\n  // ACN: '',\n  // TradingName: '',\n  // WebSite: '',\n  // TradingAddress: '',\n  // Notes: '',\n  // Abn: '12 345 678 901',\n  // PrimaryContact: contactOptions.find(option => option.value === '123'),\n  // SecondaryContact: undefined,\n}\n\nconst facilityTypeOptions = [...FacilityTypeLabels.entries()].map(([facilityType, label]) => \n  ({ label: label, value: facilityType })\n);\n\nfunction Facilty() {\n  // const history = useHistory();\n  const methods = useForm<FacilityForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    // formState,\n    // watch,\n    control,\n  } = methods;\n\n  // const primaryContact = watch('PrimaryContact');\n  // const secondaryContact = watch('SecondaryContact');\n\n  return (\n    <PaddedContainer>\n      <form onSubmit={handleSubmit(() => {})}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={6}>\n            <Card>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"Limit\"\n                    control={control}\n                    label=\"Limit\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"FacilityType\"\n                    control={control}\n                    label=\"Type\"\n                    options={facilityTypeOptions}\n                  />\n                </Grid>\n                {/* <Grid item xs={12} sm={6}>\n                  <DisplayField\n                    label=\"Legal Name\"\n                    value=\"\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ACN\"\n                    label=\"ACN\"\n                    control={control}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingName\"\n                    control={control}\n                    label=\"Trading Name\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingAddress\"\n                    control={control}\n                    label=\"Trading Address\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"WebSite\"\n                    control={control}\n                    label=\"Web Site\"\n                    placeholder=\"https://\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"Notes\"\n                    control={control}\n                    multiline\n                    minRows={3}\n                    label=\"Notes\"\n                    placeholder=\"About the business...\"\n                  />\n                </Grid> */}\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n      </form>\n    </PaddedContainer>\n  )\n}\n\nexport default Facilty;\n"],"sourceRoot":""}