{"version":3,"sources":["components/PaddedContainer.tsx","components/form/AutoCompleteField.tsx","components/form/TextField.tsx","components/Card.tsx","utils/string.ts","types/AbrEntityType.ts","state/TradingEntityState.ts","types/EntityType.ts","utils/abnAcn.ts","components/organisms/TradingEntityPicker.tsx","components/organisms/AddTradingEntityDialog.tsx","components/organisms/TradingEntityPanel.tsx","types/TrustType.ts","components/form/UploadField.tsx","components/organisms/CompanyPicker.tsx","components/form/SwitchField.tsx","components/SectionHeading.tsx","components/organisms/CompanyDirectorDetails.tsx","components/organisms/PersonPicker.tsx","components/organisms/NewPersonDetails.tsx","components/form/DateField.tsx","components/organisms/DirectorshipDetails.tsx","components/organisms/AddDirectorDialog.tsx","components/organisms/NewCompanyDetails.tsx","components/organisms/AddCompanyTrusteeDialog.tsx","components/organisms/CompanyTrusteeDetails.tsx","components/organisms/TrustDetails.tsx","types/Trust.ts","pages/accounts/BusinessDetails.tsx"],"names":["PaddedContainer","styled","div","TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","TextField","multiline","minRows","disabled","transform","fullWidth","event","target","Title","Head","Root","Card","children","title","ariaLabel","aria-label","initials","split","map","parts","charAt","join","noSpaces","replace","AbrEntityType","tradingEntityState","atom","key","default","undefined","EntityType","EntityTypeLabel","Map","None","Individual","Partnership","Company","Trust","AustralianPrivateCompany","AustralianPublicCompany","CorporateUnitTrust","DiscretionaryInvestmentTrust","DiscretionaryTradingTrust","FamilyPartnership","FixedTrust","FixedUnitTrust","HybridTrust","IndividualSoleTrader","OtherTrust","SelfManagedSuperannuationFund","nonDigits","formatAbnAcn","sanitizedValue","sanitizeAbnAcn","length","formatAbn","formatAcn","slice","Name","span","EntityMatch","Abn","BusinessName","ListBoxStyles","allTradingEntities","abn","mainName","entityType","entityId","businessNames","filter","createFilterOptions","TradingEntityPicker","Autocomplete","classes","listbox","state","handleHomeEndKeys","inputValue","filterOptions","params","filtered","cleanValue","isValidABN","push","ContentStyle","bp","xs","sm","SelectedEntityChipLabelStyle","AddTradingEntityDialog","isOpen","onClose","onSubmit","useState","selectedTradingEntity","setSelectedTradingEntity","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","reset","onModalClose","useEffect","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Grid","container","spacing","item","Chip","onDelete","DialogActions","Button","onClick","variant","EmptyState","MenuItemStyle","MainName","BusinessType","BusinessNames","SelectedTradingEntity","TradingEntityEditClass","EntityTypeStyle","TradingEntityPanel","TrustType","isModalOpen","setIsModalOpen","React","anchorEl","setAnchorEl","useRecoilState","tradingEntity","setTradingEntity","onMenuClose","get","color","IconButton","currentTarget","Menu","getContentAnchorEl","keepMounted","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","businessName","index","TrustTypeLabels","LabelStyle","DropZoneStyle","UploadField","FormControl","InputLabel","defaultValue","as","useChipsForPreview","acceptedFiles","dropzoneText","showPreviews","showFileNames","showPreviewsInDropzone","filesLimit","showAlerts","getPreviewIcon","Fragment","files","allCompanyEntities","acn","CompanyPicker","isValidACN","SwitchField","FormControlLabel","labelPlacement","checked","SectionHeading","DirectorRoot","CoreDetails","Icon","Actions","CompanyDirectorDetails","director","onRemove","firstGivenName","familyName","Email","Mobile","allPersonEntities","email","mobile","PersonPicker","otherGivenName","nameParts","substring","NewPersonDetails","person","useForm","defaultValues","FirstGivenName","OtherGivenName","FamilyName","mode","alignItems","md","DatePickerStyles","DialogStyles","DateField","utils","DateFnsUtils","autoOk","DialogProps","showTodayButton","format","DirectorshipDetails","AppointmentDate","CeaseDate","AddDirectorDialog","selectedPerson","setSelectedPerson","Directors","Header","NewCompanyDetails","company","isDirectorModalOpen","setIsDirectorModalOpen","directors","setDirectors","methods","Acn","IsTradingEntity","IsForeign","watch","isTradingEntity","isForeign","removeDirector","concat","FormLabel","startIcon","endIcon","addDirector","AddCompanyTrusteeDialog","selectedCompany","setSelectedCompany","TrusteeRoot","CompanyTrusteeDetails","trustee","Trustees","trustTypeOptions","entries","trustType","TrustDetails","trust","isCompanyModalOpen","setIsCompanyModalOpen","trustees","setTrustees","removeTrustee","isCompanyTrustee","TradingName","WebSite","TradingAddress","Notes","BusinessDetails","handleSubmit","lg"],"mappings":"oNAEA,IAAMA,E,MAAkBC,EAAOC,IAAV,KAINF,O,ibC+Bf,IAAMG,EAAiBC,YAAH,KA6ELC,IA7DW,SAA+CC,GAAuB,IAE5FC,EAYED,EAZFC,KACAC,EAWEF,EAXFE,QACAC,EAUEH,EAVFG,MACAC,EASEJ,EATFI,MACAC,EAQEL,EARFK,MACAC,EAOEN,EAPFM,YACAC,EAMEP,EANFO,UAR2F,EAczFP,EALFQ,sBAT2F,MAS1E,SAACC,GAAD,OAAmC,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQJ,QAAS,IAT4B,EAU3FK,EAIEV,EAJFU,iBACAC,EAGEX,EAHFW,aACAC,EAEEZ,EAFFY,UACAC,EACEb,EADFa,QAGF,OACE,cAAC,IAAD,CACEX,QAASA,EACTD,KAAMA,EACNG,MAAOA,EACPU,OAAQ,YAAwC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOhB,EAAW,EAAXA,KAGlC,OACE,cAAC,IAAD,CACEiB,GAAIjB,EACJkB,eAAa,EAEbT,iBAAkBA,EAClBG,QAASA,EACTO,kBAAmB,SAACX,EAAyBQ,GAC3C,QAAOA,GAAQR,EAAOQ,QAAUA,EAAMA,OAExCN,aAAcA,EACdU,cAAed,EACfe,YAAaf,EACbC,eAAgBA,EAChBS,MAAOA,EAEPF,SAAU,SAACQ,EAAKC,GAAN,OAAmBT,EAASS,IACtCR,OAAQA,EACRS,YAAa,kBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,WAAeC,EAAnC,uDACX,cAAC,IAAD,aACEhB,UAAWA,EACXiB,UAAWhC,EACXQ,MAAOA,EACPF,QAASA,EACTuB,gBAAe,aAAII,QAAQ,GAASJ,GACpCC,WAAU,aAAIrB,YAAaA,GAAgBqB,GAC3CI,WAAU,iBAAG5B,QAAH,IAAGA,OAAH,EAAGA,EAAO6B,eAAV,QAAqB,IAC3BJ,Y,yZCjGpB,IAAM/B,EAAiBC,YAAH,KAqFLmC,IApDG,SAAmBjC,GAAqB,IAEtDkB,EAaElB,EAbFkB,GACAjB,EAYED,EAZFC,KACAC,EAWEF,EAXFE,QACAG,EAUEL,EAVFK,MACAF,EASEH,EATFG,MACAC,EAQEJ,EARFI,MACA8B,EAOElC,EAPFkC,UACAC,EAMEnC,EANFmC,QAEA7B,EAIEN,EAJFM,YACA8B,EAGEpC,EAHFoC,SACAxB,EAEEZ,EAFFY,UACAyB,EACErC,EADFqC,UAGF,OACE,cAAC,IAAD,CACEnC,QAASA,EACTD,KAAMA,EACNG,MAAOA,EACPU,OAAQ,kBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MAAOhB,EAA5B,EAA4BA,KAA5B,OACN,cAAC,IAAD,CACEiB,GAAIA,GAAMjB,EACVqC,WAAS,EACT1B,UAAWA,EACXiB,UAAWhC,EACXqC,UAAWA,EACXC,QAASA,EAET9B,MAAOA,EACPC,YAAaA,EACbS,SAAU,SAACwB,GAEPxB,EADEsB,EACOA,EAAUE,EAAMC,OAAOvB,OAEvBsB,EAAMC,OAAOvB,QAG1BD,OAAQA,EACRC,MAAOA,EACPd,QAASA,EACTuB,gBAAiB,CAAEI,QAAQ,GAC3BC,WAAU,iBAAE5B,QAAF,IAAEA,OAAF,EAAEA,EAAO6B,eAAT,QAAoB,GAC9BI,SAAUA,S,slBClFpB,IAAMK,EAAQ9C,IAAOC,IAAV,KAML8C,EAAO/C,IAAOC,IAAV,KAIJ+C,EAAOhD,IAAOC,IAAV,KAuCKgD,IAnBf,YAKkC,IAJhCC,EAI+B,EAJ/BA,SACAC,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,UAIA,OACE,eAACJ,EAAD,CAAMK,aAAYD,EAAlB,UAEED,GACE,cAACJ,EAAD,UACE,cAACD,EAAD,UAAQK,MAGXD,O,iCC/CP,oEAAO,IAAMI,EAAW,SAAChC,GAAD,OACtBA,EAAMiC,MAAM,KAAKC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,OAAO,MAAIC,KAAK,KAEzCC,EAAW,SAACtC,GAAD,OACtBA,EAAMuC,QAAQ,MAAO,M,4CCLlBC,E,gKCGQC,EAAqBC,YAAgC,CAChEC,IAAK,qBACLC,aAASC,K,SDLNL,K,QAAAA,E,+BAAAA,E,8BAAAA,E,yBAAAA,E,mCAAAA,E,gCAAAA,E,wBAAAA,E,iBAAAA,E,qBAAAA,E,kBAAAA,E,2BAAAA,E,iBAAAA,E,kBAAAA,E,qCAAAA,M,KAiBUA,IEfVM,EFeUN,K,SEfVM,O,eAAAA,I,2BAAAA,I,6BAAAA,I,qBAAAA,I,kBAAAA,M,KAQE,IAAMC,EAAkB,IAAIC,IAAwB,CACzD,CAACF,EAAWG,KAAM,IAClB,CAACH,EAAWI,WAAY,cACxB,CAACJ,EAAWK,YAAa,eACzB,CAACL,EAAWM,QAAS,WACrB,CAACN,EAAWO,MAAO,WAoBNP,GAjB+B,IAAIE,IAA+B,CAC/E,CAACR,EAAcS,KAAMH,EAAWG,MAChC,CAACT,EAAcc,yBAA0BR,EAAWM,SACpD,CAACZ,EAAce,wBAAyBT,EAAWM,SACnD,CAACZ,EAAcgB,mBAAoBV,EAAWO,OAC9C,CAACb,EAAciB,6BAA8BX,EAAWO,OACxD,CAACb,EAAckB,0BAA2BZ,EAAWO,OACrD,CAACb,EAAcmB,kBAAmBb,EAAWK,aAC7C,CAACX,EAAcoB,WAAYd,EAAWO,OACtC,CAACb,EAAcqB,eAAgBf,EAAWO,OAC1C,CAACb,EAAcsB,YAAahB,EAAWO,OACvC,CAACb,EAAcuB,qBAAsBjB,EAAWI,YAChD,CAACV,EAAcwB,WAAYlB,EAAWO,OACtC,CAACb,EAAcW,YAAaL,EAAWK,aACvC,CAACX,EAAcyB,8BAA+BnB,EAAWO,SAG5CP,G,yHCnCToB,EAAY,SAKLC,EAAe,SAACnE,GAC3B,IAAKA,EACH,MAAO,GAET,IAAMoE,EAPsB,SAACpE,GAAD,OAC5BA,EAAQA,EAAMuC,QAAQ2B,EAAW,IAAM,GAMhBG,CAAerE,GAEtC,OAA8B,KAA1BoE,EAAeE,OACVC,EAAUH,GAGW,IAA1BA,EAAeE,OACVE,EAAUJ,GAGZpE,GAGIuE,EAAY,SAACvE,GACxB,MAAM,GAAN,OAAUA,EAAMyE,MAAM,EAAG,GAAzB,YAA+BzE,EAAMyE,MAAM,EAAG,GAA9C,YAAoDzE,EAAMyE,MAAM,EAAG,GAAnE,YAAyEzE,EAAMyE,MAAM,EAAG,MAG7ED,EAAY,SAACxE,GACxB,MAAM,GAAN,OAAUA,EAAMyE,MAAM,EAAG,GAAzB,YAA+BzE,EAAMyE,MAAM,EAAG,GAA9C,YAAoDzE,EAAMyE,MAAM,EAAG,K,q8BCjBrE,IAAMC,EAAOhG,IAAOiG,KAAV,KAKJC,EAAclG,IAAOiG,KAAV,KAIXE,GAAMnG,IAAOiG,KAAV,KAOHG,GAAepG,IAAOiG,KAAV,KAMZI,GAAgBlG,YAAH,KAObD,GAAiBC,YAAH,KAoBdmG,GAA2C,CAC/C,CACEC,IAAK,iBACLC,SAAU,+CACVC,WAAYrC,EAAWO,MACvB+B,SAAU,uCACVC,cAAe,CACb,0BACA,qBAGJ,CACEJ,IAAK,iBACLC,SAAU,6DACVC,WAAYrC,EAAWK,YACvBiC,SAAU,uCACVC,cAAe,CACb,oBAKAC,GAASC,cA0GAC,GAnGa,SAAC,GAAmD,IAAjDxF,EAAgD,EAAhDA,MAAOF,EAAyC,EAAzCA,SACpC,OACE,cAAC2F,EAAA,EAAD,CACEzF,MAAOA,EACPE,eAAa,EACbwF,QAAS,CACPC,QAASZ,IAEXnF,QAASoF,GACT7E,kBAAmB,SAACX,EAA4BQ,GAC9C,QAAOA,GAAQR,IAAWQ,GAE5BN,aAAc,SAACX,EAAOiB,EAAO4F,GAAf,OACZ,8CAAQ7G,GAAR,aACE,eAAC6F,EAAD,WACE,cAACF,EAAD,UAAO1E,EAAMkF,aACVlF,EAAMiF,KAAM,cAACJ,GAAD,UAAM7E,EAAMiF,QACxBjF,EAAMqF,eAAiB,cAACP,GAAD,UAAe9E,EAAMqF,cAAchD,KAAK,eAIxEjC,eAAa,EACbC,aAAW,EACXwF,mBAAiB,EACjBtG,eAAgB,SAACC,GAAY,IAAD,EAE1B,MAAsB,kBAAXA,EACFA,EAGLA,EAAOsG,WACFtG,EAAOsG,WAGV,GAAN,OAAUtG,EAAO0F,SAAjB,YAA6B1F,EAAOyF,IAAI1C,QAAQ,MAAO,IAAvD,sBAA8D/C,EAAO6F,qBAArE,aAA8D,EAAsBhD,KAAK,OAM3FvC,SAAU,SAACQ,EAAKC,GAEZT,EADsB,kBAAbS,EACA,CACP0E,IAAK,GACLE,WAAYrC,EAAWG,KACvBiC,SAAU3E,GAGHA,GAIA,OAGbwF,cAAe,SAACnG,EAASoG,GACvB,IAAMC,EAAWX,GAAO1F,EAASoG,GAC3BE,EAAa5D,YAAS0D,EAAOF,YAsBnC,MAnBmB,KAAfI,GACwB,KAAtBA,EAAW5B,QAAiB6B,qBAAWD,IACzCD,EAASG,KAAK,CACZN,WAAYI,EACZjB,IAAK,GACLE,WAAYrC,EAAWG,KACvBiC,SAAS,WAAD,OAAaf,EAAa+B,GAA1B,qBAaPD,GAITzF,YAAa,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,WAAeC,EAAnC,uDACX,cAAC,IAAD,aACEhB,WAAW,EACXiB,UAAWhC,GAGX6B,gBAAe,aAAII,QAAQ,GAASJ,GACpCC,WAAU,aAAIrB,YAAa,uBAA0BqB,IAEjDC,Q,gTC7Kd,IAAM0F,GAAexH,YAAH,KACdyH,IAAGC,GAGHD,IAAGE,IAKDC,GAA+B5H,YAAH,KAE9ByH,IAAGC,GAGHD,IAAGE,IA8FQE,OAlFf,YAA6F,IAA3DC,EAA0D,EAA1DA,OAAQC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,SAAyC,EAChCC,mBAAoC,MADJ,mBACnFC,EADmF,KAC5DC,EAD4D,KAEpFC,EAAQC,cACRC,EAAaC,YAAcH,EAAMI,YAAYC,KAAK,UAaxD,SAASC,IACPP,EAAyB,MAG3B,SAASQ,IACPZ,IAYF,OA5BAa,qBACE,WAKE,OAHKd,GACHY,IAEK,kBAAMA,OAEf,CAACZ,IAqBD,eAACe,EAAA,EAAD,CACEP,WAAYA,EACZQ,KAAMhB,EACNC,QAASY,EACTI,kBAAgB,qBAChBC,mBAAiB,2BALnB,UAOE,cAACC,EAAA,EAAD,CAAa7H,GAAG,qBAAhB,iCAGA,cAAC8H,EAAA,EAAD,CAAenH,UAAWyF,GAA1B,SACE,cAAC2B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SAEKQ,EACD,cAACqB,EAAA,EAAD,CACE1C,QAAS,CAAEtG,MAAOqH,IAClBrH,MAAO2H,EAAsBjB,WAAaiB,EAAsBjB,WAAzD,UAAyEiB,EAAsB7B,SAA/F,aAA4G6B,EAAsB9B,IAAlI,KACPoD,SAxBd,WACErB,EAAyB,SA0Bf,cAAC,GAAD,CACEhH,MAAO+G,EACPjH,SAAUkH,UAapB,eAACsB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAShB,EAAjB,oBAGA,cAACe,EAAA,EAAD,CAAQE,QAAQ,YAAYtH,UAAW4F,EAAuByB,QAlDpE,WACE3B,EAASE,IAiDL,2B,koCChGR,IAAM2B,GAAahK,IAAOC,IAAV,MAMVgK,GAAgB9J,YAAH,MAIb+J,GAAWlK,IAAOC,IAAV,MAIRkK,GAAenK,IAAOC,IAAV,MAMZkG,GAAMnG,IAAOC,IAAV,MAKHmK,GAAgBpK,IAAOC,IAAV,MAKbmG,GAAepG,IAAOC,IAAV,MAIZoK,GAAwBrK,IAAOC,IAAV,MAMrBqK,GAAyBnK,YAAH,MAMtBoK,GAAkBpK,YAAH,MAmGNqK,IC1JVC,GD0JUD,GA9Ff,WAA+B,IAAD,IACUpC,oBAAS,GADnB,mBACrBsC,EADqB,KACRC,EADQ,OAEIC,IAAMxC,SAAmC,MAF7C,mBAErByC,EAFqB,KAEXC,EAFW,OAGcC,YAAehH,GAH7B,mBAGrBiH,EAHqB,KAGNC,EAHM,KAkB5B,SAASC,IACPJ,EAAY,MAYd,OACE,gCAEKE,EAWD,eAACX,GAAD,WACE,cAACF,GAAD,UACE,cAACT,EAAA,EAAD,CACExH,UAAWqI,GACX7J,MAAO2D,EAAgB8G,IAAIH,EAAcvE,YACzCsD,QAAQ,SACRqB,MAAM,cAGV,cAACC,EAAA,EAAD,CACEnJ,UAAWoI,GACXR,QA7BV,SAAwClI,GACtCkJ,EAAYlJ,EAAI0J,gBA0BV,SAIE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CACEV,SAAUA,EACVW,mBAAoB,KACpBC,aAAW,EACXxC,KAAMyC,QAAQb,GACd3C,QAASgD,EACTS,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SAZhB,SAgBE,cAACE,EAAA,EAAD,CAAU7J,UAAW+H,GAAeH,QAtD9C,WACEoB,IACAD,OAAiB9G,IAoDT,sBAEF,cAAC+F,GAAD,UAAWc,EAAcxE,WACzB,cAAC,GAAD,UAAMwE,EAAczE,MACpB,cAAC6D,GAAD,oBAAgBY,EAAcrE,qBAA9B,aAAgB,EAA6BnD,KAAI,SAACwI,EAAcC,GAAf,OAC/C,cAAC,GAAD,UAA2BD,GAARC,WA9CvB,cAACjC,GAAD,UAMM,cAACH,EAAA,EAAD,CAAQE,QAAQ,YAAYD,QApCxC,WACEa,GAAe,IAmCL,qCA4CR,cAAC,GAAD,CACE1C,OAAQyC,EACRxC,QA9Ee,WACnByC,GAAe,IA8EXxC,SA3EgB,SAAC6C,GACrBL,GAAe,GACfM,EAAiBD,U,iDC3EhBP,O,eAAAA,I,mCAAAA,I,2BAAAA,I,2BAAAA,I,2CAAAA,I,yDAAAA,I,8BAAAA,I,kEAAAA,I,iEAAAA,Q,KAYqC,IAAInG,IAA8B,CAC1E,CAACR,EAAcS,KAAMkG,GAAUlG,MAC/B,CAACT,EAAcqB,eAAgBsF,GAAUtF,gBACzC,CAACrB,EAAcoB,WAAYuF,GAAUvF,YACrC,CAACpB,EAAcwB,WAAYmF,GAAUnF,YACrC,CAACxB,EAAcgB,mBAAoB2F,GAAU3F,oBAC7C,CAAChB,EAAckB,0BAA2ByF,GAAUzF,2BACpD,CAAClB,EAAciB,6BAA8B0F,GAAU1F,8BACvD,CAACjB,EAAcsB,YAAaqF,GAAUrF,aACtC,CAACtB,EAAcyB,8BAA+BkF,GAAUlF,iCATnD,IAYM2G,GAAkB,IAAI5H,IAAuB,CACxD,CAACmG,GAAU3F,mBAAoB,wBAC/B,CAAC2F,GAAU1F,6BAA8B,kCACzC,CAAC0F,GAAUzF,0BAA2B,+BACtC,CAACyF,GAAUvF,WAAY,eACvB,CAACuF,GAAUtF,eAAgB,oBAC3B,CAACsF,GAAUrF,YAAa,gBACxB,CAACqF,GAAUlF,8BAA+B,2BAC1C,CAACkF,GAAUnF,WAAY,iB,ocC1BzB,IAAM6G,GAAahM,YAAH,MAMViM,GAAgBjM,YAAH,MA4FJkM,GA7DK,SAAmBhM,GAAqB,IAExDC,EAUED,EAVFC,KACAC,EASEF,EATFE,QACAG,EAQEL,EARFK,MAUF,OACE,eAAC4L,GAAA,EAAD,CACE3J,WAAS,EACTT,UAAWkK,GAFb,UAIE,cAACG,GAAA,EAAD,CAAYrK,UAAWiK,GAAYhK,QAAM,EAAzC,SAA2CzB,IAC3C,cAAC,IAAD,CACEH,QAASA,EACTD,KAAMA,EAENkM,aAAa,GAEbC,GACE,cAAC,KAAD,CAWEC,oBAAkB,EAClBC,cAAe,CAAC,aAAc,YAAa,mBAC3CC,aAAa,kDACbC,cAAc,EACdC,eAAe,EACfC,wBAAwB,EACxBC,WAAY,EAEZC,YAAY,EACZC,eAAgB,kBAAM,cAAC,IAAMC,SAAP,KAItB/L,SAAU,SAACgM,a,o1BCvFvB,IAAMpH,GAAOhG,IAAOiG,KAAV,MAMJC,GAAclG,IAAOiG,KAAV,MAIXE,GAAMnG,IAAOiG,KAAV,MAMHI,GAAgBlG,YAAH,MAObD,GAAiBC,YAAH,MAoBdkN,GAAqC,CACzC,CACE9G,IAAK,cACL+G,IAAK,YACLhN,KAAM,qBAER,CACEgN,IAAK,YACLhN,KAAM,yBAIJsG,GAASC,cAkHA0G,GA3GO,SAAC,GAA6C,IAA3CjM,EAA0C,EAA1CA,MAAOF,EAAmC,EAAnCA,SAC9B,OACE,cAAC2F,EAAA,EAAD,CACEzF,MAAOA,EACPE,eAAa,EACbwF,QAAS,CACPC,QAASZ,IAEXnF,QAASmM,GACT5L,kBAAmB,SAACX,EAAsBQ,GACxC,QAAOA,GAAQR,IAAWQ,GAE5BN,aAAc,SAACX,EAAOiB,EAAO4F,GAC3B,OAOE,aANA,CAMA,gCAAQ7G,GAAR,aACE,eAAC,GAAD,WACE,cAAC,GAAD,UAAOiB,EAAMhB,QACXgB,EAAM8F,YAAc,eAAC,GAAD,WAAM3B,EAAanE,EAAMgM,KAAzB,MAAkChM,EAAMiF,KAAO,2CAAMd,EAAanE,EAAMiF,kBAKtG7E,eAAa,EACbC,aAAW,EACXwF,mBAAiB,EACjBtG,eAAgB,SAACC,GAAY,IAAD,EAE1B,MAAsB,kBAAXA,EACFA,EAGLA,EAAOsG,WACFtG,EAAOsG,WAGV,GAAN,OAAUtG,EAAOR,KAAjB,YAAyBQ,EAAOwM,IAAIzJ,QAAQ,MAAO,IAAnD,sBAA0D/C,EAAOyF,WAAjE,aAA0D,EAAY1C,QAAQ,MAAO,MAMvFzC,SAAU,SAACQ,EAAKC,GAEZT,EADsB,kBAAbS,EACA,CACPyL,IAAK,GACLhN,KAAMuB,GAGCA,GAIA,OAGbwF,cAAe,SAACnG,EAASoG,GACvB,IAAMC,EAAWX,GAAO1F,EAASoG,GAC3BE,EAAa5D,YAAS0D,EAAOF,YAwBnC,MAnBmB,KAAfI,IAEyB,IAAtBA,EAAW5B,QAAgB4H,qBAAWhG,IAAuC,KAAtBA,EAAW5B,QAAiB6B,qBAAWD,GACjGD,EAASG,KAAK,CACZN,WAAYE,EAAOF,WACnBkG,IAAK9F,EACLlH,KAAK,mBAAD,OAAqBmF,EAAa+B,GAAlC,OAKND,EAASG,KAAK,CACZN,WAAYE,EAAOF,WACnBkG,IAAK,GACLhN,KAAK,mBAAD,OAAqBgH,EAAOF,WAA5B,QAKHG,GAITzF,YAAa,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,WAAeC,EAAnC,uDACX,cAAC,IAAD,aACEhB,WAAW,EACXiB,UAAWhC,GAGX6B,gBAAe,aAAII,QAAQ,GAASJ,GACpCC,WAAU,aAAIrB,YAAa,4BAA+BqB,IAEtDC,Q,iMCpKd,IAAMkK,GAAahM,YAAH,MAiDDsN,GAjCK,SAAmBpN,GAAqB,IAExDkB,EAKElB,EALFkB,GACAjB,EAIED,EAJFC,KACAC,EAGEF,EAHFE,QAEAG,EACEL,EADFK,MAGF,OACE,cAAC,IAAD,CACEH,QAASA,EACTD,KAAMA,EACNa,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MAArB,OACN,cAACoM,GAAA,EAAD,CACExL,UAAWiK,GACXzL,MAAOA,EACPiN,eAAe,MACfpN,QACE,cAAC,KAAD,CACEgB,GAAIA,EACJH,SAAU,SAACwB,GAAD,OAAWxB,EAASwB,EAAMC,OAAO+K,UAC3CvM,OAAQA,EACRuM,QAAStM,U,gKC5CvB,IAOeuM,GAPQ7N,IAAOC,IAAV,M,05BCKpB,IAAM6N,GAAe9N,IAAOC,IAAV,MAKZ8C,GAAO/C,IAAOC,IAAV,MAIJ6C,GAAQ9C,IAAOC,IAAV,MAML8N,GAAc/N,IAAOC,IAAV,MAIX+F,GAAOhG,IAAOiG,KAAV,MAKJ+H,GAAOhO,IAAOiG,KAAV,MAOJgI,GAAUjO,IAAOC,IAAV,MAKPgK,GAAgB9J,YAAH,MA4EJ+N,OAlEf,YAA4F,IAA1DC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,SAAUnC,EAAqC,EAArCA,MAAqC,EACzDrB,IAAMxC,SAAmC,MADgB,mBAClFyC,EADkF,KACxEC,EADwE,KAGzF,SAASI,IACPJ,EAAY,MAiBd,OACE,cAACgD,GAAD,UACE,eAAC/K,GAAD,WACE,eAACD,GAAD,WACE,cAACkL,GAAD,UACE,cAAC,IAAD,MAEF,cAACD,GAAD,UACE,cAACzE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,eAAC,GAAD,WAAOsG,EAASE,eAAhB,IAAiCF,EAASG,uBAKlD,eAACL,GAAD,WACE,cAAC5C,EAAA,EAAD,CACEvB,QArBV,SAAqBlI,GACnBkJ,EAAYlJ,EAAI0J,gBAmBV,SAGE,cAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CACEV,SAAUA,EACVW,mBAAoB,KACpBC,aAAW,EACXxC,KAAMyC,QAAQb,GACd3C,QAASgD,EACTS,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SAZhB,UAeE,cAACE,EAAA,EAAD,CAAU7J,UAAW+H,GAAeH,QA7C9C,WACEoB,KA4CQ,8BACA,cAACa,EAAA,EAAD,CAAU7J,UAAW+H,GAAeH,QAnD9C,WACEoB,IACAkD,EAASnC,IAiDD,gC,i9BCxGZ,IAAMjG,GAAOhG,IAAOiG,KAAV,MAKJC,GAAclG,IAAOiG,KAAV,MAIXsI,GAAQvO,IAAOiG,KAAV,MAOLuI,GAASxO,IAAOiG,KAAV,MAMNI,GAAgBlG,YAAH,MAObD,GAAiBC,YAAH,MAoBdsO,GAAmC,CACvC,CACEJ,eAAgB,MAChBC,WAAY,SACZI,MAAO,oBACPC,OAAQ,mBAEV,CACEN,eAAgB,OAChBC,WAAY,UACZI,MAAO,iCACPC,OAAQ,mBAEV,CACEN,eAAgB,SAChBC,WAAY,QACZI,MAAO,sBACPC,OAAQ,oBAIN/H,GAASC,cAqGA+H,GA9FM,SAAC,GAA4C,IAA1CtN,EAAyC,EAAzCA,MAAOF,EAAkC,EAAlCA,SAC7B,OACE,cAAC2F,EAAA,EAAD,CACEzF,MAAOA,EACPE,eAAa,EACbwF,QAAS,CACPC,QAASZ,IAEXnF,QAASuN,GACThN,kBAAmB,SAACX,EAAqBQ,GACvC,QAAOA,GAAQR,IAAWQ,GAE5BN,aAAc,SAACX,EAAOiB,EAAO4F,GAC3B,OAOE,aANA,CAMA,gCAAQ7G,GAAR,aACE,eAAC,GAAD,WACE,eAAC,GAAD,WAAOiB,EAAM+M,eAAb,IAA8B/M,EAAMgN,gBACjChN,EAAMoN,OAAS,cAACH,GAAD,UAAQjN,EAAMoN,UAC7BpN,EAAMqN,QAAU,cAACH,GAAD,UAASlN,EAAMqN,gBAK1CjN,eAAa,EACbC,aAAW,EACXwF,mBAAiB,EACjBtG,eAAgB,SAACC,GAEf,MAAsB,kBAAXA,EACFA,EAGLA,EAAOsG,WACFtG,EAAOsG,WAGV,GAAN,OAAUtG,EAAOuN,gBAAjB,OAAoCvN,EAAO+N,eAAT,WAA8B/N,EAAO+N,gBAAmB,GAA1F,YAAgG/N,EAAOwN,WAAvG,YAAqHxN,EAAO6N,OAA5H,YAAsI7N,EAAO4N,QAE/ItN,SAAU,SAACQ,EAAKC,GACd,GAAIA,EACF,GAAIA,EAASuF,WAAY,CACvB,IAAM0H,EAAYjN,EAASuF,WAAW7D,MAAM,KAC5CnC,EAAS,CACPiN,eAAgBS,EAAU,GAC1BR,WAAYzM,EAASuF,WAAW2H,UAAUD,EAAU,GAAGlJ,OAAS,UAGlExE,EAASS,QAGXT,EAAS,OAGbiG,cAAe,SAACnG,EAASoG,GACvB,IAAMC,EAAWX,GAAO1F,EAASoG,GAcjC,MARmB,KALA1D,YAAS0D,EAAOF,aAMjCG,EAASG,KAAK,CACZN,WAAYE,EAAOF,WACnBkH,WAAY,GACZD,eAAe,kBAAD,OAAoB/G,EAAOF,WAA3B,OAIXG,GAITzF,YAAa,gBAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,WAAeC,EAAnC,uDACX,cAAC,IAAD,aACEhB,WAAW,EACXiB,UAAWhC,GAGX6B,gBAAe,aAAII,QAAQ,GAASJ,GACpCC,WAAU,aAAIrB,YAAa,iCAAoCqB,IAE3DC,QCxGC+M,OAhDf,YAA6H,IAAD,IAAhGC,OAAUZ,EAAsF,EAAtFA,eAAgBQ,EAAsE,EAAtEA,eAAgBP,EAAsD,EAAtDA,WAAYK,EAA0C,EAA1CA,OAAQD,EAAkC,EAAlCA,MAetFnO,EAbc2O,YAA8B,CAC5CC,cAAe,CACbC,eAAgBf,EAChBgB,eAAgBR,EAChBS,WAAYhB,EACZE,OAAQG,EACRJ,MAAOG,GAETa,KAAM,aAKNhP,QAKF,OACE,eAAC+I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGgG,WAAW,WAAvC,UACE,cAAClG,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAACnN,EAAA,EAAD,CACErB,WAAS,EACTX,KAAK,iBACLI,MAAM,mBACNH,QAASA,MAGb,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAACnN,EAAA,EAAD,CACEhC,KAAK,iBACLI,MAAM,mBACNH,QAASA,MAGb,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAACnN,EAAA,EAAD,CACEhC,KAAK,aACLI,MAAM,cACNH,QAASA,U,6fCnDnB,IAAM4L,GAAahM,YAAH,MAMVuP,GAAmBvP,YAAH,MAUhBwP,GAAexP,YAAH,MAyEHyP,GAlDG,SAAmBvP,GAAqB,IAEtDC,EAUED,EAVFC,KACAC,EASEF,EATFE,QACAG,EAQEL,EARFK,MAEAD,EAMEJ,EANFI,MANqD,EAYnDJ,EAJFM,mBARqD,MAQvC,aARuC,EASrD8B,EAGEpC,EAHFoC,SACAxB,EAEEZ,EAFFY,UAIF,OACE,eAACqL,GAAA,EAAD,CACE3J,WAAS,EADX,UAGE,cAAC4J,GAAA,EAAD,CAAYrK,UAAWiK,GAAYhK,QAAM,EAAzC,SAA2CzB,IAC3C,cAAC,KAAD,CAAyBmP,MAAOC,KAAhC,SACE,cAAC,IAAD,CACEvP,QAASA,EACTD,KAAMA,EACNG,MAAOA,EACPU,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MAArB,OACN,cAAC,KAAD,CAEEyO,QAAM,EACNC,YAAa,CAAE9N,UAAWyN,IAC1BzN,UAAWwN,GACXjN,SAAUA,EACVpB,OAAQA,EACRJ,UAAWA,EAEXN,YAAaA,EACbsP,iBAAe,EACf3O,MAAOA,EAEPF,SAAUA,EAGV8O,OAAO,wBCtCNC,OAnCf,WAEE,IASE5P,EATc2O,YAAiC,CAC/CC,cAAe,CACbiB,gBAAiB,KACjBC,UAAW,MAEbd,KAAM,aAINhP,QAGF,OACE,eAAC+I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SAAmB,cAAC,GAAD,6BACnB,cAACyB,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAAC,GAAD,CACElP,QAASA,EACTD,KAAK,kBACLI,MAAM,uBAGV,cAAC4I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAAC,GAAD,CACElP,QAASA,EACTD,KAAK,YACLI,MAAM,qB,yICnChB,IAAMiH,GAAexH,YAAH,KACdyH,IAAGC,GAGHD,IAAGE,IAwGQwI,OAlFf,YAAmF,IAAtDrI,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,SAAoC,EACpCC,mBAA6B,MADO,mBACzEmI,EADyE,KACzDC,EADyD,KAE1EjI,EAAQC,cACRC,EAAaC,YAAcH,EAAMI,YAAYC,KAAK,UAaxD,SAASC,IACP2H,EAAkB,MAGpB,SAAS1H,IACPZ,IAWF,OA3BAa,qBACE,WAKE,OAHKd,GACHY,IAEK,kBAAMA,OAEf,CAACZ,IAoBD,eAACe,EAAA,EAAD,CACEP,WAAYA,EACZQ,KAAMhB,EACNC,QAASY,EACTI,kBAAgB,qBAChBC,mBAAiB,2BALnB,UAOE,cAACC,EAAA,EAAD,CAAa7H,GAAG,qBAAhB,0BAGA,cAAC8H,EAAA,EAAD,CAAenH,UAAWyF,GAA1B,SACE,cAAC2B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SAEK0I,EACC,eAACjH,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAAC,GAAD,CACEoH,OAAUsB,EAAenJ,WAAa,CACpCiH,eAAgBkC,EAAenJ,WAC/BkH,WAAY,IACViC,MAGR,cAACjH,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAAC,GAAD,SAIN,cAAC,GAAD,CACEvG,MAAOiP,EACPnP,SAAUoP,UAMpB,eAAC5G,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAShB,EAAjB,oBAGA,cAACe,EAAA,EAAD,CAAQE,QAAQ,YAAYtH,UAAW8N,EAAgBzG,QAlD7D,WACE3B,EAASoI,IAiDL,wB,ulBC9FR,IAAME,GAAYzQ,IAAOC,IAAV,MAGTyQ,GAAS1Q,IAAOC,IAAV,MAINkM,GAAahM,YAAH,MAQV8N,GAAUjO,IAAOC,IAAV,MAMP+J,GAAahK,IAAOC,IAAV,MA8JD0Q,OA1If,YAAqF,IAAD,IAAvDC,QAAWtD,EAA4C,EAA5CA,IAAK/G,EAAuC,EAAvCA,IAAKjG,EAAkC,EAAlCA,KAAkC,EAC5B8H,oBAAS,GADmB,mBAC3EyI,EAD2E,KACtDC,EADsD,OAEhD1I,mBAAqB,IAF2B,mBAE3E2I,EAF2E,KAEhEC,EAFgE,KAI5EC,EAAU/B,YAA+B,CAC7CC,cAAe,CACbnJ,KAAM1F,EACN4Q,IAAKzL,EAAa6H,GAClB6D,kBAAmB5K,EACnBJ,IAAKV,EAAac,GAClB6K,WAAW,GAEb7B,KAAM,aAKNhP,EAGE0Q,EAHF1Q,QACA8Q,EAEEJ,EAFFI,MAIIC,EAAkBD,EAAM,mBACxBE,EAAYF,EAAM,aAmBxB,SAASG,EAAevF,GACtB+E,EAAaD,EAAUhL,MAAM,EAAGkG,GAAOwF,OAAOV,EAAUhL,MAAMkG,EAAQ,KAExE,OACE,qCACE,eAAC3C,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGgG,WAAW,WAAvC,UACE,cAAClG,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SAAmB,cAAC,GAAD,gCACnB,cAACyB,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACErB,WAAS,EACTM,GAAG,iBACHjB,KAAK,OACLI,MAAM,OACNH,QAASA,MAGb,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,EAAf,SACE,cAAC,GAAD,CACEvH,KAAK,YACLC,QAASA,EACTG,MAAM,eAIR6Q,EACA,cAACjI,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACEhC,KAAK,oBACLI,MAAM,aACNH,QAASA,MAIb,qCACE,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAI4H,GAAI,EAAvB,SACE,cAACnN,EAAA,EAAD,CACEhC,KAAK,MACLI,MAAM,MACNH,QAASA,MAGb,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,EAAf,SACE,cAAC,GAAD,CACEvH,KAAK,kBACLC,QAASA,EACTG,MAAM,kBAIR4Q,GACA,cAAChI,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,EAAG4H,GAAI,EAAtB,SACE,cAACnN,EAAA,EAAD,CACEhC,KAAK,MACLI,MAAM,MACNH,QAASA,SAMnB,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,eAAC4I,GAAD,WACE,eAACC,GAAD,WACE,cAACgB,GAAA,EAAD,CAAWxP,UAAWiK,GAAtB,uBACA,cAAC,GAAD,UACE,cAACtC,EAAA,EAAD,CACE8H,UAAW,cAAC,IAAD,IACXC,QAAS,cAAC,IAAD,IACT9H,QA5EhB,WACEgH,GAAuB,YAgFb,OAACC,QAAD,IAACA,OAAD,EAACA,EAAWnL,QAGZmL,EAAUvN,KAAI,SAAC2K,EAAUlC,GAAX,OACZ,cAAC,GAAD,CAEEA,MAAOA,EACPkC,SAAUA,EACVC,SAAUoD,GAHLvF,MAJT,cAAC,GAAD,4CAaR,cAAC,GAAD,CACEhE,OAAQ4I,EACR3I,QA1GN,WACE4I,GAAuB,IA0GnB3I,SAvGN,SAA+BgG,GAC7B2C,GAAuB,GAQzB,SAAqB3C,GACnB6C,EAAa,GAAD,oBAAKD,GAAL,CAAgB5C,KAR5B0D,CAAY1D,U,yIC/EhB,IAAMxG,GAAexH,YAAH,KACdyH,IAAGC,GAGHD,IAAGE,IAqGQgK,OA/Ef,YAA+F,IAA5D7J,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,SAA0C,EAC9CC,mBAA8B,MADgB,mBACrF2J,EADqF,KACpEC,EADoE,KAEtFzJ,EAAQC,cACRC,EAAaC,YAAcH,EAAMI,YAAYC,KAAK,UAaxD,SAASC,IACPmJ,EAAmB,MAGrB,SAASlJ,IACPZ,IAWF,OA3BAa,qBACE,WAKE,OAHKd,GACHY,IAEK,kBAAMA,OAEf,CAACZ,IAoBD,eAACe,EAAA,EAAD,CACEP,WAAYA,EACZQ,KAAMhB,EACNC,QAASY,EACTI,kBAAgB,qBAChBC,mBAAiB,2BALnB,UAOE,cAACC,EAAA,EAAD,CAAa7H,GAAG,qBAAhB,iCAGA,cAAC8H,EAAA,EAAD,CAAenH,UAAWyF,GAA1B,SACE,cAAC2B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SAEKkK,EACD,cAAC,GAAD,CACEnB,QAAWmB,EAAgB3K,WACzB2K,EAAgBzE,IAAM,CACpBhN,KAAM,GACNgN,IAAKyE,EAAgBzE,KACnB,CACFhN,KAAMyR,EAAgB3K,WACtBkG,IAAK,IACJyE,IAGP,cAAC,GAAD,CACEzQ,MAAOyQ,EACP3Q,SAAU4Q,UAMpB,eAACpI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAShB,EAAjB,oBAGA,cAACe,EAAA,EAAD,CAAQE,QAAQ,YAAYtH,UAAWsP,EAAiBjI,QA/C9D,WACE3B,EAAS4J,IA8CL,wB,6gCChGR,IAAME,GAAcjS,IAAOC,IAAV,MAKX8C,GAAO/C,IAAOC,IAAV,MAIJ6C,GAAQ9C,IAAOC,IAAV,MAML8N,GAAc/N,IAAOC,IAAV,MAIX+F,GAAOhG,IAAOiG,KAAV,MAKJiL,GAAMlR,IAAOiG,KAAV,MAKH+H,GAAOhO,IAAOiG,KAAV,MAOJgI,GAAUjO,IAAOC,IAAV,MAKPgK,GAAgB9J,YAAH,MAoFJ+R,OA1Ef,YAAyF,IAAxDC,EAAuD,EAAvDA,QAAS/D,EAA8C,EAA9CA,SAAUnC,EAAoC,EAApCA,MAAoC,EACtDrB,IAAMxC,SAAmC,MADa,mBAC/EyC,EAD+E,KACrEC,EADqE,KAGtF,SAASI,IACPJ,EAAY,MAiBd,OACE,cAACmH,GAAD,UACE,eAAC,GAAD,WACE,eAAC,GAAD,WACE,cAAC,GAAD,UACE,cAAC,KAAD,MAEF,cAAC,GAAD,UACE,eAAC3I,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAAC,GAAD,UAAOsK,EAAQ7R,SAEjB,cAACgJ,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,eAACqJ,GAAD,WACE,+BAAOzL,EAAa0M,EAAQ7E,SACxB6E,EAAQ5L,KAAO,2CAAK,+BAAOd,EAAa0M,EAAQ5L,uBAM9D,eAAC,GAAD,WACE,cAAC8E,EAAA,EAAD,CAEEvB,QA5BV,SAAqBlI,GACnBkJ,EAAYlJ,EAAI0J,gBAyBV,SAIE,cAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CACEV,SAAUA,EACVW,mBAAoB,KACpBC,aAAW,EACXxC,KAAMyC,QAAQb,GACd3C,QAASgD,EACTS,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SAZhB,UAgBE,cAACE,EAAA,EAAD,CAAU7J,UAAW+H,GAAeH,QArD9C,WACEoB,KAoDQ,8BACA,cAACa,EAAA,EAAD,CAAU7J,UAAW+H,GAAeH,QA3D9C,WACEoB,IACAkD,EAASnC,IAyDD,gC,ulBC7GZ,IAAMmG,GAAWpS,IAAOC,IAAV,MAGRyQ,GAAS1Q,IAAOC,IAAV,MAINkM,GAAahM,YAAH,MAQV8N,GAAUjO,IAAOC,IAAV,MAMP+J,GAAahK,IAAOC,IAAV,MAOVoS,GAAmB,aAAInG,GAAgBoG,WAAW9O,KAAI,mCAAE+O,EAAF,WACzD,CAAE7R,MADuD,KACzCY,MAAOiR,MAcpBpD,GAA2B,GA4GlBqD,OAzGf,YAAoD,EAA5BC,MAA6B,IAAD,EACErK,oBAAS,GADX,mBAC3CsK,EAD2C,KACvBC,EADuB,OAElBvK,mBAAoB,IAFF,mBAE3CwK,EAF2C,KAEjCC,EAFiC,KAWhDtS,EAPc2O,YAAmB,CACjCC,iBACAI,KAAM,aAKNhP,QAsBF,SAASuS,EAAc7G,GACrB4G,EAAYD,EAAS7M,MAAM,EAAGkG,GAAOwF,OAAOmB,EAAS7M,MAAMkG,EAAQ,KAGrE,OACE,eAAChJ,EAAA,EAAD,CAAME,MAAM,gBAAZ,UACE,eAACmG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACxF,EAAA,EAAD,CACEhC,KAAK,OACLC,QAASA,EACTG,MAAM,WAGV,cAAC4I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC1H,GAAA,EAAD,CACEE,KAAK,YACLC,QAASA,EACTG,MAAM,OACNQ,QAASmR,OAGb,cAAC/I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,GAAD,CACExH,KAAK,YACLI,MAAM,uBACNH,QAASA,MAGb,cAAC+I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,eAACuK,GAAD,WACE,eAAC,GAAD,WACE,cAACV,GAAA,EAAD,CAAWxP,UAAWiK,GAAtB,sBACA,eAAC,GAAD,WACE,cAACtC,EAAA,EAAD,CACE8H,UAAW,cAAC,IAAD,IACXC,QAAS,cAAC,IAAD,MAEX,cAAC/H,EAAA,EAAD,CACE8H,UAAW,cAAC,IAAD,IACXC,QAAS,cAAC,KAAD,IACT9H,QAjDhB,WACE6I,GAAsB,YAqDXC,EAAShN,OAGVgN,EAASpP,KAAI,SAAC2O,EAASlG,GAAV,OCrHK,SAACkG,GAE/B,YADsDhO,IAAnCgO,EAA2B7E,IDqHhCyF,CAAiBZ,GACjB,cAAC,GAAD,CAEElG,MAAOA,EACPkG,QAASA,EACT/D,SAAU0E,GAHL7G,GAKP,8BAAkBkG,EAAQ7D,YAAhBrC,MAVZ,cAAC,GAAD,2CAgBR,cAAC,GAAD,CACEhE,OAAQyK,EACRxK,QAlFN,WACEyK,GAAsB,IAkFlBxK,SA/EN,SAA8ByI,GAS9B,IAAoBuB,EARlBQ,GAAsB,GAQJR,EAPPvB,EAQXiC,EAAY,GAAD,oBAAKD,GAAL,CAAeT,YEhCxBhD,GAAqC,CAIzC6D,YAAa,GACbC,QAAS,GACTC,eAAgB,GAChBC,MAAO,IAiLMC,UA3Kf,WAA2B,MAEDrI,YAAehH,GAAhCiH,EAFkB,oBAKnBiG,EAAU/B,YAA6B,CAC3CC,iBACAI,KAAM,aAIN8D,EAEEpC,EAFFoC,aACA9S,EACE0Q,EADF1Q,QAIF,OACE,cAACR,EAAA,EAAD,UACE,sBAAMoI,SAAUkL,GAAa,eAA7B,SACE,eAAC/J,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIyL,GAAI,EAAvB,SACE,cAACrQ,EAAA,EAAD,CAAME,MAAM,iBAAZ,SACE,eAACmG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAAC,GAAD,MAuBF,cAACyB,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACEhC,KAAK,cACLC,QAASA,EACTG,MAAM,mBAGV,cAAC4I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACEhC,KAAK,iBACLC,QAASA,EACTG,MAAM,sBAGV,cAAC4I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACEhC,KAAK,UACLC,QAASA,EACTG,MAAM,WACNC,YAAY,eAGhB,cAAC2I,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAf,SACE,cAACvF,EAAA,EAAD,CACEhC,KAAK,QACLC,QAASA,EACTgC,WAAS,EACTC,QAAS,EACT9B,MAAM,oBAOD,OAAbsK,QAAa,IAAbA,OAAA,EAAAA,EAAevE,cAAerC,EAAWK,aACzC,cAAC6E,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIyL,GAAI,EAAvB,SACE,cAACrQ,EAAA,EAAD,CAAME,MAAM,2BAMD,OAAb6H,QAAa,IAAbA,OAAA,EAAAA,EAAevE,cAAerC,EAAWO,OACzC,cAAC2E,EAAA,EAAD,CAAMG,MAAI,EAAC5B,GAAI,GAAIyL,GAAI,EAAvB,SACE,cAAC,GAAD","file":"static/js/10.404ccdad.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={id || name}\n          fullWidth\n          autoFocus={autoFocus}\n          className={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n\n  @media (min-width: 600px) {\n    border: 2px solid rgba(0,0,0,0.12);\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    /* padding: 0 0 16px 0; */\n    padding: 0;\n    /* border-bottom: 2px solid rgba(0,0,0,0.12); */\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  // actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n      title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;\n","\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","enum AbrEntityType {\n  None = '',\n  AustralianPrivateCompany = 'PRV',\n  AustralianPublicCompany = 'PUB',\n  CorporateUnitTrust = 'CUT',\n  DiscretionaryInvestmentTrust = 'DIT',\n  DiscretionaryTradingTrust = 'DTT',\n  FamilyPartnership = 'FPT',\n  FixedTrust = 'FXT',\n  FixedUnitTrust = 'FUT',\n  HybridTrust = 'HYT',\n  IndividualSoleTrader = 'IND',\n  OtherTrust = 'TRT',\n  Partnership = 'PTR',\n  SelfManagedSuperannuationFund = 'SMF',\n}\n\nexport default AbrEntityType;\n","import { atom } from 'recoil';\nimport TradingEntity from 'types/TradingEntity';\n\nexport const tradingEntityState = atom<TradingEntity | undefined>({\n  key: 'tradingEntityState',\n  default: undefined,\n});\n\n","import AbrEntityType from './AbrEntityType';\n\nenum EntityType {\n  None = 0,\n  Individual = 1,\n  Partnership = 3,\n  Company = 5,\n  Trust = 7,\n}\n\nexport const EntityTypeLabel = new Map<EntityType, string>([\n  [EntityType.None, ''],\n  [EntityType.Individual, 'Individual'],\n  [EntityType.Partnership, 'Partnership'],\n  [EntityType.Company, 'Company'],\n  [EntityType.Trust, 'Trust'],\n]);\n\nexport const EntityTypeAbrEntityTypeMapping = new Map<AbrEntityType, EntityType>([\n  [AbrEntityType.None, EntityType.None],\n  [AbrEntityType.AustralianPrivateCompany, EntityType.Company],\n  [AbrEntityType.AustralianPublicCompany, EntityType.Company],\n  [AbrEntityType.CorporateUnitTrust, EntityType.Trust],\n  [AbrEntityType.DiscretionaryInvestmentTrust, EntityType.Trust],\n  [AbrEntityType.DiscretionaryTradingTrust, EntityType.Trust],\n  [AbrEntityType.FamilyPartnership, EntityType.Partnership],\n  [AbrEntityType.FixedTrust, EntityType.Trust],\n  [AbrEntityType.FixedUnitTrust, EntityType.Trust],\n  [AbrEntityType.HybridTrust, EntityType.Trust],\n  [AbrEntityType.IndividualSoleTrader, EntityType.Individual],\n  [AbrEntityType.OtherTrust, EntityType.Trust],\n  [AbrEntityType.Partnership, EntityType.Partnership],\n  [AbrEntityType.SelfManagedSuperannuationFund, EntityType.Trust],\n]);\n\nexport default EntityType;\n","const nonDigits = /[^\\d]/g;\n\nexport const sanitizeAbnAcn = (value: string | null | undefined): string =>\n  value ? value.replace(nonDigits, '') : '';\n\nexport const formatAbnAcn = (value: string | null | undefined): string => {\n  if (!value) {\n    return '';\n  }\n  const sanitizedValue = sanitizeAbnAcn(value);\n\n  if (sanitizedValue.length === 11) {\n    return formatAbn(sanitizedValue);\n  }\n\n  if (sanitizedValue.length === 9) {\n    return formatAcn(sanitizedValue);\n  }\n\n  return value;\n};\n\nexport const formatAbn = (value: string): string => {\n  return `${value.slice(0, 2)} ${value.slice(2, 5)} ${value.slice(5, 8)} ${value.slice(8, 11)}`;\n};\n\nexport const formatAcn = (value: string): string => {\n  return `${value.slice(0, 3)} ${value.slice(3, 6)} ${value.slice(6, 9)}`;\n};","import { isValidABN } from 'abnacn-validator';\nimport { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport TradingEntity from 'types/TradingEntity';\nimport EntityType from 'types/EntityType';\nimport { noSpaces } from 'utils/string';\nimport { formatAbnAcn } from 'utils/abnAcn';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Abn = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n  margin-top: 0.5em;\n`;\n\nconst BusinessName = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface TradingEntityInput extends TradingEntity {\n  inputValue?: string;\n}\n\nconst allTradingEntities: TradingEntityInput[] = [\n  {\n    abn: '34 826 428 290',\n    mainName: 'The Trustee for The A & A White Family Trust',\n    entityType: EntityType.Trust,\n    entityId: 'e1b05d24-2db8-451b-8812-9b38d2a26f93',\n    businessNames: [\n      'Advance Human Solutions',\n      'Empowering Woman',\n    ],\n  },\n  {\n    abn: '63 316 911 021',\n    mainName: 'A SMITH & W SMITH & THE TRUSTEE FOR THE SMITH FAMILY TRUST',\n    entityType: EntityType.Partnership,\n    entityId: '31adab15-ca11-4a81-a619-5ab28811c902',\n    businessNames: [\n      'CE & H SMITH\t'\n    ],\n  }\n];\n\nconst filter = createFilterOptions<TradingEntityInput>();\n\ninterface TradingEntityPickerProps {\n  value: TradingEntityInput | null;\n  onChange: (tradingEntity: TradingEntityInput | null) => void;\n}\n\nconst TradingEntityPicker = ({ value, onChange }: TradingEntityPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allTradingEntities}\n      getOptionSelected={(option: TradingEntityInput, value: TradingEntityInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => (\n        <li {...props}>\n          <EntityMatch>\n            <Name>{value.mainName}</Name>\n            {!!value.abn &&<Abn>{value.abn}</Abn>}\n            {!!value.businessNames && <BusinessName>{value.businessNames.join(', ')}</BusinessName>}\n          </EntityMatch>\n        </li>\n      )}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.mainName} ${option.abn.replace(/\\s/g, '')} ${option.businessNames?.join(' ')}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            abn: '',\n            entityType: EntityType.None,\n            mainName: newValue,\n            // email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          if (cleanValue.length === 11 && isValidABN(cleanValue)) {\n            filtered.push({\n              inputValue: cleanValue,\n              abn: '',\n              entityType: EntityType.None,\n              mainName: `Lookup \"${formatAbnAcn(cleanValue)}\" on ABR Search`\n            });\n          }\n        // } else {\n        //   filtered.push({\n        //     // inputValue: params.inputValue,\n        //     id: 0,\n        //     name: '',\n        //     email: 'Type email address to Add'\n        //   });\n        // }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by ABN or name', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default TradingEntityPicker;\n","import { Button, Chip, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport TradingEntityPicker, { TradingEntityInput } from './TradingEntityPicker';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\nconst SelectedEntityChipLabelStyle = css`\n  font-size: 14px;\n  ${bp.xs} {\n    max-width: 340px;\n  }\n  ${bp.sm} {\n    max-width: 500px;\n  }\n`\n\nexport interface AddTradingEntityDialogProps {\n  isOpen: boolean;\n  // tradingEntity?: TradingEntityInput;\n  onClose: () => void;\n  onSubmit: (tradingEntity: TradingEntityInput) => void;\n}\n\nfunction AddTradingEntityDialog({ isOpen, onClose, onSubmit }: AddTradingEntityDialogProps) {\n  const [selectedTradingEntity, setSelectedTradingEntity] = useState<TradingEntityInput | null>(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedTradingEntity(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(selectedTradingEntity!);\n  }\n\n  function onSelectionRemove() {\n    setSelectedTradingEntity(null);\n  }\n  \n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Find Trading Entity\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n          {\n              (selectedTradingEntity) ?\n              <Chip\n                classes={{ label: SelectedEntityChipLabelStyle }}\n                label={selectedTradingEntity.inputValue ? selectedTradingEntity.inputValue : `${selectedTradingEntity.mainName} (${selectedTradingEntity.abn})`}\n                onDelete={onSelectionRemove}\n              />\n              :\n              <TradingEntityPicker\n                value={selectedTradingEntity}\n                onChange={setSelectedTradingEntity}\n              />\n            }\n            {/* <TextField\n              name=\"Abn\"\n              control={control}\n              // label=\"Name\"\n              placeholder=\"Search by ABN\"\n              // rules={ { required: 'Required' } }\n            /> */}\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedTradingEntity} onClick={onModalOK}>\n          Select\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddTradingEntityDialog;\n","import styled from \"@emotion/styled\";\nimport { Button, Chip, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport React, { useState } from \"react\";\nimport { MdMoreVert } from \"react-icons/md\";\nimport { useRecoilState } from \"recoil\";\nimport { tradingEntityState } from \"state/TradingEntityState\";\nimport { EntityTypeLabel } from \"types/EntityType\";\nimport TradingEntity from \"types/TradingEntity\";\nimport AddTradingEntityDialog from \"./AddTradingEntityDialog\";\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 24px;\n  background-color: #eee;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nconst MainName = styled.div`\n  font-size: 14px;\n`;\n\nconst BusinessType = styled.div`\n  position: absolute;\n  top: 0;\n  left: 50%;\n`;\n\nconst Abn = styled.div`\n  margin-top: 1em;\n  color: #777;\n`;\n\nconst BusinessNames = styled.div`\n  margin-top: 1em;\n  color: #777;\n`;\n\nconst BusinessName = styled.div`\n  color: #777;\n`;\n\nconst SelectedTradingEntity = styled.div`\n  padding: 24px 16px 16px 16px;\n  background-color: #eee;\n  position: relative;\n`;\n\nconst TradingEntityEditClass = css`\n  position: absolute;\n  right: 2px;\n  top: 2px;\n`;\n\nconst EntityTypeStyle = css`\n  margin-left: -50%;\n  margin-top: -40%;\n`;\n\nfunction TradingEntityPanel() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n  const [tradingEntity, setTradingEntity] = useRecoilState(tradingEntityState);\n\n  function onAssignClick() {\n    setIsModalOpen(true);\n  }\n\n  const onModalClose = () => {\n    setIsModalOpen(false);\n  }\n\n  const onModalSubmit = (tradingEntity: TradingEntity) => {\n    setIsModalOpen(false);\n    setTradingEntity(tradingEntity);\n  }\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    setTradingEntity(undefined);\n  }\n\n  function onTradingEntityActionMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <div>\n      {\n        !tradingEntity ?\n        <EmptyState>\n          {/* <Grid container spacing={2}>\n            <Grid item xs={12}>\n              No trading entity assigned\n            </Grid>\n            <Grid item xs={12}> */}\n              <Button variant=\"contained\" onClick={onAssignClick}>Assign Trading Entity</Button>\n            {/* </Grid>\n          </Grid> */}\n        </EmptyState> :\n        <SelectedTradingEntity>\n          <BusinessType>\n            <Chip\n              className={EntityTypeStyle}\n              label={EntityTypeLabel.get(tradingEntity.entityType)}\n              variant=\"filled\"\n              color=\"primary\"\n            />\n          </BusinessType>\n          <IconButton\n            className={TradingEntityEditClass}\n            onClick={onTradingEntityActionMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            {/* <MenuItem className={MenuItemStyle} onClick={() => {}}>Run</MenuItem> */}\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n          <MainName>{tradingEntity.mainName}</MainName>\n          <Abn>{tradingEntity.abn}</Abn>\n          <BusinessNames>{tradingEntity.businessNames?.map((businessName, index) => \n            <BusinessName key={index}>{businessName}</BusinessName>\n          )}</BusinessNames>\n        </SelectedTradingEntity>\n      }\n      <AddTradingEntityDialog\n        isOpen={isModalOpen}\n        onClose={onModalClose}\n        onSubmit={onModalSubmit}\n      />\n    </div>\n  )\n}\n\nexport default TradingEntityPanel;\n","import AbrEntityType from './AbrEntityType';\n\nenum TrustType {\n  None = 0,\n  FixedUnitTrust = 1,\n  FixedTrust = 3,\n  OtherTrust = 5,\n  CorporateUnitTrust = 7,\n  DiscretionaryTradingTrust = 9,\n  HybridTrust = 11,\n  SelfManagedSuperannuationFund = 13,\n  DiscretionaryInvestmentTrust = 15,\n}\n\nexport const TrustTypeFromAbrEntityType = new Map<AbrEntityType, TrustType>([\n  [AbrEntityType.None, TrustType.None],\n  [AbrEntityType.FixedUnitTrust, TrustType.FixedUnitTrust],\n  [AbrEntityType.FixedTrust, TrustType.FixedTrust],\n  [AbrEntityType.OtherTrust, TrustType.OtherTrust],\n  [AbrEntityType.CorporateUnitTrust, TrustType.CorporateUnitTrust],\n  [AbrEntityType.DiscretionaryTradingTrust, TrustType.DiscretionaryTradingTrust],\n  [AbrEntityType.DiscretionaryInvestmentTrust, TrustType.DiscretionaryInvestmentTrust],\n  [AbrEntityType.HybridTrust, TrustType.HybridTrust],\n  [AbrEntityType.SelfManagedSuperannuationFund, TrustType.SelfManagedSuperannuationFund],\n]);\n\nexport const TrustTypeLabels = new Map<TrustType, string>([\n  [TrustType.CorporateUnitTrust, 'Corporate Unit Trust'],\n  [TrustType.DiscretionaryInvestmentTrust, 'Discretionary Investment Trust'],\n  [TrustType.DiscretionaryTradingTrust, 'Discretionary Trading Trust'],\n  [TrustType.FixedTrust, 'Fixed Trust'],\n  [TrustType.FixedUnitTrust, 'Fixed Unit Trust'],\n  [TrustType.HybridTrust, 'Hybrid Trust'],\n  [TrustType.SelfManagedSuperannuationFund, 'Self Managed Super Fund'],\n  [TrustType.OtherTrust, 'Other Trust'],\n]);\n\nexport const isUnitTrustType = (trustType: TrustType): boolean => {\n  return trustType === TrustType.FixedUnitTrust ||\n    trustType === TrustType.CorporateUnitTrust;\n};\n\nexport default TrustType;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport React from 'react';\nimport { FormControl, InputLabel } from '@material-ui/core';\nimport { css } from 'emotion';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DropZoneStyle = css`\n  .MuiDropzoneArea-root {\n    background-color: #eee;\n    padding: 6px 5px;\n    outline: none;\n  }\n  .MuiDropzoneArea-active {\n    background-color: #ddd;\n  }\n  .MuiDropzoneArea-text {\n    margin: 5px 0;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\n// function EmptyIcon () {\n//   return (\n//     <React.Fragment />\n//   )\n// }\n\nconst UploadField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    // rules,\n    // type,\n    // placeholder,\n    // disabled,\n    // autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n      className={DropZoneStyle}\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <Controller\n        control={control}\n        name={name as FieldName<T>}\n        // rules={rules}\n        defaultValue=\"\"\n        // render={ ({ onChange, onBlur, value, name }) => (\n        as={\n          <DropzoneArea\n            // inputProps={{\n            //   id: name\n            // }}\n            // classes={{\n              // root: `css-${DropZoneStyle.name}`,\n              // root: classes.dropZoneRoot,\n              // text: classes.dropZoneText,\n              // active: classes.dropZoneActive,\n              // icon: classes.dropZoneIcon,\n            // }}\n            useChipsForPreview\n            acceptedFiles={['image/jpeg', 'image/png', 'application/pdf']}\n            dropzoneText=\"Click or drag JPG, PNG or PDF file to this area\"\n            showPreviews={false}\n            showFileNames={true}\n            showPreviewsInDropzone={true}\n            filesLimit={1}\n            // Icon={<EmptyIcon />}\n            showAlerts={false}\n            getPreviewIcon={() => <React.Fragment />}\n            // onChange={onChange}\n            // initialFiles={[]}\n            // initialFiles={identificationFiles}\n            onChange={(files) => {\n            //   setIdentificationFiles(files);\n            }}\n          />\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport default UploadField;\n","import { isValidABN, isValidACN } from 'abnacn-validator';\nimport { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Company from 'types/Company';\nimport { noSpaces } from 'utils/string';\nimport { formatAbnAcn } from 'utils/abnAcn';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n  margin-bottom: 0.5em;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Abn = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface CompanyInput extends Company {\n  inputValue?: string;\n}\n\nconst allCompanyEntities: CompanyInput[] = [\n  {\n    abn: '86162372741',\n    acn: '162372741',\n    name: 'APOSITIVE PTY LTD'\n  },\n  {\n    acn: '609328207',\n    name: 'CROFT FAMILY PTY LTD'\n  }\n];\n\nconst filter = createFilterOptions<CompanyInput>();\n\ninterface CompanyPickerProps {\n  value: CompanyInput | null;\n  onChange: (tradingEntity: CompanyInput | null) => void;\n}\n\nconst CompanyPicker = ({ value, onChange }: CompanyPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allCompanyEntities}\n      getOptionSelected={(option: CompanyInput, value: CompanyInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.abn === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.name}</Name>\n              {!value.inputValue && <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.name} ${option.acn.replace(/\\s/g, '')} ${option.abn?.replace(/\\s/g, '')}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            acn: '',\n            name: newValue,\n            // email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          // if (isNumeric) {\n          if ((cleanValue.length === 9 && isValidACN(cleanValue)) || (cleanValue.length === 11 && isValidABN(cleanValue))) {\n            filtered.push({\n              inputValue: params.inputValue,\n              acn: cleanValue,\n              name: `Create Company \"${formatAbnAcn(cleanValue)}\"`\n              // email: `Add \"${params.inputValue}\"`\n            });\n            // }\n          } else {\n            filtered.push({\n              inputValue: params.inputValue,\n              acn: '',\n              name: `Create Company \"${params.inputValue}\"`\n            });\n          }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by ACN, ABN or name', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default CompanyPicker;\n","import React from 'react';\nimport { Control, Controller } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MuiSwitch from '@material-ui/core/Switch';\nimport { css } from 'emotion';\n\nconst LabelStyle = css`\n  .MuiFormControlLabel-label {\n    font-size: 11px;\n    color: #777;\n    line-height: 2em;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  // color?: 'primary' | 'secondary' | 'default';\n}\n\nconst SwitchField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    // color,\n    label\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      render={({ onChange, onBlur, value }) => (\n        <FormControlLabel\n          className={LabelStyle}\n          label={label}\n          labelPlacement=\"top\"\n          control={\n            <MuiSwitch\n              id={id}\n              onChange={(event) => onChange(event.target.checked)}\n              onBlur={onBlur}\n              checked={value}\n              // color={color ?? 'primary'}\n            />\n          }\n        />\n      )}\n    />\n  );\n};\n\nexport default SwitchField;\n","import styled from '@emotion/styled';\n\nconst SectionHeading = styled.div`\n  font-size: 11px;\n  color: #777;\n  /* padding: 8px 0;\n  border-top: 1px solid; */\n`;\n\nexport default SectionHeading\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { MdMoreVert, MdPerson } from \"react-icons/md\";\nimport { Grid, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport Director from \"types/Director\";\n\nconst DirectorRoot = styled.div`\n  background-color: #eee;\n  margin-bottom: 2px;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div`\n  flex-grow: 1;\n  padding: 16px;\n  display: flex;\n`;\n\nconst CoreDetails = styled.div`\n  flex-grow: 1;\n`;\n\nconst Name = styled.span`\n  display: inline-block;\n  font-size: 14px;\n`;\n\nconst Icon = styled.span`\n  display: inline-block;\n  font-size: 16px;\n  width: 30px;\n  vertical-align: middle;\n`;\n\nconst Actions = styled.div`\n  margin-right: 2px;\n  margin-top: 2px;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nexport interface CompanyDirectorDetailsProps {\n  director: Director;\n  onRemove: (index: number) => void;\n  index: number;\n}\n\nfunction CompanyDirectorDetails({ director, onRemove, index}: CompanyDirectorDetailsProps) {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    onRemove(index);\n  }\n\n  function onMenuRunCreditCheck() {\n    onMenuClose();\n    // onRemove(index);\n  }\n\n  function onMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <DirectorRoot>\n      <Head>\n        <Title>\n          <Icon>\n            <MdPerson/>\n          </Icon>\n          <CoreDetails>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Name>{director.firstGivenName} {director.familyName}</Name>\n              </Grid>\n            </Grid>\n          </CoreDetails>\n        </Title>\n        <Actions>\n          <IconButton\n            onClick={onMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            <MenuItem className={MenuItemStyle} onClick={onMenuRunCreditCheck}>Run Credit Check</MenuItem>\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n        </Actions>\n      </Head>\n    </DirectorRoot>\n  )\n}\n\nexport default CompanyDirectorDetails;\n","import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Person from 'types/Person';\nimport { noSpaces } from 'utils/string';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface PersonInput extends Person {\n  inputValue?: string;\n}\n\nconst allPersonEntities: PersonInput[] = [\n  {\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<PersonInput>();\n\ninterface PersonPickerProps {\n  value: PersonInput | null;\n  onChange: (tradingEntity: PersonInput | null) => void;\n}\n\nconst PersonPicker = ({ value, onChange }: PersonPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allPersonEntities}\n      getOptionSelected={(option: PersonInput, value: PersonInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.abn === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.firstGivenName} {value.familyName}</Name>\n              {!!value.email && <Email>{value.email}</Email>}\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.firstGivenName}${!!option.otherGivenName ? ` ${option.otherGivenName}` : ''} ${option.familyName} ${option.mobile} ${option.email}`\n      }}\n      onChange={(evt, newValue) => {\n        if (newValue) {\n          if (newValue.inputValue) {\n            const nameParts = newValue.inputValue.split(' ');\n            onChange({\n              firstGivenName: nameParts[0],\n              familyName: newValue.inputValue.substring(nameParts[0].length + 1)\n            });\n          } else {\n            onChange(newValue);\n          }\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            familyName: '',\n            firstGivenName: `Create Person \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by Name, Email or Mobile', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default PersonPicker;\n","import { Grid } from \"@material-ui/core\";\nimport TextField from \"components/form/TextField\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Person from \"types/Person\";\n\nexport interface NewPersonDetailsProps {\n  person: Person;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface NewPersonDetailsForm {\n  FirstGivenName: string;\n  OtherGivenName: string;\n  FamilyName: string;\n  Mobile: string;\n  Email: string;\n}\n\nfunction NewPersonDetails({ person: { firstGivenName, otherGivenName, familyName, mobile, email } }: NewPersonDetailsProps) {\n\n  const methods = useForm<NewPersonDetailsForm>({\n    defaultValues: {\n      FirstGivenName: firstGivenName,\n      OtherGivenName: otherGivenName,\n      FamilyName: familyName,\n      Mobile: mobile,\n      Email: email,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    // handleSubmit,\n    control,\n    // watch,\n    // getValues,\n  } = methods;\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={12} md={4}>\n        <TextField\n          autoFocus\n          name=\"FirstGivenName\"\n          label=\"First Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"OtherGivenName\"\n          label=\"Other Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"FamilyName\"\n          label=\"Family Name\"\n          control={control}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default NewPersonDetails;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DatePickerStyles = css`\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst DialogStyles = css`\n  .MuiToolbar-root {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst DateField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    rules,\n    // type,\n    placeholder = 'dd/mm/yyyy',\n    disabled,\n    autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Controller\n          control={control}\n          name={name as FieldName<T>}\n          rules={rules}\n          render={({ onChange, onBlur, value }) => (\n            <KeyboardDatePicker\n              // variant=\"inline\"\n              autoOk\n              DialogProps={{ className: DialogStyles }}\n              className={DatePickerStyles}\n              disabled={disabled}\n              onBlur={onBlur}\n              autoFocus={autoFocus}\n              // clearable // TODO: add clear adornment if possible\n              placeholder={placeholder}\n              showTodayButton\n              value={value}\n              // onChange={handleDateChange}\n              onChange={onChange}\n              // onChange={date => handleDateChange(date)}\n              // minDate={new Date()}\n              format=\"dd/MM/yyyy\"\n            />\n          )}\n        />\n      </MuiPickersUtilsProvider>\n    </FormControl>\n  );\n};\n\nexport default DateField;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport SectionHeading from 'components/SectionHeading';\nimport DateField from 'components/form/DateField';\n\nexport interface DirectorshipDetailsProps {\n  // person: Person;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface DirectorshipDetailsForm {\n  AppointmentDate: Date | null;\n  CeaseDate: Date | null;\n}\n\nfunction DirectorshipDetails() {\n\n  const methods = useForm<DirectorshipDetailsForm>({\n    defaultValues: {\n      AppointmentDate: null,\n      CeaseDate: null,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}><SectionHeading>Directorship</SectionHeading></Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"AppointmentDate\"\n          label=\"Appointment Date\"\n        />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"CeaseDate\"\n          label=\"Cease Date\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default DirectorshipDetails;\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport PersonPicker, { PersonInput } from './PersonPicker';\nimport NewPersonDetails from './NewPersonDetails';\nimport DirectorshipDetails from './DirectorshipDetails';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddDirectorDialogProps {\n  isOpen: boolean;\n  // company?: PersonInput;\n  onClose: () => void;\n  onSubmit: (company: PersonInput) => void;\n}\n\nfunction AddDirectorDialog({ isOpen, onClose, onSubmit }: AddDirectorDialogProps) {\n  const [selectedPerson, setSelectedPerson] = useState<PersonInput | null>(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedPerson(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(selectedPerson!);\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedPerson(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Director\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedPerson) ?\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <NewPersonDetails\n                      person={!!selectedPerson.inputValue ? {\n                        firstGivenName: selectedPerson.inputValue,\n                        familyName: ''\n                      } : selectedPerson}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <DirectorshipDetails />\n                  </Grid>\n                </Grid>\n              :\n              <PersonPicker\n                value={selectedPerson}\n                onChange={setSelectedPerson}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedPerson} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddDirectorDialog;\n","import styled from \"@emotion/styled\";\nimport { Button, FormLabel, Grid } from \"@material-ui/core\";\nimport SwitchField from \"components/form/SwitchField\";\nimport TextField from \"components/form/TextField\";\nimport SectionHeading from \"components/SectionHeading\";\nimport { css } from \"emotion\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { MdAdd, MdPerson } from \"react-icons/md\";\nimport Director from \"types/Director\";\nimport Company from \"types/Company\";\nimport { formatAbnAcn } from \"utils/abnAcn\";\nimport CompanyDirectorDetails from \"./CompanyDirectorDetails\";\nimport AddDirectorDialog from \"./AddDirectorDialog\";\n\nconst Directors = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst LabelStyle = css`\n  flex-grow: 1;\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n  align-self: flex-end;\n`;\n\nconst Actions = styled.div`\n  .MuiButton-root {\n    margin-left: 8px;\n  }\n`;\n\nconst EmptyState = styled.div`\n  background-color: #eee;\n  padding: 24px;\n  text-align: center;\n`;\n\nexport interface NewCompanyDetailsProps {\n  company: Company;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface NewCompanyDetailsForm {\n  Name: string;\n  Acn: string;\n  Abn: string;\n  IsTradingEntity: boolean;\n  IsForeign: boolean;\n  ForeignIdentifier: string;\n}\n\nfunction NewCompanyDetails({ company: { acn, abn, name } }: NewCompanyDetailsProps) {\n  const [isDirectorModalOpen, setIsDirectorModalOpen] = useState(false);\n  const [directors, setDirectors] = useState<Director[]>([]);\n\n  const methods = useForm<NewCompanyDetailsForm>({\n    defaultValues: {\n      Name: name,\n      Acn: formatAbnAcn(acn),\n      IsTradingEntity: !!abn,\n      Abn: formatAbnAcn(abn),\n      IsForeign: false,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    // handleSubmit,\n    control,\n    watch,\n    // getValues,\n  } = methods;\n\n  const isTradingEntity = watch('IsTradingEntity');\n  const isForeign = watch('IsForeign');\n\n  function onDirectorModalClose() {\n    setIsDirectorModalOpen(false);\n  }\n\n  function onDirectorModalSubmit(director: Director) {\n    setIsDirectorModalOpen(false);\n    addDirector(director);\n  }\n\n  function onAddDirector() {\n    setIsDirectorModalOpen(true);\n  }\n\n  function addDirector(director: Director) {\n    setDirectors([...directors, director]);\n  }\n\n  function removeDirector(index: number) {\n    setDirectors(directors.slice(0, index).concat(directors.slice(index + 1)));\n  }\n  return (\n    <>\n      <Grid container spacing={2} alignItems=\"flex-end\">\n        <Grid item xs={12}><SectionHeading>Company Details</SectionHeading></Grid>\n        <Grid item xs={10}>\n          <TextField\n            autoFocus\n            id=\"NewCompanyName\"\n            name=\"Name\"\n            label=\"Name\"\n            control={control}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <SwitchField\n            name=\"IsForeign\"\n            control={control}\n            label=\"Foreign?\"\n          />\n        </Grid>\n        {\n          isForeign ?\n          <Grid item xs={12}>\n            <TextField\n              name=\"ForeignIdentifier\"\n              label=\"Identifier\"\n              control={control}\n            />\n          </Grid>\n          :\n          <>\n            <Grid item xs={12} md={3}>\n              <TextField\n                name=\"Acn\"\n                label=\"ACN\"\n                control={control}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <SwitchField\n                name=\"IsTradingEntity\"\n                control={control}\n                label=\"Is Trading?\"\n              />\n            </Grid>\n            {\n              isTradingEntity &&\n              <Grid item xs={9} md={6}>\n                <TextField\n                  name=\"Abn\"\n                  label=\"ABN\"\n                  control={control}\n                />\n              </Grid>\n            }\n          </>\n        }\n        <Grid item xs={12}>\n          <Directors>\n            <Header>\n              <FormLabel className={LabelStyle}>Directors</FormLabel>\n              <Actions>\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<MdPerson/>}\n                  onClick={onAddDirector}\n                />\n              </Actions>\n            </Header>\n            {\n              !directors?.length ?\n              <EmptyState>No directors assigned</EmptyState>\n              :\n              directors.map((director, index) =>\n                <CompanyDirectorDetails\n                  key={index}\n                  index={index}\n                  director={director}\n                  onRemove={removeDirector} />\n              )\n            }\n          </Directors>\n        </Grid>\n      </Grid>\n      <AddDirectorDialog\n        isOpen={isDirectorModalOpen}\n        onClose={onDirectorModalClose}\n        onSubmit={onDirectorModalSubmit}\n      />\n    </>\n  )\n}\n\nexport default NewCompanyDetails;\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport CompanyPicker, { CompanyInput } from './CompanyPicker';\nimport NewCompanyDetails from './NewCompanyDetails';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddCompanyTrusteeDialogProps {\n  isOpen: boolean;\n  // company?: CompanyInput;\n  onClose: () => void;\n  onSubmit: (company: CompanyInput) => void;\n}\n\nfunction AddCompanyTrusteeDialog({ isOpen, onClose, onSubmit }: AddCompanyTrusteeDialogProps) {\n  const [selectedCompany, setSelectedCompany] = useState<CompanyInput | null>(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedCompany(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(selectedCompany!);\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedCompany(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Company Trustee\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedCompany) ?\n              <NewCompanyDetails\n                company={!!selectedCompany.inputValue ?\n                  selectedCompany.acn ? {\n                    name: '',\n                    acn: selectedCompany.acn\n                  } : {\n                    name: selectedCompany.inputValue,\n                    acn: ''\n                  } :selectedCompany}\n                />\n              :\n              <CompanyPicker\n                value={selectedCompany}\n                onChange={setSelectedCompany}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedCompany} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddCompanyTrusteeDialog;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { CompanyTrustee } from \"types/Trust\";\nimport { BiBuilding } from \"react-icons/bi\";\nimport { MdMoreVert } from \"react-icons/md\";\nimport { Grid, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport { formatAbnAcn } from \"utils/abnAcn\";\n\nconst TrusteeRoot = styled.div`\n  background-color: #eee;\n  margin-bottom: 2px;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div`\n  flex-grow: 1;\n  padding: 16px;\n  display: flex;\n`;\n\nconst CoreDetails = styled.div`\n  flex-grow: 1;\n`;\n\nconst Name = styled.span`\n  display: inline-block;\n  font-size: 14px;\n`;\n\nconst Acn = styled.span`\n  display: inline-block;\n  color: #777;\n`;\n\nconst Icon = styled.span`\n  display: inline-block;\n  font-size: 16px;\n  width: 30px;\n  vertical-align: middle;\n`;\n\nconst Actions = styled.div`\n  margin-right: 2px;\n  margin-top: 2px;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nexport interface CompanyTrusteeDetailsProps {\n  trustee: CompanyTrustee;\n  onRemove: (index: number) => void;\n  index: number;\n}\n\nfunction CompanyTrusteeDetails({ trustee, onRemove, index}: CompanyTrusteeDetailsProps) {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    onRemove(index);\n  }\n\n  function onMenuRunCreditCheck() {\n    onMenuClose();\n    // onRemove(index);\n  }\n\n  function onMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <TrusteeRoot>\n      <Head>\n        <Title>\n          <Icon>\n            <BiBuilding/>\n          </Icon>\n          <CoreDetails>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Name>{trustee.name}</Name>\n              </Grid>\n              <Grid item xs={12}>\n                <Acn>\n                  <span>{formatAbnAcn(trustee.acn)}</span>\n                  { !!trustee.abn && <> / <span>{formatAbnAcn(trustee.abn)}</span></>}\n                </Acn>\n              </Grid>\n            </Grid>\n          </CoreDetails>\n        </Title>\n        <Actions>\n          <IconButton\n            // className={TradingEntityEditClass}\n            onClick={onMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            {/* <MenuItem className={MenuItemStyle} onClick={() => {}}>Run</MenuItem> */}\n            <MenuItem className={MenuItemStyle} onClick={onMenuRunCreditCheck}>Run Credit Check</MenuItem>\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n        </Actions>\n      </Head>\n    </TrusteeRoot>\n  )\n}\n\nexport default CompanyTrusteeDetails;\n","import { Button, Grid } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { CompanyTrustee, isCompanyTrustee, Trust, Trustee } from \"types/Trust\";\nimport { FormLabel } from '@material-ui/core';\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport Card from \"components/Card\";\nimport { MdAdd, MdPerson } from \"react-icons/md\";\nimport { BiBuilding } from \"react-icons/bi\";\nimport AutoCompleteField, { SelectOption } from \"components/form/AutoCompleteField\";\nimport TrustType, { TrustTypeLabels } from \"types/TrustType\";\nimport { useForm } from \"react-hook-form\";\nimport UploadField from \"components/form/UploadField\";\nimport TextField from \"components/form/TextField\";\nimport AddCompanyTrusteeDialog from \"./AddCompanyTrusteeDialog\";\nimport CompanyTrusteeDetails from \"./CompanyTrusteeDetails\";\n\nconst Trustees = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst LabelStyle = css`\n  flex-grow: 1;\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n  align-self: flex-end;\n`;\n\nconst Actions = styled.div`\n  .MuiButton-root {\n    margin-left: 8px;\n  }\n`;\n\nconst EmptyState = styled.div`\n  background-color: #eee;\n  padding: 24px;\n  text-align: center;\n`;\n\n\nconst trustTypeOptions = [...TrustTypeLabels.entries()].map(([trustType, label]) => \n  ({ label: label, value: trustType })\n);\n\nexport interface TrustDetailsProps {\n  trust?: Trust;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface TrustForm {\n  Name?: string;\n  TrustType?: SelectOption<TrustType>;\n  TrustDeed?: (File | string)[];\n}\n\nconst defaultValues: TrustForm = {\n}\n\nfunction TrustDetails({ trust }: TrustDetailsProps) {\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState(false);\n  const [trustees, setTrustees] = useState<Trustee[]>([]);\n\n  const methods = useForm<TrustForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    // handleSubmit,\n    control,\n    // watch,\n    // getValues,\n  } = methods;\n\n  function onCompanyModalClose() {\n    setIsCompanyModalOpen(false);\n  }\n\n  function onCompanyModalSubmit(company: CompanyTrustee) {\n    setIsCompanyModalOpen(false);\n    addTrustee(company);\n  }\n\n  function onAddCompany() {\n    setIsCompanyModalOpen(true);\n  }\n\n  function addTrustee(trustee: Trustee) {\n    setTrustees([...trustees, trustee]);\n  }\n\n  function removeTrustee(index: number) {\n    setTrustees(trustees.slice(0, index).concat(trustees.slice(index + 1)));\n  }\n\n  return (\n    <Card title=\"Trust Details\">\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            name=\"Name\"\n            control={control}\n            label=\"Name\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <AutoCompleteField\n            name=\"TrustType\"\n            control={control}\n            label=\"Type\"\n            options={trustTypeOptions}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <UploadField\n            name=\"TrustDeed\"\n            label=\"Certified Trust Deed\"\n            control={control}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Trustees>\n            <Header>\n              <FormLabel className={LabelStyle}>Trustees</FormLabel>\n              <Actions>\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<MdPerson/>}\n                />\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<BiBuilding/>}\n                  onClick={onAddCompany}\n                />\n              </Actions>\n            </Header>\n            {\n              !trustees.length ?\n              <EmptyState>No trustees assigned</EmptyState>\n              :\n              trustees.map((trustee, index) =>\n                isCompanyTrustee(trustee) ? \n                <CompanyTrusteeDetails\n                  key={index}\n                  index={index}\n                  trustee={trustee}\n                  onRemove={removeTrustee} />\n                :\n                <div key={index}>{trustee.familyName}</div>\n              )\n            }\n          </Trustees>\n        </Grid>\n      </Grid>\n      <AddCompanyTrusteeDialog\n        isOpen={isCompanyModalOpen}\n        onClose={onCompanyModalClose}\n        onSubmit={onCompanyModalSubmit}\n      />\n    </Card>\n  )\n}\n\nexport default TrustDetails;\n","import Company from \"./Company\";\nimport Person from \"./Person\";\nimport TrustType from \"./TrustType\";\n\nexport interface UnitTrust {\n  unitHolders?: Person[];\n  foundingUnitHolders?: Person[];\n}\n\nexport interface PersonTrustee extends Person {\n\n}\n\nexport interface CompanyTrustee extends Company {\n\n}\n\nexport interface CompanySettlor extends Company {\n\n}\n\nexport interface PersonSettlor extends Company {\n\n}\n\nexport type Trustee = PersonTrustee | CompanyTrustee;\nexport type Settlor = PersonSettlor | CompanySettlor;\n\nexport const isCompanyTrustee = (trustee: Trustee): trustee is CompanyTrustee => {\n  const isCompany = (trustee as CompanyTrustee).acn !== undefined;\n  return isCompany;\n}\n\nexport const isPersonTrustee = (trustee: Trustee): trustee is PersonTrustee => {\n  return (trustee as PersonTrustee).firstGivenName !== undefined\n}\n\nexport interface Trust {\n  legalName: string;\n  abn?: string;\n  trustees?: Trustee[];\n  unitTrust?: UnitTrust;\n  settlor?: Settlor;\n  deedDate?: string;\n  trustType?: TrustType;\n}\n","// import styled from '@emotion/styled';\n// import { GoCheck } from 'react-icons/go';\n// import { MdEdit, MdEmail, MdLocalPhone, MdSend } from 'react-icons/md';\n// import { useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\n// import AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport TextField from 'components/form/TextField';\nimport PaddedContainer from 'components/PaddedContainer';\n// import DisplayField from 'components/form/DisplayField';\nimport Card from 'components/Card';\nimport TradingEntityPanel from 'components/organisms/TradingEntityPanel';\nimport React from 'react';\nimport EntityType from 'types/EntityType';\nimport TrustDetails from 'components/organisms/TrustDetails';\nimport { useRecoilState } from 'recoil';\nimport { tradingEntityState } from 'state/TradingEntityState';\n\n// const ContactDetails = styled.div`\n//   padding: 16px 16px 1px 16px;\n//   background-color: #eee;\n//   margin-top: 1px;\n//   font-size: 14px;\n//   position: relative;\n// `;\n\n// const ContactLineIcon = styled.div`\n//   display: inline-block;\n//   margin-right: 10px;\n//   vertical-align: middle;\n// `;\n\n// const ContactDetailLine = styled.div`\n//   margin-bottom: 16px;\n// `;\n\n// const ContactEditClass = css`\n//   position: absolute;\n//   right: 2px;\n//   top: 2px;\n// `\n\n// const contactOptions: SelectOption<string>[] = [\n//   { label: \"Walter White\", value: \"123\" },\n//   { label: \"Saul Goodman\", value: \"456\" },\n//   { label: \"Kim Wexler\", value: \"789\" }\n// ];\n\ninterface BusinessDetailsForm {\n  // LegalName: string;\n  // ABN: string;\n  // ACN: string;\n  TradingName: string;\n  TradingAddress: string;\n  WebSite: string;\n  Notes: string;\n  // Abn: string;\n  // PrimaryContact: SelectOption<string> | undefined;\n  // SecondaryContact: SelectOption<string> | undefined;\n}\n\nconst defaultValues: BusinessDetailsForm = {\n  // LegalName: 'Breaking Bad Pty Ltd',\n  // ABN: '',\n  // ACN: '',\n  TradingName: '',\n  WebSite: '',\n  TradingAddress: '',\n  Notes: '',\n  // Abn: '12 345 678 901',\n  // PrimaryContact: contactOptions.find(option => option.value === '123'),\n  // SecondaryContact: undefined,\n}\n\nfunction BusinessDetails() {\n  // const [tradingEntity, setTradingEntity] = useState<TradingEntity | undefined>(undefined);\n  const [tradingEntity] = useRecoilState(tradingEntityState);\n\n  // const history = useHistory();\n  const methods = useForm<BusinessDetailsForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n  } = methods;\n\n\n  return (\n    <PaddedContainer>\n      <form onSubmit={handleSubmit(() => {})}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={6}>\n            <Card title=\"Trading Entity\">\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TradingEntityPanel />\n                </Grid>\n                {/* <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ABN\"\n                    control={control}\n                    label=\"ABN\"\n                    placeholder=\"Find by name or ABN\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <DisplayField\n                    label=\"Legal Name\"\n                    value=\"\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ACN\"\n                    label=\"ACN\"\n                    control={control}\n                  />\n                </Grid> */}\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingName\"\n                    control={control}\n                    label=\"Trading Name\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingAddress\"\n                    control={control}\n                    label=\"Trading Address\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"WebSite\"\n                    control={control}\n                    label=\"Web Site\"\n                    placeholder=\"https://\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"Notes\"\n                    control={control}\n                    multiline\n                    minRows={3}\n                    label=\"Notes\"\n                  />\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid>\n          {\n            tradingEntity?.entityType === EntityType.Partnership &&\n            <Grid item xs={12} lg={6}>\n              <Card title=\"Partnership Details\">\n                \n              </Card>\n            </Grid>\n          }\n          {\n            tradingEntity?.entityType === EntityType.Trust &&\n            <Grid item xs={12} lg={6}>\n              <TrustDetails />\n            </Grid>\n          }\n          {/* <Grid item xs={12} lg={6}>\n            <Card title=\"Contacts\">\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"PrimaryContact\"\n                    control={control}\n                    label=\"Primary Contact\"\n                    options={[\n                      { label: \"Walter White\", value: \"123\" },\n                      { label: \"Saul Goodman\", value: \"456\" },\n                      { label: \"Kim Wexler\", value: \"789\" }\n                    ]}\n                    placeholder=\"Select contact\"\n                    rules={ { required: 'Required' } }\n                  />\n                  {\n                    primaryContact &&\n                    <ContactDetails>\n                      <IconButton\n                        css={ContactEditClass}\n                        onClick={() => history.push('./directory/100')}\n                      >\n                        <MdEdit />\n                      </IconButton>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdLocalPhone /></ContactLineIcon>+61 400 123 456\n                      </ContactDetailLine>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdEmail /></ContactLineIcon>walter.white@bb.com\n                        <Tooltip title=\"Joined\"><InviteStatusIcon css={Joined}><GoCheck /></InviteStatusIcon></Tooltip>\n                      </ContactDetailLine>\n                    </ContactDetails>\n                  }\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"SecondaryContact\"\n                    control={control}\n                    label=\"Secondary Contact\"\n                    options={[\n                      { label: \"Walter White\", value: \"123\" },\n                      { label: \"Saul Goodman\", value: \"456\" },\n                      { label: \"Kim Wexler\", value: \"789\" }\n                    ]}\n                    placeholder=\"Select contact\"\n                    rules={ { required: 'Required' } }\n                  />\n                  {\n                    secondaryContact &&\n                    <ContactDetails>\n                      <IconButton\n                        css={ContactEditClass}\n                        onClick={() => history.push('./directory/200')}\n                      >\n                        <MdEdit />\n                      </IconButton>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdLocalPhone /></ContactLineIcon>+61 444 555 666\n                      </ContactDetailLine>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdEmail /></ContactLineIcon>kim.wexler@wm.com\n                        <Tooltip title=\"Invited\"><InviteStatusIcon css={Invited}><MdSend /></InviteStatusIcon></Tooltip>\n                      </ContactDetailLine>\n                    </ContactDetails>\n                  }\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid> */}\n        </Grid>\n      </form>\n    </PaddedContainer>\n  )\n}\n\nexport default BusinessDetails;\n"],"sourceRoot":""}