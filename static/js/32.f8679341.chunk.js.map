{"version":3,"sources":["utils/string.ts","../node_modules/abnacn-validator/dist/abnacn-validator.js","components/organisms/CompanyPicker.tsx","components/organisms/AddCompanyTrusteeDialog.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","define","exports","isValidABN","str","length","weights","checksum","Number","reduce","total","digit","index","isValidACN","acn","isNaN","parseInt","weighting","tally","i","check","isValidABNorACN","Object","defineProperty","Name","styled","span","EntityMatch","BusinessNumber","ListBoxStyles","css","TextFieldStyle","allCompanyEntities","businessNumber","companyNumber","name","incorporationCountry","Country","AU","filter","createFilterOptions","CompanyPicker","onChange","Autocomplete","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","props","state","inputValue","formatCompanyNumber","formatBusinessNumber","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","evt","newValue","None","filterOptions","params","filtered","cleanValue","push","renderInput","InputLabelProps","InputProps","rest","TextField","autoFocus","className","shrink","placeholder","ContentStyle","bp","xs","sm","countryOptions","CountryLabels","entries","country","label","AddCompanyTrusteeDialog","isOpen","onClose","onSubmit","useState","selectedCompany","setSelectedCompany","isDirty","setIsDirty","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","useCompanyContext","company","setCompany","newCompanyDetailsRef","React","useRef","useForm","defaultValues","mode","control","watch","reset","onModalClose","useEffect","undefined","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Grid","container","spacing","item","AutoCompleteField","rules","required","NewCompanyDetails","lockAccountJurisdiction","ref","initialCompany","onDirtyChange","DialogActions","Button","onClick","variant","disabled","current","getFormValues"],"mappings":"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","file":"static/js/32.f8679341.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports);\n        global.abnacn = mod.exports;\n    }\n})(this, function (exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.isValidABN = isValidABN;\n    exports.isValidACN = isValidACN;\n    exports.isValidABNorACN = isValidABNorACN;\n    // Taken from Truffala's formula at:\n    // http://stackoverflow.com/questions/14174738/regex-to-match-australian-business-number-abn\n    function isValidABN(str) {\n        str = str.replace(/[ _]/g, '');\n\n        if (!str || str.length !== 11) {\n            return false;\n        }\n        var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19],\n            checksum = str.split('').map(Number).reduce(function (total, digit, index) {\n            if (!index) {\n                digit--;\n            }\n            return total + digit * weights[index];\n        }, 0);\n\n        if (!checksum || checksum % 89 !== 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // Taken from Worldspawn's post on http://forums.whirlpool.net.au/archive/984775\n    function isValidACN(acn) {\n        // Strip off white space\n        if (typeof acn === 'string') {\n            acn = acn.replace(/\\s/g, '').replace(/-/g, '');\n        }\n\n        if (acn.length != 9 || isNaN(parseInt(acn))) return false;\n\n        var weighting = [8, 7, 6, 5, 4, 3, 2, 1];\n        var tally = 0;\n        for (var i = 0; i < weighting.length; i++) {\n            tally += parseInt(acn.charAt(i)) * weighting[i];\n        }\n\n        var check = 10 - tally % 10;\n        check = check == 10 ? 0 : check;\n\n        return check == acn[8];\n    }\n\n    function isValidABNorACN(value) {\n        // Logical OR operation returns true if only of them is true, and false only if they're both false.\n        return isValidABN(value) || isValidACN(value);\n    }\n});\n","import { isValidABN, isValidACN } from 'abnacn-validator';\nimport { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { noSpaces } from 'utils/string';\nimport { formatBusinessNumber, formatCompanyNumber } from 'utils/businessIdentifier';\nimport { Country } from 'types/Country';\nimport Company from 'types/Company';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n  margin-bottom: 0.5em;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst BusinessNumber = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface CompanyInput extends Company {\n  inputValue?: string;\n}\n\nconst allCompanyEntities: CompanyInput[] = [\n  {\n    businessNumber: '86162372741',\n    companyNumber: '162372741',\n    name: 'APOSITIVE PTY LTD',\n    incorporationCountry: Country.AU\n  },\n  {\n    companyNumber: '609328207',\n    name: 'CROFT FAMILY PTY LTD',\n    incorporationCountry: Country.AU\n  }\n];\n\nconst filter = createFilterOptions<CompanyInput>();\n\ninterface CompanyPickerProps {\n  value: CompanyInput | null;\n  onChange: (tradingEntity: CompanyInput | null) => void;\n}\n\nconst CompanyPicker = ({ value, onChange }: CompanyPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allCompanyEntities}\n      getOptionSelected={(option: CompanyInput, value: CompanyInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.businessNumber === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <BusinessNumber>{formatAbnAcn(value.companyNumber)} {!!value.businessNumber && <> / {formatAbnAcn(value.businessNumber)}</>}</BusinessNumber>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.name}</Name>\n              {!value.inputValue && <BusinessNumber>{formatCompanyNumber(value.companyNumber, value.incorporationCountry)} {!!value.businessNumber && <> / {formatBusinessNumber(value.businessNumber, value.incorporationCountry)}</>}</BusinessNumber>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.name} ${option.companyNumber.replace(/\\s/g, '')} ${option.businessNumber?.replace(/\\s/g, '')}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            companyNumber: '',\n            name: newValue,\n            incorporationCountry: Country.None, // TODO: Fix\n            // email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          // if (isNumeric) {\n          if ((cleanValue.length === 9 && isValidACN(cleanValue)) || (cleanValue.length === 11 && isValidABN(cleanValue))) {\n            filtered.push({\n              inputValue: params.inputValue,\n              companyNumber: cleanValue,\n              incorporationCountry: Country.None, // TODO: Fix\n              name: `Create Company \"${formatBusinessNumber(cleanValue, Country.None)}\"`\n              // email: `Add \"${params.inputValue}\"`\n            });\n            // }\n          } else {\n            filtered.push({\n              inputValue: params.inputValue,\n              companyNumber: '',\n              incorporationCountry: Country.None, // TODO: Fix\n              name: `Create Company \"${params.inputValue}\"`\n            });\n          }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by company number, business number or name', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default CompanyPicker;\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport { useCompanyContext } from 'providers/Company';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport CompanyPicker, { CompanyInput } from './CompanyPicker';\nimport NewCompanyDetails, { NewCompanyDetailsForm, NewCompanyDetailsRefProps } from './NewCompanyDetails';\nimport { MdWarning } from \"react-icons/md\";\nimport AutoCompleteField from 'components/form/AutoCompleteField';\nimport { Country, CountryLabels } from 'types/Country';\nimport { useForm } from 'react-hook-form';\n\nconst ContentStyle = css`\n  min-height: 120px;\n  ${bp.xs} {\n    width: 100%;\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\nexport interface AddCompanyTrusteeDialogProps {\n  isOpen: boolean;\n  // company?: CompanyInput;\n  onClose: () => void;\n  onSubmit: (newCompanyDetails: NewCompanyDetailsForm) => void;\n}\n\nconst countryOptions = [...CountryLabels.entries()].map(([country, label]) => \n  ({ label: label, value: country })\n);\n\nexport interface AddCompanyTrusteeForm {\n  incorporationCountry?: Country;\n}\n\n\nfunction AddCompanyTrusteeDialog({ isOpen, onClose, onSubmit }: AddCompanyTrusteeDialogProps) {\n  const [selectedCompany, setSelectedCompany] = useState<CompanyInput | null>(null);\n  const [isDirty, setIsDirty] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const { company, setCompany } = useCompanyContext();\n  const newCompanyDetailsRef = React.useRef<NewCompanyDetailsRefProps>(null);\n\n  const { control, watch } = useForm<AddCompanyTrusteeForm>({\n    defaultValues: {\n    },\n    mode: 'onChange',\n  });\n\n  const incorporationCountry = watch('incorporationCountry');\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  useEffect(\n    () => {\n      setCompany(selectedCompany ? !!selectedCompany.inputValue ?\n        selectedCompany.companyNumber ? {\n          name: '',\n          companyNumber: selectedCompany.companyNumber,\n          incorporationCountry: selectedCompany.incorporationCountry,\n        } : {\n          name: selectedCompany.inputValue,\n          incorporationCountry: selectedCompany.incorporationCountry,\n          companyNumber: ''\n        } : selectedCompany : undefined)\n\n    },\n    [selectedCompany, setCompany]\n  )\n\n  function reset() {\n    setSelectedCompany(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    if (newCompanyDetailsRef.current) {\n      onSubmit(newCompanyDetailsRef.current.getFormValues())\n    };\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedCompany(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Company Trustee { isDirty && <MdWarning /> }\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          {\n            !company &&\n            <Grid item xs={6}>\n              <AutoCompleteField\n                autoFocus\n                name=\"incorporationCountry\"\n                control={control}\n                label=\"Incorporation Country\"\n                options={countryOptions}\n                rules={ { required: 'Required' } }\n              />\n            </Grid>\n          }\n          {\n            (!!incorporationCountry) &&\n            <Grid item xs={12}>\n              {\n                (company) ?\n                <NewCompanyDetails\n                  lockAccountJurisdiction={company.incorporationCountry}\n                  ref={newCompanyDetailsRef}\n                  initialCompany={company}\n                  onDirtyChange={setIsDirty}\n                />\n                :\n                <CompanyPicker\n                  value={selectedCompany}\n                  onChange={setSelectedCompany}\n                />\n              }\n            </Grid>\n          }\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedCompany} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddCompanyTrusteeDialog;\n"],"sourceRoot":""}