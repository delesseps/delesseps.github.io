{"version":3,"sources":["utils/string.ts","components/form/DateField.tsx","components/SectionHeading.tsx","components/organisms/PersonPicker.tsx","components/organisms/NewPersonDetails.tsx","components/organisms/DirectorshipDetails.tsx","components/organisms/DirectorFormPanel.tsx","components/organisms/AddDirectorDialog.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","LabelStyle","css","DatePickerStyles","DialogStyles","DateField","props","name","control","label","rules","placeholder","disabled","autoFocus","fullWidth","className","shrink","utils","DateFnsUtils","render","onChange","onBlur","autoOk","DialogProps","showTodayButton","format","SectionHeading","styled","div","Name","span","EntityMatch","Email","Mobile","ListBoxStyles","TextFieldStyle","allPersonEntities","firstGivenName","familyName","email","mobile","filter","createFilterOptions","PersonPicker","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","state","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","inputValue","otherGivenName","evt","newValue","nameParts","substring","length","filterOptions","params","filtered","push","renderInput","InputLabelProps","InputProps","rest","NewPersonDetails","useFormContext","container","spacing","alignItems","item","xs","md","DirectorshipDetails","Grid","DirectorFormPanel","ref","director","onDirtyChange","methods","useForm","defaultValues","appointmentDate","ceaseDate","mode","isDirty","formState","getValues","getFormValues","React","useImperativeHandle","useEffect","forwardRef","ContentStyle","bp","sm","AddDirectorDialog","isOpen","onClose","onSubmit","useState","selectedPerson","setSelectedPerson","setIsDirty","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","directorFormRef","useRef","reset","onModalClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogActions","Button","onClick","variant","current"],"mappings":"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","file":"static/js/26.995df44d.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DatePickerStyles = css`\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst DialogStyles = css`\n  .MuiToolbar-root {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst DateField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    rules,\n    // type,\n    placeholder = 'dd/mm/yyyy',\n    disabled,\n    autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Controller\n          control={control}\n          name={name as FieldName<T>}\n          rules={rules}\n          render={({ onChange, onBlur, value }) => (\n            <KeyboardDatePicker\n              // variant=\"inline\"\n              autoOk\n              DialogProps={{ className: DialogStyles }}\n              className={DatePickerStyles}\n              disabled={disabled}\n              onBlur={onBlur}\n              autoFocus={autoFocus}\n              // clearable // TODO: add clear adornment if possible\n              placeholder={placeholder}\n              showTodayButton\n              value={value}\n              // onChange={handleDateChange}\n              onChange={onChange}\n              // onChange={date => handleDateChange(date)}\n              // minDate={new Date()}\n              format=\"dd/MM/yyyy\"\n            />\n          )}\n        />\n      </MuiPickersUtilsProvider>\n    </FormControl>\n  );\n};\n\nexport default DateField;\n","import styled from '@emotion/styled';\n\nconst SectionHeading = styled.div`\n  font-size: 11px;\n  color: #777;\n  /* padding: 8px 0;\n  border-top: 1px solid; */\n`;\n\nexport default SectionHeading\n","import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Person from 'types/Person';\nimport { noSpaces } from 'utils/string';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface PersonInput extends Person {\n  inputValue?: string;\n}\n\nconst allPersonEntities: PersonInput[] = [\n  {\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<PersonInput>();\n\ninterface PersonPickerProps {\n  value: PersonInput | null;\n  onChange: (tradingEntity: PersonInput | null) => void;\n}\n\nconst PersonPicker = ({ value, onChange }: PersonPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allPersonEntities}\n      getOptionSelected={(option: PersonInput, value: PersonInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.businessNumber === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <BusinessNumber>{formatAbnAcn(value.companyNumber)} {!!value.businessNumber && <> / {formatAbnAcn(value.businessNumber)}</>}</BusinessNumber>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.firstGivenName} {value.familyName}</Name>\n              {!!value.email && <Email>{value.email}</Email>}\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.firstGivenName}${!!option.otherGivenName ? ` ${option.otherGivenName}` : ''} ${option.familyName} ${option.mobile} ${option.email}`\n      }}\n      onChange={(evt, newValue) => {\n        if (newValue) {\n          if (newValue.inputValue) {\n            const nameParts = newValue.inputValue.split(' ');\n            onChange({\n              firstGivenName: nameParts[0],\n              familyName: newValue.inputValue.substring(nameParts[0].length + 1)\n            });\n          } else {\n            onChange(newValue);\n          }\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            familyName: '',\n            firstGivenName: `Create Person \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by name, email or mobile', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default PersonPicker;\n","import { Grid } from \"@material-ui/core\";\nimport TextField from \"components/form/TextField\";\nimport React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nexport interface NewPersonDetailsForm {\n  firstGivenName: string;\n  otherGivenName: string;\n  familyName: string;\n  mobile: string;\n  email: string;\n}\n\nfunction NewPersonDetails() {\n  const methods = useFormContext<NewPersonDetailsForm>();\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={12} md={4}>\n        <TextField\n          autoFocus\n          name=\"firstGivenName\"\n          label=\"First Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"otherGivenName\"\n          label=\"Other Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"familyName\"\n          label=\"Family Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={8}>\n        <TextField\n          name=\"email\"\n          label=\"Email\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"mobile\"\n          label=\"Mobile\"\n          control={control}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default NewPersonDetails;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport SectionHeading from 'components/SectionHeading';\nimport DateField from 'components/form/DateField';\n\nexport interface DirectorshipDetailsForm {\n  appointmentDate: Date | null;\n  ceaseDate: Date | null;\n}\n\nfunction DirectorshipDetails() {\n  const methods = useFormContext<DirectorshipDetailsForm>();\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}><SectionHeading>Directorship</SectionHeading></Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"appointmentDate\"\n          label=\"Appointment Date\"\n        />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"ceaseDate\"\n          label=\"Cease Date\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default DirectorshipDetails;\n","import { Grid } from '@material-ui/core';\nimport NewPersonDetails, { NewPersonDetailsForm } from './NewPersonDetails';\nimport DirectorshipDetails, { DirectorshipDetailsForm } from './DirectorshipDetails';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Director from 'types/Director';\nimport React, { useEffect } from 'react';\n\n\nexport interface DirectorFormProps {\n  director: Director;\n  onDirtyChange: (isDirty: boolean) => void;\n}\n\nexport interface DirectorForm extends NewPersonDetailsForm, DirectorshipDetailsForm { }\n\nexport interface DirectorsFormPanelRefProps {\n  getFormValues: () => DirectorForm;\n}\n\nfunction DirectorFormPanel({ director: { firstGivenName, otherGivenName, familyName }, onDirtyChange }: DirectorFormProps, ref: React.Ref<DirectorsFormPanelRefProps>) {\n  const methods = useForm<DirectorForm>({\n    defaultValues: {\n      firstGivenName,\n      otherGivenName: otherGivenName || '',\n      familyName,\n      appointmentDate: null,\n      ceaseDate: null,\n    },\n    mode: 'onChange'\n  });\n\n  const { formState: { isDirty }, getValues } = methods;\n\n  React.useImperativeHandle(ref, () => ({ getFormValues }));\n\n  function getFormValues() {\n    return getValues();\n  };\n\n  useEffect(\n    () => {\n      onDirtyChange(isDirty);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isDirty],\n  );\n\n  return (\n    <FormProvider {...methods} >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <NewPersonDetails />\n        </Grid>\n        <Grid item xs={12}>\n          <DirectorshipDetails />\n        </Grid>\n      </Grid>\n    </FormProvider>\n  )\n}\n\nexport default React.forwardRef(DirectorFormPanel);\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport PersonPicker, { PersonInput } from './PersonPicker';\nimport DirectorFormPanel, { DirectorForm, DirectorsFormPanelRefProps } from './DirectorFormPanel';\nimport { MdWarning } from \"react-icons/md\";\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddDirectorDialogProps {\n  isOpen: boolean;\n  // company?: PersonInput;\n  onClose: () => void;\n  onSubmit: (directorForm: DirectorForm) => void;\n}\n\nfunction AddDirectorDialog({ isOpen, onClose, onSubmit }: AddDirectorDialogProps) {\n  const [selectedPerson, setSelectedPerson] = useState<PersonInput | null>(null);\n  const [isDirty, setIsDirty] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const directorFormRef = React.useRef<DirectorsFormPanelRefProps>(null);\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedPerson(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    if (directorFormRef.current) {\n      onSubmit(directorFormRef.current.getFormValues())\n    };\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedPerson(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Director { isDirty && <MdWarning /> }\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedPerson) ?\n              <DirectorFormPanel\n                director={!!selectedPerson.inputValue ? {\n                  firstGivenName: selectedPerson.inputValue,\n                  familyName: ''\n                } : selectedPerson}\n                onDirtyChange={setIsDirty}\n                ref={directorFormRef}\n              />\n              :\n              <PersonPicker\n                value={selectedPerson}\n                onChange={setSelectedPerson}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedPerson} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddDirectorDialog;\n"],"sourceRoot":""}