{"version":3,"sources":["utils/string.ts","../node_modules/abnacn-validator/dist/abnacn-validator.js","components/organisms/TradingEntityPicker.tsx","components/organisms/AddTradingEntityDialog.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","define","exports","isValidABN","str","length","weights","checksum","Number","reduce","total","digit","index","isValidACN","acn","isNaN","parseInt","weighting","tally","i","check","isValidABNorACN","Object","defineProperty","Name","styled","span","EntityMatch","Abn","BusinessName","ListBoxStyles","css","TextFieldStyle","allTradingEntities","abn","mainName","entityType","EntityType","Trust","entityId","businessNames","Partnership","filter","createFilterOptions","TradingEntityPicker","onChange","Autocomplete","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","props","state","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","inputValue","evt","newValue","None","filterOptions","params","filtered","cleanValue","push","formatAbnAcn","renderInput","InputLabelProps","InputProps","rest","TextField","autoFocus","className","shrink","placeholder","ContentStyle","bp","xs","sm","SelectedEntityChipLabelStyle","AddTradingEntityDialog","isOpen","onClose","onSubmit","useState","selectedTradingEntity","setSelectedTradingEntity","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","reset","onModalClose","useEffect","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","Grid","container","spacing","item","Chip","label","onDelete","DialogActions","Button","onClick","variant","disabled"],"mappings":"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","file":"static/js/19.7e0a34d4.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports);\n        global.abnacn = mod.exports;\n    }\n})(this, function (exports) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.isValidABN = isValidABN;\n    exports.isValidACN = isValidACN;\n    exports.isValidABNorACN = isValidABNorACN;\n    // Taken from Truffala's formula at:\n    // http://stackoverflow.com/questions/14174738/regex-to-match-australian-business-number-abn\n    function isValidABN(str) {\n        str = str.replace(/[ _]/g, '');\n\n        if (!str || str.length !== 11) {\n            return false;\n        }\n        var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19],\n            checksum = str.split('').map(Number).reduce(function (total, digit, index) {\n            if (!index) {\n                digit--;\n            }\n            return total + digit * weights[index];\n        }, 0);\n\n        if (!checksum || checksum % 89 !== 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // Taken from Worldspawn's post on http://forums.whirlpool.net.au/archive/984775\n    function isValidACN(acn) {\n        // Strip off white space\n        if (typeof acn === 'string') {\n            acn = acn.replace(/\\s/g, '').replace(/-/g, '');\n        }\n\n        if (acn.length != 9 || isNaN(parseInt(acn))) return false;\n\n        var weighting = [8, 7, 6, 5, 4, 3, 2, 1];\n        var tally = 0;\n        for (var i = 0; i < weighting.length; i++) {\n            tally += parseInt(acn.charAt(i)) * weighting[i];\n        }\n\n        var check = 10 - tally % 10;\n        check = check == 10 ? 0 : check;\n\n        return check == acn[8];\n    }\n\n    function isValidABNorACN(value) {\n        // Logical OR operation returns true if only of them is true, and false only if they're both false.\n        return isValidABN(value) || isValidACN(value);\n    }\n});\n","import { isValidABN } from 'abnacn-validator';\nimport { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport TradingEntity from 'types/TradingEntity';\nimport EntityType from 'types/EntityType';\nimport { noSpaces } from 'utils/string';\nimport { formatAbnAcn } from 'utils/abnAcn';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Abn = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n  margin-top: 0.5em;\n`;\n\nconst BusinessName = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface TradingEntityInput extends TradingEntity {\n  inputValue?: string;\n}\n\nconst allTradingEntities: TradingEntityInput[] = [\n  {\n    abn: '34 826 428 290',\n    mainName: 'The Trustee for The A & A White Family Trust',\n    entityType: EntityType.Trust,\n    entityId: 'e1b05d24-2db8-451b-8812-9b38d2a26f93',\n    businessNames: [\n      'Advance Human Solutions',\n      'Empowering Woman',\n    ],\n  },\n  {\n    abn: '63 316 911 021',\n    mainName: 'A SMITH & W SMITH & THE TRUSTEE FOR THE SMITH FAMILY TRUST',\n    entityType: EntityType.Partnership,\n    entityId: '31adab15-ca11-4a81-a619-5ab28811c902',\n    businessNames: [\n      'CE & H SMITH\t'\n    ],\n  }\n];\n\nconst filter = createFilterOptions<TradingEntityInput>();\n\ninterface TradingEntityPickerProps {\n  value: TradingEntityInput | null;\n  onChange: (tradingEntity: TradingEntityInput | null) => void;\n}\n\nconst TradingEntityPicker = ({ value, onChange }: TradingEntityPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allTradingEntities}\n      getOptionSelected={(option: TradingEntityInput, value: TradingEntityInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => (\n        <li {...props}>\n          <EntityMatch>\n            <Name>{value.mainName}</Name>\n            {!!value.abn &&<Abn>{value.abn}</Abn>}\n            {!!value.businessNames && <BusinessName>{value.businessNames.join(', ')}</BusinessName>}\n          </EntityMatch>\n        </li>\n      )}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.mainName} ${option.abn.replace(/\\s/g, '')} ${option.businessNames?.join(' ')}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            abn: '',\n            entityType: EntityType.None,\n            mainName: newValue,\n            // email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          if (cleanValue.length === 11 && isValidABN(cleanValue)) {\n            filtered.push({\n              inputValue: cleanValue,\n              abn: '',\n              entityType: EntityType.None,\n              mainName: `Lookup \"${formatAbnAcn(cleanValue)}\" on ABR Search`\n            });\n          }\n        // } else {\n        //   filtered.push({\n        //     // inputValue: params.inputValue,\n        //     id: 0,\n        //     name: '',\n        //     email: 'Type email address to Add'\n        //   });\n        // }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by ABN or name', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default TradingEntityPicker;\n","import { Button, Chip, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport TradingEntityPicker, { TradingEntityInput } from './TradingEntityPicker';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\nconst SelectedEntityChipLabelStyle = css`\n  font-size: 14px;\n  ${bp.xs} {\n    max-width: 340px;\n  }\n  ${bp.sm} {\n    max-width: 500px;\n  }\n`\n\nexport interface AddTradingEntityDialogProps {\n  isOpen: boolean;\n  // tradingEntity?: TradingEntityInput;\n  onClose: () => void;\n  onSubmit: (tradingEntity: TradingEntityInput) => void;\n}\n\nfunction AddTradingEntityDialog({ isOpen, onClose, onSubmit }: AddTradingEntityDialogProps) {\n  const [selectedTradingEntity, setSelectedTradingEntity] = useState<TradingEntityInput | null>(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedTradingEntity(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(selectedTradingEntity!);\n  }\n\n  function onSelectionRemove() {\n    setSelectedTradingEntity(null);\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Find Trading Entity\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n          {\n              (selectedTradingEntity) ?\n              <Chip\n                classes={{ label: SelectedEntityChipLabelStyle }}\n                label={selectedTradingEntity.inputValue ? selectedTradingEntity.inputValue : `${selectedTradingEntity.mainName} (${selectedTradingEntity.abn})`}\n                onDelete={onSelectionRemove}\n              />\n              :\n              <TradingEntityPicker\n                value={selectedTradingEntity}\n                onChange={setSelectedTradingEntity}\n              />\n            }\n            {/* <TextField\n              name=\"Abn\"\n              control={control}\n              // label=\"Name\"\n              placeholder=\"Search by ABN\"\n              // rules={ { required: 'Required' } }\n            /> */}\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedTradingEntity} onClick={onModalOK}>\n          Select\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddTradingEntityDialog;\n"],"sourceRoot":""}