{"version":3,"sources":["components/organisms/PersonPicker.tsx","components/organisms/NewPersonDetails.tsx","components/form/DateField.tsx","components/organisms/DirectorshipDetails.tsx","components/organisms/AddDirectorDialog.tsx"],"names":["Name","styled","span","EntityMatch","Email","Mobile","ListBoxStyles","css","TextFieldStyle","allPersonEntities","firstGivenName","familyName","email","mobile","filter","createFilterOptions","PersonPicker","value","onChange","Autocomplete","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","props","state","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","inputValue","otherGivenName","evt","newValue","nameParts","split","substring","length","filterOptions","params","filtered","noSpaces","push","renderInput","InputLabelProps","InputProps","rest","TextField","autoFocus","className","shrink","placeholder","NewPersonDetails","person","control","useForm","defaultValues","FirstGivenName","OtherGivenName","FamilyName","mode","Grid","container","spacing","alignItems","item","xs","md","name","label","LabelStyle","DatePickerStyles","DialogStyles","DateField","rules","disabled","FormControl","fullWidth","InputLabel","utils","DateFnsUtils","render","onBlur","autoOk","DialogProps","showTodayButton","format","DirectorshipDetails","AppointmentDate","CeaseDate","SectionHeading","ContentStyle","bp","sm","AddDirectorDialog","isOpen","onClose","onSubmit","useState","selectedPerson","setSelectedPerson","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","reset","onModalClose","useEffect","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogActions","Button","onClick","variant"],"mappings":"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","file":"static/js/21.c196069d.chunk.js","sourcesContent":["import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Person from 'types/Person';\nimport { noSpaces } from 'utils/string';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface PersonInput extends Person {\n  inputValue?: string;\n}\n\nconst allPersonEntities: PersonInput[] = [\n  {\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<PersonInput>();\n\ninterface PersonPickerProps {\n  value: PersonInput | null;\n  onChange: (tradingEntity: PersonInput | null) => void;\n}\n\nconst PersonPicker = ({ value, onChange }: PersonPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allPersonEntities}\n      getOptionSelected={(option: PersonInput, value: PersonInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.abn === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.firstGivenName} {value.familyName}</Name>\n              {!!value.email && <Email>{value.email}</Email>}\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.firstGivenName}${!!option.otherGivenName ? ` ${option.otherGivenName}` : ''} ${option.familyName} ${option.mobile} ${option.email}`\n      }}\n      onChange={(evt, newValue) => {\n        if (newValue) {\n          if (newValue.inputValue) {\n            const nameParts = newValue.inputValue.split(' ');\n            onChange({\n              firstGivenName: nameParts[0],\n              familyName: newValue.inputValue.substring(nameParts[0].length + 1)\n            });\n          } else {\n            onChange(newValue);\n          }\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            familyName: '',\n            firstGivenName: `Create Person \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by Name, Email or Mobile', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default PersonPicker;\n","import { Grid } from \"@material-ui/core\";\nimport TextField from \"components/form/TextField\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Person from \"types/Person\";\n\nexport interface NewPersonDetailsProps {\n  person: Person;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface NewPersonDetailsForm {\n  FirstGivenName: string;\n  OtherGivenName: string;\n  FamilyName: string;\n  Mobile: string;\n  Email: string;\n}\n\nfunction NewPersonDetails({ person: { firstGivenName, otherGivenName, familyName, mobile, email } }: NewPersonDetailsProps) {\n\n  const methods = useForm<NewPersonDetailsForm>({\n    defaultValues: {\n      FirstGivenName: firstGivenName,\n      OtherGivenName: otherGivenName,\n      FamilyName: familyName,\n      Mobile: mobile,\n      Email: email,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    // handleSubmit,\n    control,\n    // watch,\n    // getValues,\n  } = methods;\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={12} md={4}>\n        <TextField\n          autoFocus\n          name=\"FirstGivenName\"\n          label=\"First Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"OtherGivenName\"\n          label=\"Other Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"FamilyName\"\n          label=\"Family Name\"\n          control={control}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default NewPersonDetails;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DatePickerStyles = css`\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst DialogStyles = css`\n  .MuiToolbar-root {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst DateField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    rules,\n    // type,\n    placeholder = 'dd/mm/yyyy',\n    disabled,\n    autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Controller\n          control={control}\n          name={name as FieldName<T>}\n          rules={rules}\n          render={({ onChange, onBlur, value }) => (\n            <KeyboardDatePicker\n              // variant=\"inline\"\n              autoOk\n              DialogProps={{ className: DialogStyles }}\n              className={DatePickerStyles}\n              disabled={disabled}\n              onBlur={onBlur}\n              autoFocus={autoFocus}\n              // clearable // TODO: add clear adornment if possible\n              placeholder={placeholder}\n              showTodayButton\n              value={value}\n              // onChange={handleDateChange}\n              onChange={onChange}\n              // onChange={date => handleDateChange(date)}\n              // minDate={new Date()}\n              format=\"dd/MM/yyyy\"\n            />\n          )}\n        />\n      </MuiPickersUtilsProvider>\n    </FormControl>\n  );\n};\n\nexport default DateField;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport SectionHeading from 'components/SectionHeading';\nimport DateField from 'components/form/DateField';\n\nexport interface DirectorshipDetailsProps {\n  // person: Person;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface DirectorshipDetailsForm {\n  AppointmentDate: Date | null;\n  CeaseDate: Date | null;\n}\n\nfunction DirectorshipDetails() {\n\n  const methods = useForm<DirectorshipDetailsForm>({\n    defaultValues: {\n      AppointmentDate: null,\n      CeaseDate: null,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}><SectionHeading>Directorship</SectionHeading></Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"AppointmentDate\"\n          label=\"Appointment Date\"\n        />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"CeaseDate\"\n          label=\"Cease Date\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default DirectorshipDetails;\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport PersonPicker, { PersonInput } from './PersonPicker';\nimport NewPersonDetails from './NewPersonDetails';\nimport DirectorshipDetails from './DirectorshipDetails';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddDirectorDialogProps {\n  isOpen: boolean;\n  // company?: PersonInput;\n  onClose: () => void;\n  onSubmit: (company: PersonInput) => void;\n}\n\nfunction AddDirectorDialog({ isOpen, onClose, onSubmit }: AddDirectorDialogProps) {\n  const [selectedPerson, setSelectedPerson] = useState<PersonInput | null>(null);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedPerson(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(selectedPerson!);\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedPerson(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Director\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedPerson) ?\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <NewPersonDetails\n                      person={!!selectedPerson.inputValue ? {\n                        firstGivenName: selectedPerson.inputValue,\n                        familyName: ''\n                      } : selectedPerson}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <DirectorshipDetails />\n                  </Grid>\n                </Grid>\n              :\n              <PersonPicker\n                value={selectedPerson}\n                onChange={setSelectedPerson}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedPerson} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddDirectorDialog;\n"],"sourceRoot":""}