{"version":3,"sources":["pages/accounts/Invoices.tsx"],"names":["Invoices","Fragment"],"mappings":"iJA0KeA,UAhGE,WA0Bf,OACE,cAAC,IAAMC,SAAP","file":"static/js/38.d4c2d7e9.chunk.js","sourcesContent":["\nimport React from 'react'\n// import CustomerListItem from 'types/CustomerListItem'\n// import EntityType from 'types/EntityType'\n// import { CompanyTrustee, Trust } from 'types/Trust'\n// import TrustType from 'types/TrustType'\n// import Company from 'types/Company'\n// import { Table } from 'components/table/Table'\n// import { formatAbnAcn } from 'utils/businessIdentifier'\n// import { Button } from '@material-ui/core'\n// import StyledLink from 'components/StyledLink'\n// import { MdCheckCircle } from 'react-icons/md'\n// import styled from '@emotion/styled'\n// import { formatMoney, formatPerc } from 'utils/number'\n// import isNullOrUndefined from 'utils/isNullOrUndefined'\n// import LazyDialog from 'components/LazyDialog'\n// import TradingEntity from 'types/TradingEntity'\n// import Switch from 'components/form/Switch'\n\n// const data: CustomerListItem[] = [\n//   {\n//     id: '1',\n//     tradingEntity: {\n//       businessNumber: '93 009 662 284',\n//       mainName: 'The Trustee for the Kettleman Family Trust',\n//       entityType: EntityType.Trust,\n//     },\n//     entity: {\n//       legalName: 'Kettleman Family Trust',\n//       trustType: TrustType.DiscretionaryInvestmentTrust,\n//       trustees: [\n//         {\n//           companyNumber: '005 137 851',\n//           name: 'Kettleman Pty Ltd'\n//         } as CompanyTrustee\n//       ]\n//     } as Trust,\n//     fundingLimit: 50000,\n//     insuranceLimit: 40000,\n//     concentrationPerc: 25,\n//     advanceRate: 80,\n//     noaSent: true,\n//     nominated: true,\n//     approved: true,\n//     tradingName: 'Kettleman Pty Ltd'\n//   },\n//   {\n//     id: '2',\n//     tradingEntity: {\n//       businessNumber: '61 624 709 753',\n//       mainName: 'Lalo Pty Ltd',\n//       entityType: EntityType.Company,\n//       businessNames: [\n//         'Lay Low'\n//       ]\n//     },\n//     entity: {\n//       name: 'Lalo Pty Ltd',\n//       companyNumber: '624 709 753',\n//     } as Company,\n//     noaSent: false,\n//     nominated: false,\n//     approved: false,\n//     tradingName: 'Lalo Pty Ltd'\n//   },\n//   {\n//     id: '3',\n//     noaSent: false,\n//     nominated: false,\n//     approved: false,\n//     tradingName: 'Nacho Varga'\n//   }\n// ]\n\nconst Invoices = () => {\n  // const [nominatedList, setNominatedList] = useState<string[]>(data.filter(customer => customer.nominated).map(customer => customer.id));\n  // const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // function onFindBusinessClick() {\n  //   setIsModalOpen(true);\n  // }\n\n  // const onModalClose = () => {\n  //   setIsModalOpen(false);\n  // }\n\n  // const onModalSubmit = (tradingEntity: TradingEntity) => {\n  //   setIsModalOpen(false);\n  //   // setTradingEntity(tradingEntity);\n  // }\n\n  // const onNominateChange = (customerId: string, checked: boolean) => {\n  //   if (checked) {\n  //     setNominatedList([...nominatedList, customerId]);\n  //   } else {\n  //     const index = nominatedList.indexOf(customerId);\n  //     setNominatedList((nominatedList.slice(0, index).concat(nominatedList.slice(index + 1))));\n  //   }\n  // };\n\n  return (\n    <React.Fragment>\n      Invoices\n      {/* <Table<CustomerListItem>\n        data={data}\n        paddedCells\n        columns={[\n          {\n            title: 'Customer',\n            dataIndex: 'tradingName',\n            render: (value, record) => <StyledLink to=\"/entities/companies/1\">{value}</StyledLink>\n          },\n          {\n            title: 'Business Number',\n            dataIndex: 'tradingEntity',\n            render: (value, record) => record.tradingEntity ? formatAbnAcn(record.tradingEntity.businessNumber) : <Button onClick={onFindBusinessClick} size=\"small\" variant=\"outlined\">Find Business</Button>\n          },\n          {\n            title: 'Concentration',\n            align: 'right',\n            dataIndex: 'concentrationPerc',\n            render: (value, record) => !isNullOrUndefined(value) ? formatPerc(value, 0) : ''\n          },\n          {\n            title: 'Advance Rate',\n            align: 'right',\n            dataIndex: 'advanceRate',\n            render: (value, record) => !isNullOrUndefined(value) ? formatPerc(value, 0) : ''\n          },\n          {\n            title: 'Funding Limit',\n            align: 'right',\n            dataIndex: 'fundingLimit',\n            render: (value, record) => !isNullOrUndefined(value) ? formatMoney(value) : ''\n          },\n          {\n            title: 'Insurance Limit',\n            align: 'right',\n            dataIndex: 'insuranceLimit',\n            render: (value, record) => !isNullOrUndefined(value) ? formatMoney(value) : ''\n          },\n          {\n            title: 'Nominated',\n            align: 'right',\n            dataIndex: 'nominated',\n            render: (value, record) => record.tradingEntity ?\n            <Switch\n              onChange={(_evt, checked: boolean) => onNominateChange(record.id, checked)}\n              checked={nominatedList.indexOf(record.id) > -1}\n            /> : ''\n          },\n          {\n            title: 'Approved',\n            align: 'right',\n            dataIndex: 'approved',\n            render: (value, record) => record.approved ? <CheckApprovedIcon><MdCheckCircle /></CheckApprovedIcon> : ''\n          }\n        ]}\n      /> */}\n      {/* <LazyDialog isOpen={isModalOpen}>\n        <AddTradingEntityDialog\n          isOpen={isModalOpen}\n          onClose={onModalClose}\n          onSubmit={onModalSubmit}\n        />\n      </LazyDialog> */}\n    </React.Fragment>\n  );\n}\n\nexport default Invoices;\n"],"sourceRoot":""}