{"version":3,"sources":["utils/string.ts","components/organisms/PersonPicker.tsx","components/organisms/NewPersonDetails.tsx","components/organisms/PersonFormPanel.tsx","components/organisms/AddContactDialog.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","Name","styled","span","EntityMatch","Email","Mobile","ListBoxStyles","css","TextFieldStyle","allPersonEntities","firstGivenName","familyName","email","mobile","filter","createFilterOptions","PersonPicker","onChange","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","props","state","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","inputValue","otherGivenName","evt","newValue","nameParts","substring","length","filterOptions","params","filtered","push","renderInput","InputLabelProps","InputProps","rest","autoFocus","className","shrink","placeholder","NewPersonDetails","control","useFormContext","container","spacing","alignItems","item","xs","md","name","label","PersonFormPanel","ref","person","onDirtyChange","methods","useForm","defaultValues","mode","isDirty","formState","getValues","getFormValues","React","useImperativeHandle","useEffect","Grid","forwardRef","ContentStyle","bp","sm","AddContactDialog","isOpen","onClose","onSubmit","useState","selectedPerson","setSelectedPerson","setIsDirty","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","personFormRef","useRef","reset","onModalClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogActions","Button","onClick","variant","disabled","current"],"mappings":"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","file":"static/js/29.1eb715df.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Person from 'types/Person';\nimport { noSpaces } from 'utils/string';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface PersonInput extends Person {\n  inputValue?: string;\n}\n\nconst allPersonEntities: PersonInput[] = [\n  {\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<PersonInput>();\n\ninterface PersonPickerProps {\n  value: PersonInput | null;\n  onChange: (tradingEntity: PersonInput | null) => void;\n}\n\nconst PersonPicker = ({ value, onChange }: PersonPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allPersonEntities}\n      getOptionSelected={(option: PersonInput, value: PersonInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.businessNumber === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <BusinessNumber>{formatAbnAcn(value.companyNumber)} {!!value.businessNumber && <> / {formatAbnAcn(value.businessNumber)}</>}</BusinessNumber>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.firstGivenName} {value.familyName}</Name>\n              {!!value.email && <Email>{value.email}</Email>}\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.firstGivenName}${!!option.otherGivenName ? ` ${option.otherGivenName}` : ''} ${option.familyName} ${option.mobile} ${option.email}`\n      }}\n      onChange={(evt, newValue) => {\n        if (newValue) {\n          if (newValue.inputValue) {\n            const nameParts = newValue.inputValue.split(' ');\n            onChange({\n              firstGivenName: nameParts[0],\n              familyName: newValue.inputValue.substring(nameParts[0].length + 1)\n            });\n          } else {\n            onChange(newValue);\n          }\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            familyName: '',\n            firstGivenName: `Create Person \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by name, email or mobile', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default PersonPicker;\n","import { Grid } from \"@material-ui/core\";\nimport TextField from \"components/form/TextField\";\nimport React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nexport interface NewPersonDetailsForm {\n  firstGivenName: string;\n  otherGivenName: string;\n  familyName: string;\n  mobile: string;\n  email: string;\n}\n\nfunction NewPersonDetails() {\n  const methods = useFormContext<NewPersonDetailsForm>();\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={12} md={4}>\n        <TextField\n          autoFocus\n          name=\"firstGivenName\"\n          label=\"First Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"otherGivenName\"\n          label=\"Other Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"familyName\"\n          label=\"Family Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={8}>\n        <TextField\n          name=\"email\"\n          label=\"Email\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"mobile\"\n          label=\"Mobile\"\n          control={control}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default NewPersonDetails;\n","import { Grid } from '@material-ui/core';\nimport NewPersonDetails, { NewPersonDetailsForm } from './NewPersonDetails';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Person from 'types/Person';\nimport React, { useEffect } from 'react';\n\n\nexport interface PersonFormProps {\n  person: Person;\n  onDirtyChange: (isDirty: boolean) => void;\n}\n\nexport interface PersonForm extends NewPersonDetailsForm { }\n\nexport interface PersonFormPanelRefProps {\n  getFormValues: () => PersonForm;\n}\n\nfunction PersonFormPanel({ person: { firstGivenName, otherGivenName, familyName, mobile, email }, onDirtyChange }: PersonFormProps, ref: React.Ref<PersonFormPanelRefProps>) {\n  const methods = useForm<PersonForm>({\n    defaultValues: {\n      firstGivenName,\n      otherGivenName: otherGivenName || '',\n      familyName,\n      email,\n      mobile,\n    },\n    mode: 'onChange'\n  });\n\n  const { formState: { isDirty }, getValues } = methods;\n\n  React.useImperativeHandle(ref, () => ({ getFormValues }));\n\n  function getFormValues() {\n    return getValues();\n  };\n\n  useEffect(\n    () => {\n      onDirtyChange(isDirty);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isDirty],\n  );\n\n  return (\n    <FormProvider {...methods} >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <NewPersonDetails />\n        </Grid>\n      </Grid>\n    </FormProvider>\n  )\n}\n\nexport default React.forwardRef(PersonFormPanel);\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport PersonPicker, { PersonInput } from './PersonPicker';\nimport PersonFormPanel, { PersonForm, PersonFormPanelRefProps } from './PersonFormPanel';\nimport { MdWarning } from \"react-icons/md\";\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n\nexport interface AddContactDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (personForm: PersonForm) => void;\n}\n\nfunction AddContactDialog({ isOpen, onClose, onSubmit }: AddContactDialogProps) {\n  const [selectedPerson, setSelectedPerson] = useState<PersonInput | null>(null);\n  const [isDirty, setIsDirty] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const personFormRef = React.useRef<PersonFormPanelRefProps>(null);\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedPerson(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    if (personFormRef.current) {\n      onSubmit(personFormRef.current.getFormValues())\n    };\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Contact { isDirty && <MdWarning /> }\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedPerson) ?\n              <PersonFormPanel\n                person={!!selectedPerson.inputValue ? {\n                  firstGivenName: selectedPerson.inputValue,\n                  familyName: ''\n                } : selectedPerson}\n                onDirtyChange={setIsDirty}\n                ref={personFormRef}\n              />\n              :\n              <PersonPicker\n                value={selectedPerson}\n                onChange={setSelectedPerson}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedPerson} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddContactDialog;\n"],"sourceRoot":""}