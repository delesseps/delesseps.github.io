{"version":3,"sources":["components/Card.tsx","components/PaddedContainer.tsx","components/form/TextField.tsx","../node_modules/@material-ui/core/esm/DialogActions/DialogActions.js","components/InviteDialog.tsx","components/chart/Donut.tsx","pages/account/Owners.tsx"],"names":["Title","styled","div","Head","Root","Card","children","title","ariaLabel","actionMenu","aria-label","PaddedContainer","TextFieldStyle","css","TextField","props","name","control","label","error","rules","placeholder","disabled","autoFocus","transform","render","onChange","onBlur","value","id","fullWidth","event","target","InputLabelProps","shrink","helperText","message","DialogActions","React","ref","_props$disableSpacing","disableSpacing","classes","className","other","_objectWithoutProperties","_extends","clsx","root","spacing","withStyles","display","alignItems","padding","justifyContent","flex","marginLeft","ContentStyle","Reason","p","defaultValues","EmailAddress","Phone","InviteDialog","reason","isOpen","onClose","onSubmit","methods","useForm","mode","handleSubmit","getValues","onInviteModalClose","open","aria-labelledby","aria-describedby","onClick","variant","RingClass","SegmentClass","LabelClass","Donut","width","height","viewBox","cx","cy","r","fill","strokeWidth","strokeDasharray","strokeDashoffset","y","x","textAnchor","SectionTitle","h2","Directorships","ul","Directorship","li","ChartContainer","InviteProgress","ConsentProgress","Status","Complete","Pending","SendIconClass","Owners","useState","isInviteModalOpen","setIsInviteModalOpen","inviteName","setInviteName","Grid","container","item","xs","md","sm","Button"],"mappings":"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","file":"static/js/15.64930e32.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n\n  @media (min-width: 600px) {\n    border: 2px solid #eee;\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    padding: 0;\n    border-bottom: 2px solid #eee;\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n      title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;","import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer;","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  name?: keyof T;\n  control?: Control<T>;\n  label: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    error,\n    rules,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={ control }\n      name={ name as FieldName<T> }\n      rules={ rules }\n      render={ ({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={name}\n          fullWidth\n          autoFocus={autoFocus}\n          css={TextFieldStyle}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={ (event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      ) }\n    />\n  );\n};\n\nexport default TextField;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n    flex: '0 0 auto'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogActions'\n})(DialogActions);","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@material-ui/core';\nimport TextField from 'components/form/TextField';\nimport { useForm } from 'react-hook-form';\n\nconst ContentStyle = css`\n  min-width: 350px;\n`\n\nconst Reason = styled.p`\n  margin: 0 0 20px 0;\n`\n\ninterface InviteForm {\n  EmailAddress: string;\n  Phone: string;\n}\n\nconst defaultValues: InviteForm = {\n  EmailAddress: '',\n  Phone: '',\n}\n\nexport interface InviteDialogProps {\n  isOpen: boolean;\n  name: string;\n  reason?: string;\n  onClose: () => void;\n  onSubmit: (abn: string) => void;\n}\n\nfunction InviteDialog({ name, reason, isOpen, onClose, onSubmit }: InviteDialogProps) {\n  const methods = useForm<InviteForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n    getValues,\n  } = methods;\n\n  function onInviteModalClose() {\n    onClose();\n  }\n\n  function onInviteModalOK() {\n    onSubmit(getValues('FindInvite'));\n  }\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={onInviteModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Invite {name}\n      </DialogTitle>\n      <DialogContent css={ContentStyle}>\n        {\n          reason &&\n          <Reason>{reason}</Reason>\n        }\n        <form onSubmit={handleSubmit(() => {})}>\n          <TextField\n            name=\"EmailAddress\"\n            control={control}\n            autoFocus\n            label=\"Email Address\"\n          />\n          <TextField\n            name=\"Phone\"\n            control={control}\n            label=\"Phone\"\n          />\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onInviteModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" onClick={onInviteModalOK}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default InviteDialog;","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst RingClass = css`\n  stroke: #eee;\n`;\n\nconst SegmentClass = css`\n  /* animation: donut-chart-fill 1s reverse ease-in; */\n  transform-origin: center;\n  stroke: #333;\n\n  /* @keyframes donut-chart-fill {\n    to { stroke-dasharray: 0 100; }\n  } */\n`;\n\nconst LabelClass = css`\n  font-size: 0.6em;\n  /* font-weight: 700; */\n  line-height: 1;\n  fill: #333;\n  /* transform: translateY(0.5em); */\n`;\n\n\ninterface DonutProps {\n  value: number;\n}\n\nfunction Donut({ value }: DonutProps) {\n  return (\n    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 40 40\">\n      <circle cx=\"20\" cy=\"20\" r=\"15.91549430918954\" fill=\"transparent\"></circle>\n      <circle css={RingClass} cx=\"20\" cy=\"20\" r=\"15.91549430918954\" fill=\"transparent\" strokeWidth=\"3.5\"></circle>\n      <circle css={SegmentClass} cx=\"20\" cy=\"20\" r=\"15.91549430918954\" fill=\"transparent\" strokeWidth=\"3.5\" strokeDasharray={`${value} ${(100-value)}`} strokeDashoffset=\"25\"></circle>\n      <g>\n        <text y=\"50%\" transform=\"translate(0, 2)\">\n          <tspan x=\"50%\" textAnchor=\"middle\" css={LabelClass}>{value}%</tspan>\n        </text>\n      </g>\n    </svg>\n  )\n}\n\nexport default Donut;\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Button, Grid } from '@material-ui/core';\nimport PaddedContainer from 'components/PaddedContainer';\nimport Card from 'components/Card';\nimport styled from '@emotion/styled';\nimport Donut from 'components/chart/Donut';\nimport { MdSend } from 'react-icons/md';\nimport InviteDialog from 'components/InviteDialog';\nimport React from 'react';\nimport { GoCheck, GoX } from 'react-icons/go';\n\nconst SectionTitle = styled.h2`\n  font-size: 11px;\n  color: #777;\n  font-weight: normal;\n  margin: 0 0 5px 0;\n`;\n\nconst Directorships = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst Directorship = styled.li`\n  font-size: 14px;\n  line-height: 2em;\n`;\n\nconst ChartContainer = styled.div`\n  max-width: 70px;\n`;\n\nconst InviteProgress = styled.div`\n  margin: 20px 0;\n  text-align: center;\n`;\n\nconst ConsentProgress = styled.div`\n  margin: 20px 0;\n`;\n\nconst Status = styled.div`\n  font-size: 14px;\n  line-height: 2em;\n\n  svg {\n    margin-right: 5px;\n    font-size: 26px;\n    display: inline-block;\n    vertical-align: middle;\n  }\n`;\n\nconst Complete = css`\n  /* color: #009a00; */\n`;\n\nconst Pending = css`\n  color: #e40000;\n`;\n\nconst SendIconClass = css`\n  margin-right: 5px;\n`;\n\nfunction Owners() {\n  const [isInviteModalOpen, setIsInviteModalOpen] = React.useState(false);\n  const [inviteName, setInviteName] = React.useState('');\n\n  function onInviteButtonClick() {\n    setInviteName('Saul Goodman');\n    setIsInviteModalOpen(true);\n  }\n\n  function onInviteModalClose() {\n    setInviteName('');\n    setIsInviteModalOpen(false);\n  }\n\n  function onInviteModalSubmit() {\n    setInviteName('');\n    setIsInviteModalOpen(false);\n  }\n\n  return (\n    <PaddedContainer>\n      <p>Directors and significant owners of the applicant business and are required to complete privacy consent forms for us to perform credit checks.</p>\n      <p>Please invite them in to complete the application process.</p>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <Card title=\"Walter White\">\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={8}>\n                <SectionTitle>Directorships</SectionTitle>\n                <Directorships>\n                  <Directorship>Breaking Bad Pty Ltd</Directorship>\n                  <Directorship>Its All Good Pty Ltd</Directorship>\n                </Directorships>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <SectionTitle>Ownership</SectionTitle>\n                <ChartContainer>\n                  <Donut value={40}/>\n                </ChartContainer>\n              </Grid>\n            </Grid>\n            <ConsentProgress>\n              <Status><GoCheck css={Complete} /> APositive Member</Status>\n              <Status><GoX css={Pending} /> Completed Privacy Consent Form</Status>\n            </ConsentProgress>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card title=\"Saul Goodman\">\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={8}>\n                <SectionTitle>Directorships</SectionTitle>\n                <Directorships>\n                  <Directorship>Its All Good Pty Ltd</Directorship>\n                </Directorships>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <SectionTitle>Ownership</SectionTitle>\n                <ChartContainer>\n                  <Donut value={34}/>\n                </ChartContainer>\n              </Grid>\n            </Grid>\n            <InviteProgress>\n              <Button\n                variant=\"contained\"\n                onClick={onInviteButtonClick}\n              >\n                <MdSend css={SendIconClass} /> Invite\n              </Button>\n            </InviteProgress>\n          </Card>\n        </Grid>\n      </Grid>\n      <InviteDialog\n        name={inviteName}\n        reason=\"To complete a privacy consent form\"\n        isOpen={isInviteModalOpen}\n        onClose={onInviteModalClose}\n        onSubmit={onInviteModalSubmit}\n      />\n    </PaddedContainer>\n  )\n}\n\nexport default Owners;\n"],"sourceRoot":""}