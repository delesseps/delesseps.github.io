{"version":3,"sources":["components/form/AutoCompleteField.tsx","components/form/TextField.tsx","components/form/Switch.tsx","components/form/SwitchField.tsx","utils/email.ts","components/organisms/UserPicker.tsx","components/organisms/NewAccountUserDialog.tsx"],"names":["TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","selectedValueWithLabel","find","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","undefined","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","TextField","multiline","minRows","disabled","transform","fullWidth","event","target","SwitchBaseStyles","TrackStyles","CheckedTrackStyles","Switch","classes","switchBase","track","checked","LabelStyle","SwitchField","FormControlLabel","labelPlacement","tester","Name","styled","span","UserMatch","Email","Mobile","ListBoxStyles","allUsers","email","mobile","filter","createFilterOptions","UserPicker","Autocomplete","listbox","handleHomeEndKeys","inputValue","filterOptions","params","filtered","cleanValue","noSpaces","length","test","emailParts","split","account","address","some","part","isEmail","user","push","ContentStyle","bp","xs","xlMob","SelectedUserChipLabelStyle","defaultValues","accessType","AccountAccessType","Editor","sendNotification","givenName","familyName","accountAccessTypeOptions","AccountAccessTypeLabels","entries","map","accountAccessType","NewAccountUserDialog","isOpen","onClose","onSubmit","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","useState","selectedUser","setSelectedUser","useForm","mode","watch","getValues","useEffect","reset","onModalClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Grid","container","spacing","item","Chip","onDelete","Fragment","required","DialogActions","Button","onClick","variant"],"mappings":"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","file":"static/js/28.83012891.chunk.js","sourcesContent":["import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\ninterface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        const selectedValueWithLabel = options.find(option => option?.value === value) || null;\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) =>\n              value ? option.value === value.value : false\n            }\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            // value={value}\n            value={selectedValueWithLabel}\n            onChange={(evt, newValue) =>\n              onChange(!!newValue && newValue.value ? newValue.value : undefined)\n            }\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={id || name}\n          fullWidth\n          autoFocus={autoFocus}\n          className={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","import React from 'react';\nimport MuiSwitch, { SwitchProps } from '@material-ui/core/Switch';\nimport { css } from 'emotion';\n\nconst SwitchBaseStyles = css`\n  color: #fff;\n`\n\nconst TrackStyles = css`\n  background-color: #aaa;\n`\n\nconst CheckedTrackStyles = css`\n  background-color: #555;\n`\n\nconst Switch = (props: SwitchProps) => {\n  return (\n    <MuiSwitch\n      {...props}\n      classes={{\n        switchBase: SwitchBaseStyles,\n        track: props.checked ? CheckedTrackStyles : TrackStyles,\n      }}\n    />\n  );\n};\n\nexport default Switch;\n","import React from 'react';\nimport { Control, Controller } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { css } from 'emotion';\nimport Switch from './Switch';\n\nconst LabelStyle = css`\n  .MuiFormControlLabel-label {\n    font-size: 11px;\n    color: #777;\n    line-height: 2em;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  // color?: 'primary' | 'secondary' | 'default';\n}\n\nconst SwitchField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    // color,\n    label\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      render={({ onChange, onBlur, value }) => (\n        <FormControlLabel\n          className={LabelStyle}\n          label={label}\n          labelPlacement=\"top\"\n          control={\n            <Switch\n              id={id}\n              onChange={(event) => onChange(event.target.checked)}\n              onBlur={onBlur}\n              checked={value}\n              // color={color ?? 'primary'}\n            />\n          }\n        />\n      )}\n    />\n  );\n};\n\nexport default SwitchField;\n","const tester = /^[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/;\n\nexport const isEmail = (email: string): boolean => {\n  if (!email) {\n    return false;\n  }\n\n  if (email.length > 256) {\n    return false;\n  }\n\n  if (!tester.test(email)) {\n    return false;\n  }\n\n  // Further checking of some things regex can't handle\n  var emailParts = email.split('@');\n  var account = emailParts[0];\n  var address = emailParts[1];\n  if (account.length > 64) return false;\n\n  var domainParts = address.split('.');\n  if (domainParts.some((part) => {\n    return part.length > 63;\n  })) return false;\n\n  return true;\n};\n","import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport AssignableUser from 'types/AssignableUser';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { noSpaces } from 'utils/string';\nimport { isEmail } from 'utils/email';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst UserMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst allUsers: AssignableUser[] = [\n  {\n    id: 3,\n    name: 'Kim Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    id: 2,\n    name: 'Saul Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    id: 1,\n    name: 'Walter White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<AssignableUser>();\n\ninterface UserPickerProps {\n  value: AssignableUser | null;\n  onChange: (user: AssignableUser | null) => void;\n}\n\nconst UserPicker = ({ value, onChange }: UserPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allUsers}\n      getOptionSelected={(option: AssignableUser, value: AssignableUser) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value) => (\n        <li {...props}>\n          <UserMatch>\n            <Name>{value.name}</Name>\n            {!!value.email && <Email>{value.email}</Email>}\n            {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n          </UserMatch>\n        </li>\n      )}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.name} ${option.email} ${option.mobile}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            id: 0,\n            name: newValue,\n            email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          if (isEmail(cleanValue) && !filtered.find(user => user.email === cleanValue)) {\n            filtered.push({\n              inputValue: cleanValue,\n              id: 0,\n              name: `Add \"${cleanValue}\"`,\n              email: ''\n            });\n          // } else {\n          //   filtered.push({\n          //     // inputValue: params.inputValue,\n          //     id: 0,\n          //     name: '',\n          //     email: 'Type email address to Add'\n          //   });\n          }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find or create user', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default UserPicker;\n","import {\n  Button,\n  Chip,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport AutoCompleteField from 'components/form/AutoCompleteField';\nimport SwitchField from 'components/form/SwitchField';\nimport TextField from 'components/form/TextField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { bp } from 'theme';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport AssignableUser from 'types/AssignableUser';\nimport UserPicker from './UserPicker';\n\nconst ContentStyle = css`\n  min-height: 175px;\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.xlMob} {\n    width: 400px;\n  }\n`\n\nconst SelectedUserChipLabelStyle = css`\n  font-size: 14px;\n`\n\ninterface NewAccountUserForm {\n  accessType: AccountAccessType;\n  message: string;\n  givenName: string;\n  familyName: string;\n  sendNotification: boolean;\n}\n\nconst defaultValues: NewAccountUserForm = {\n  accessType: AccountAccessType.Editor,\n  message: '',\n  sendNotification: false,\n  givenName: '',\n  familyName: '',\n}\n\nconst accountAccessTypeOptions = [...AccountAccessTypeLabels.entries()].map(([accountAccessType, label]) => \n  ({ label: label, value: accountAccessType })\n);\n\nexport interface NewAccountUserDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (accountUser: NewAccountUserForm) => void;\n}\n\nfunction NewAccountUserDialog({ isOpen, onClose, onSubmit }: NewAccountUserDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const [selectedUser, setSelectedUser] = useState<AssignableUser | null>(null);\n\n  const { control, watch, getValues } = useForm<NewAccountUserForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  const sendNotification = watch('sendNotification') === true;\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function reset() {\n    setSelectedUser(null);\n  }\n\n  function onModalOK() {\n    onSubmit(getValues());\n  }\n\n  function onSelectionRemove() {\n    setSelectedUser(null);\n  }\n  \n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        New Account User\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedUser) ?\n              <Chip\n                classes={{ label: SelectedUserChipLabelStyle }}\n                label={selectedUser.inputValue ? selectedUser.inputValue : selectedUser.name}\n                onDelete={onSelectionRemove}\n                // variant=\"outlined\"\n              />\n              :\n              <UserPicker\n                value={selectedUser}\n                onChange={setSelectedUser}\n              />\n            }\n          </Grid>\n\n          {\n            !!selectedUser &&\n            <React.Fragment>\n              {\n                !!selectedUser.inputValue &&\n                <Grid item container spacing={1}>\n                  <Grid item xs={6}>\n                    <TextField\n                      autoFocus\n                      name=\"givenName\"\n                      label=\"First Name\"\n                      control={control}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      name=\"familyName\"\n                      label=\"Family Name\"\n                      control={control}\n                    />\n                  </Grid>\n                </Grid>\n              }\n              <Grid item xs={12}>\n                <AutoCompleteField\n                  name=\"accessType\"\n                  disableClearable\n                  control={control}\n                  label=\"Access\"\n                  options={accountAccessTypeOptions}\n                  rules={ { required: 'Required' } }\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <SwitchField\n                  name=\"sendNotification\"\n                  control={control}\n                  label=\"Notify?\"\n                />\n              </Grid>\n              {\n                sendNotification &&\n                <Grid item xs={12}>\n                  <TextField\n                    autoFocus\n                    name=\"message\"\n                    control={control}\n                    multiline\n                    minRows={3}\n                    label=\"Message\"\n                  />\n              </Grid>\n              }\n            </React.Fragment>\n          }\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" onClick={onModalOK}>\n          { sendNotification ? 'Send' : 'Assign'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default NewAccountUserDialog;\n"],"sourceRoot":""}