{"version":3,"sources":["components/form/AutoCompleteField.tsx","components/form/TextField.tsx","types/JurisdictionType.ts","components/organisms/NewAccountDialog.tsx"],"names":["TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","selectedValueWithLabel","find","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","undefined","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","TextField","multiline","minRows","disabled","transform","fullWidth","event","target","JurisdictionType","JurisdictionTypeLabels","Map","AU","NZ","ContentStyle","bp","xs","xlMob","accountTypeOptions","AccountTypeLabels","entries","map","accountType","juridictionTypeOptions","jurisdictionType","defaultValues","AccountType","InvoiceFinance","jurisdiction","NewAccountDialog","isOpen","onClose","onSubmit","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","useForm","mode","getValues","onModalClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Grid","container","spacing","item","required","DialogActions","Button","onClick","variant"],"mappings":"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","file":"static/js/31.b1d305e1.chunk.js","sourcesContent":["import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\ninterface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        const selectedValueWithLabel = options.find(option => option?.value === value) || null;\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) =>\n              value ? option.value === value.value : false\n            }\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            // value={value}\n            value={selectedValueWithLabel}\n            onChange={(evt, newValue) =>\n              onChange(!!newValue && newValue.value ? newValue.value : undefined)\n            }\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={id || name}\n          fullWidth\n          autoFocus={autoFocus}\n          className={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","export enum JurisdictionType {\n  None = 0,\n  AU = 1,\n  NZ = 3,\n}\n\nexport const JurisdictionTypeLabels = new Map<JurisdictionType, string>([\n  [JurisdictionType.AU, 'Australia'],\n  [JurisdictionType.NZ, 'New Zealand'],\n]);\n\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport AutoCompleteField from 'components/form/AutoCompleteField';\nimport TextField from 'components/form/TextField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { bp } from 'theme';\nimport { AccountType, AccountTypeLabels } from 'types/AccountType';\nimport { JurisdictionType, JurisdictionTypeLabels } from 'types/JurisdictionType';\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.xlMob} {\n    min-width: 500px;\n    width: unset\n  }\n`\n\ninterface NewAccountForm {\n  name: string;\n  accountType?: AccountType;\n  jurisdiction?: JurisdictionType;\n}\n\n\nconst accountTypeOptions = [...AccountTypeLabels.entries()].map(([accountType, label]) => \n  ({ label: label, value: accountType })\n);\n\nconst juridictionTypeOptions = [...JurisdictionTypeLabels.entries()].map(([jurisdictionType, label]) => \n  ({ label: label, value: jurisdictionType })\n);\n\nconst defaultValues: NewAccountForm = {\n  name: '',\n  accountType: AccountType.InvoiceFinance,\n  jurisdiction: JurisdictionType.AU,\n}\n\n\nexport interface NewAccountDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (newAccount: NewAccountForm) => void;\n}\n\nfunction NewAccountDialog({ isOpen, onClose, onSubmit }: NewAccountDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  const { control, getValues } = useForm<NewAccountForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onSubmit(getValues());\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        New Account\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <AutoCompleteField\n              name=\"accountType\"\n              autoFocus\n              control={control}\n              label=\"Type\"\n              options={accountTypeOptions}\n              rules={ { required: 'Required' } }\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"name\"\n              control={control}\n              label=\"Name\"\n              rules={ { required: 'Required' } }\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <AutoCompleteField\n              name=\"jurisdiction\"\n              control={control}\n              label=\"Jurisdiction\"\n              options={juridictionTypeOptions}\n              rules={ { required: 'Required' } }\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" onClick={onModalOK}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default NewAccountDialog;\n"],"sourceRoot":""}