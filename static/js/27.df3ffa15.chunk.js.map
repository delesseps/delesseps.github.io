{"version":3,"sources":["types/Country.ts","components/PaddedContainer.tsx","utils/businessIdentifier.ts","utils/date.ts","client/graphql.tsx","pages/Shareholders.tsx"],"names":["Country","CountryLabels","Map","AU","NZ","PaddedContainer","styled","div","nonDigits","formatAbnAcn","value","sanitizedValue","replace","sanitizeAbnAcn","length","formatAbn","formatAcn","formatBusinessNumber","incorporationCountry","formatCompanyNumber","slice","formatDate","date","format","formatTime","UnitType","TrustType","gql","FetchShareHoldersDocument","Block","Shareholders","baseOptions","Apollo","loading","data","DelayedLoader","delay","companies","map","company","index","legalName","companyNumber","shareHolders","shareholder","shareClass","sharesHeld","__typename","person","name","givenName","familyName","dateOfBirth","Date"],"mappings":"+GAAO,IAAKA,EAAZ,oE,SAAYA,O,eAAAA,I,WAAAA,I,YAAAA,M,KAML,IAAMC,EAAgB,IAAIC,IAAqB,CACpD,CAACF,EAAQG,GAAI,aACb,CAACH,EAAQI,GAAI,iBAGAJ,O,sICTf,IAAMK,E,MAAkBC,EAAOC,IAAV,KAINF,O,iCCNf,iFAEMG,EAAY,SAKZC,EAAe,SAACC,GACpB,IAAKA,EACH,MAAO,GAET,IAAMC,EAPe,SAACD,GAAD,OACrBA,EAAQA,EAAME,QAAQJ,EAAW,IAAM,GAMhBK,CAAeH,GAEtC,OAA8B,KAA1BC,EAAeG,OACVC,EAAUJ,GAGW,IAA1BA,EAAeG,OACVE,EAAUL,GAGZD,GAGIO,EAAuB,SAACP,EAAkCQ,GAAnC,OAClCA,IAAyBlB,IAAQG,GAAKM,EAAaC,GAASA,GAEjDS,EAAsB,SAACT,EAAkCQ,GAAnC,OACjCA,IAAyBlB,IAAQG,GAAKM,EAAaC,GAASA,GAExDK,EAAY,SAACL,GACjB,MAAM,GAAN,OAAUA,EAAMU,MAAM,EAAG,GAAzB,YAA+BV,EAAMU,MAAM,EAAG,GAA9C,YAAoDV,EAAMU,MAAM,EAAG,GAAnE,YAAyEV,EAAMU,MAAM,EAAG,MAGpFJ,EAAY,SAACN,GACjB,MAAM,GAAN,OAAUA,EAAMU,MAAM,EAAG,GAAzB,YAA+BV,EAAMU,MAAM,EAAG,GAA9C,YAAoDV,EAAMU,MAAM,EAAG,M,iCCnCrE,iFAEaC,EAAa,SAACC,GACzB,OAAOA,EAAOC,YAAOD,EAAM,cAAgB,IAGhCE,EAAa,SAACF,GACzB,OAAOA,EAAOC,YAAOD,EAAM,UAAY,K,4CCwL7BG,EAoFAC,E,sgDApFAD,K,oBAAAA,E,mBAAAA,M,cAoFAC,K,8BAAAA,E,aAAAA,M,KA4fsBC,cAAH,KAqCHA,cAAH,KA8BlB,IAAMC,EAA4BD,cAAH,KAwDUA,cAAH,K,mLCj4B7C,IAAME,EAAQvB,IAAOC,IAAV,KAkDIuB,UA7Cf,WAAyB,IDm3BiBC,ECn3BlB,EDo3BTC,WAAyEJ,EAA2BG,GCn3BzGE,EADc,EACdA,QAASC,EADK,EACLA,KAIjB,OACED,EAAU,cAACE,EAAA,EAAD,CAAeC,MAAO,IAChC,cAAC/B,EAAA,EAAD,YAGM6B,GACF,cAACL,EAAD,UAEIK,EAAKG,UAAUC,KAAI,SAACC,EAASC,GAAV,OACjB,eAACX,EAAD,WACGU,EAAQE,UADX,KACwBtB,YAAoBoB,EAAQG,cAAe1C,IAAQG,IAD3E,MAGOoC,EAAQI,cAAgBJ,EAAQI,aAAa7B,QAChD,cAACe,EAAD,UAEIU,EAAQI,aAAaL,KAAI,SAACM,EAAaJ,GAAd,OACvB,eAACX,EAAD,WACGe,EAAYC,WADf,IAC4BD,EAAYE,WAET,uBAA3BF,EAAYG,YACZ,eAAClB,EAAD,WAAQe,EAAYL,QAAQG,cAA5B,IAA4CE,EAAYL,QAAQE,aAGrC,sBAA3BG,EAAYG,YACZ,eAAClB,EAAD,WAAQe,EAAYI,OAAOC,KAAKC,UAAhC,IAA4CN,EAAYI,OAAOC,KAAKE,WAApE,MAAmFP,EAAYI,OAAOI,aAAe/B,YAAW,IAAIgC,KAAKT,EAAYI,OAAOI,cAA5J,SARQZ,UAPVA","file":"static/js/27.df3ffa15.chunk.js","sourcesContent":["export enum Country {\n  None = 0,\n  AU = 1,\n  NZ = 3,\n}\n\nexport const CountryLabels = new Map<Country, string>([\n  [Country.AU, 'Australia'],\n  [Country.NZ, 'New Zealand'],\n]);\n\nexport default Country;\n","import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","import { Country } from \"types/Country\";\n\nconst nonDigits = /[^\\d]/g;\n\nconst sanitizeAbnAcn = (value: string | null | undefined): string =>\n  value ? value.replace(nonDigits, '') : '';\n\nconst formatAbnAcn = (value: string | null | undefined): string => {\n  if (!value) {\n    return '';\n  }\n  const sanitizedValue = sanitizeAbnAcn(value);\n\n  if (sanitizedValue.length === 11) {\n    return formatAbn(sanitizedValue);\n  }\n\n  if (sanitizedValue.length === 9) {\n    return formatAcn(sanitizedValue);\n  }\n\n  return value;\n};\n\nexport const formatBusinessNumber = (value: string | null | undefined, incorporationCountry: Country | undefined) =>\n  incorporationCountry === Country.AU ? formatAbnAcn(value) : value;\n\nexport const formatCompanyNumber = (value: string | null | undefined, incorporationCountry: Country | undefined) =>\n  incorporationCountry === Country.AU ? formatAbnAcn(value) : value;\n\nconst formatAbn = (value: string): string => {\n  return `${value.slice(0, 2)} ${value.slice(2, 5)} ${value.slice(5, 8)} ${value.slice(8, 11)}`;\n};\n\nconst formatAcn = (value: string): string => {\n  return `${value.slice(0, 3)} ${value.slice(3, 6)} ${value.slice(6, 9)}`;\n};","import { format } from \"date-fns\";\n\nexport const formatDate = (date: Date | undefined | null): string => {\n  return date ? format(date, 'd MMM yyyy') : '';\n}\n\nexport const formatTime = (date: Date | undefined): string => {\n  return date ? format(date, 'h:mm a') : '';\n}\n","/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */\n/* eslint-disable @typescript-eslint/ban-types,no-duplicate-imports */\nimport { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `DateTime` scalar represents an ISO-8601 compliant date time type. */\n  DateTime: string;\n};\n\nexport type Query = {\n  __typename: 'Query';\n  ping?: Maybe<Scalars['String']>;\n  partnerships?: Maybe<Array<Partnership>>;\n  companies: Array<Company>;\n  trusts?: Maybe<Array<Trust>>;\n};\n\nexport type Mutation = {\n  __typename: 'Mutation';\n  addNewPartnership: Partnership;\n  addNewCompany: AddNewCompanyPayload;\n  addCompanyShareHolders: AddCompanyShareHoldersPayload;\n  addPersonShareHolders: AddPersonShareHoldersPayload;\n  addNewTrust: Trust;\n  addNewPerson: AddNewPersonPayload;\n};\n\n\nexport type MutationAddNewPartnershipArgs = {\n  input: AddNewPartnershipInput;\n};\n\n\nexport type MutationAddNewCompanyArgs = {\n  newCompany: AddNewCompanyInput;\n};\n\n\nexport type MutationAddCompanyShareHoldersArgs = {\n  newCompanyShareHolders: AddCompanyShareHoldersInput;\n};\n\n\nexport type MutationAddPersonShareHoldersArgs = {\n  newPersonShareHolders: AddPersonShareHoldersInput;\n};\n\n\nexport type MutationAddNewTrustArgs = {\n  input: AddNewTrustInput;\n};\n\n\nexport type MutationAddNewPersonArgs = {\n  newPerson: AddNewPersonInput;\n};\n\nexport type CompanyPartner = IPartner & {\n  __typename: 'CompanyPartner';\n  company: Company;\n  ignored: Scalars['Boolean'];\n  companyId: Scalars['ID'];\n};\n\nexport type PersonPartner = IPartner & {\n  __typename: 'PersonPartner';\n  person: Person;\n  ignored: Scalars['Boolean'];\n  personId: Scalars['ID'];\n};\n\nexport type CompanyTrusteePartner = IPartner & {\n  __typename: 'CompanyTrusteePartner';\n  company: Company;\n  trust: Trust;\n  ignored: Scalars['Boolean'];\n  companyId: Scalars['ID'];\n  trustId: Scalars['ID'];\n};\n\nexport type PersonTrusteePartner = IPartner & {\n  __typename: 'PersonTrusteePartner';\n  person: Person;\n  trust: Trust;\n  ignored: Scalars['Boolean'];\n  personId: Scalars['ID'];\n  trustId: Scalars['ID'];\n};\n\nexport type CompanyShareHolder = IShareHolder & {\n  __typename: 'CompanyShareHolder';\n  company: Company;\n  companyId: Scalars['ID'];\n  shareClass: Scalars['String'];\n  sharesHeld: Scalars['Int'];\n  isBeneficiallyHeld: Scalars['Boolean'];\n  isJointHolding: Scalars['Boolean'];\n  isFullyPaid: Scalars['Boolean'];\n};\n\nexport type PersonShareHolder = IShareHolder & {\n  __typename: 'PersonShareHolder';\n  person: Person;\n  personId: Scalars['ID'];\n  shareClass: Scalars['String'];\n  sharesHeld: Scalars['Int'];\n  isBeneficiallyHeld: Scalars['Boolean'];\n  isJointHolding: Scalars['Boolean'];\n  isFullyPaid: Scalars['Boolean'];\n};\n\nexport type CompanyTrustee = ITrustee & {\n  __typename: 'CompanyTrustee';\n  company: Company;\n  ignored: Scalars['Boolean'];\n  companyId: Scalars['ID'];\n};\n\nexport type PersonTrustee = ITrustee & {\n  __typename: 'PersonTrustee';\n  person: Person;\n  ignored: Scalars['Boolean'];\n  personId: Scalars['ID'];\n};\n\nexport type CompanyUnitHolder = {\n  __typename: 'CompanyUnitHolder';\n  company: Company;\n  companyId: Scalars['ID'];\n  unitsHeld: Scalars['Int'];\n  unitType: UnitType;\n};\n\nexport type PersonUnitHolder = {\n  __typename: 'PersonUnitHolder';\n  person: Person;\n  personId: Scalars['ID'];\n  unitsHeld: Scalars['Int'];\n  unitType: UnitType;\n};\n\nexport type CompanySettlor = {\n  __typename: 'CompanySettlor';\n  company: Company;\n  ignored: Scalars['Boolean'];\n  companyId: Scalars['ID'];\n};\n\nexport type PersonSettlor = {\n  __typename: 'PersonSettlor';\n  person: Person;\n  ignored: Scalars['Boolean'];\n  personId: Scalars['ID'];\n};\n\nexport type Company = {\n  __typename: 'Company';\n  shareHolders?: Maybe<Array<IShareHolder>>;\n  companyId: Scalars['ID'];\n  eTag: Scalars['String'];\n  companyNumber: Scalars['String'];\n  legalName: Scalars['String'];\n};\n\nexport type Person = {\n  __typename: 'Person';\n  personId: Scalars['ID'];\n  eTag: Scalars['String'];\n  name: PersonName;\n  dateOfBirth?: Maybe<Scalars['DateTime']>;\n};\n\nexport type Trust = {\n  __typename: 'Trust';\n  trustees?: Maybe<Array<ITrustee>>;\n  trustId: Scalars['ID'];\n  eTag: Scalars['String'];\n  name: Scalars['String'];\n  trustType: TrustType;\n};\n\nexport enum UnitType {\n  Founding = 'FOUNDING',\n  Current = 'CURRENT'\n}\n\nexport type Partnership = {\n  __typename: 'Partnership';\n  partners?: Maybe<Array<IPartner>>;\n  partnershipId: Scalars['ID'];\n  eTag: Scalars['String'];\n  name: Scalars['String'];\n  agreementAttachmentId: Scalars['ID'];\n};\n\nexport type AddNewPartnershipInput = {\n  name: Scalars['String'];\n  agreementAttachmentId: Scalars['ID'];\n};\n\nexport type AddNewCompanyPayload = {\n  __typename: 'AddNewCompanyPayload';\n  company: Company;\n};\n\nexport type AddCompanyShareHoldersPayload = {\n  __typename: 'AddCompanyShareHoldersPayload';\n  company: Company;\n};\n\nexport type AddPersonShareHoldersPayload = {\n  __typename: 'AddPersonShareHoldersPayload';\n  company: Company;\n};\n\nexport type AddNewCompanyInput = {\n  companyNumber: Scalars['String'];\n  legalName: Scalars['String'];\n};\n\nexport type AddCompanyShareHoldersInput = {\n  companyId: Scalars['ID'];\n  shareHolders: Array<CompanyShareHolderInput>;\n};\n\nexport type AddPersonShareHoldersInput = {\n  companyId: Scalars['ID'];\n  shareHolders: Array<PersonShareHolderInput>;\n};\n\nexport type AddNewTrustInput = {\n  name: Scalars['String'];\n  trustType: TrustType;\n};\n\nexport type AddNewPersonPayload = {\n  __typename: 'AddNewPersonPayload';\n  person: Person;\n};\n\nexport type AddNewPersonInput = {\n  name: PersonNameInput;\n  dateOfBirth?: Maybe<Scalars['DateTime']>;\n};\n\nexport type IShareHolder = {\n  shareClass: Scalars['String'];\n  sharesHeld: Scalars['Int'];\n  isBeneficiallyHeld: Scalars['Boolean'];\n  isJointHolding: Scalars['Boolean'];\n  isFullyPaid: Scalars['Boolean'];\n};\n\nexport type PersonName = {\n  __typename: 'PersonName';\n  givenName: Scalars['String'];\n  middleNames?: Maybe<Scalars['String']>;\n  familyName: Scalars['String'];\n};\n\n\nexport type ITrustee = {\n  ignored: Scalars['Boolean'];\n};\n\nexport enum TrustType {\n  Discretionary = 'DISCRETIONARY',\n  Unit = 'UNIT'\n}\n\nexport type IPartner = {\n  ignored: Scalars['Boolean'];\n};\n\nexport type CompanyShareHolderInput = {\n  companyId: Scalars['ID'];\n  shares: ShareHolderInput;\n};\n\nexport type PersonShareHolderInput = {\n  personId: Scalars['ID'];\n  shares: ShareHolderInput;\n};\n\nexport type PersonNameInput = {\n  givenName: Scalars['String'];\n  middleNames?: Maybe<Scalars['String']>;\n  familyName: Scalars['String'];\n};\n\nexport type ShareHolderInput = {\n  shareClass: Scalars['String'];\n  sharesHeld: Scalars['Int'];\n  isBeneficiallyHeld?: Maybe<Scalars['Boolean']>;\n  isJointHolding?: Maybe<Scalars['Boolean']>;\n  isFullyPaid?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AddCompanyMutationVariables = Exact<{\n  companyNumber: Scalars['String'];\n  legalName?: Scalars['String'];\n}>;\n\n\nexport type AddCompanyMutation = (\n  { __typename: 'Mutation' }\n  & { addNewCompany: (\n    { __typename: 'AddNewCompanyPayload' }\n    & { company: (\n      { __typename: 'Company' }\n      & Pick<Company, 'companyId'>\n    ) }\n  ) }\n);\n\nexport type PingQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PingQuery = (\n  { __typename: 'Query' }\n  & Pick<Query, 'ping'>\n);\n\nexport type FetchShareHoldersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type FetchShareHoldersQuery = (\n  { __typename: 'Query' }\n  & { companies: Array<(\n    { __typename: 'Company' }\n    & Pick<Company, 'eTag' | 'legalName' | 'companyNumber'>\n    & { shareHolders?: Maybe<Array<(\n      { __typename: 'CompanyShareHolder' }\n      & Pick<CompanyShareHolder, 'shareClass' | 'sharesHeld'>\n      & { company: (\n        { __typename: 'Company' }\n        & Pick<Company, 'eTag' | 'companyNumber' | 'legalName'>\n      ) }\n    ) | (\n      { __typename: 'PersonShareHolder' }\n      & Pick<PersonShareHolder, 'shareClass' | 'sharesHeld'>\n      & { person: (\n        { __typename: 'Person' }\n        & Pick<Person, 'eTag' | 'dateOfBirth'>\n        & { name: (\n          { __typename: 'PersonName' }\n          & Pick<PersonName, 'givenName' | 'familyName' | 'middleNames'>\n        ) }\n      ) }\n    )>> }\n  )> }\n);\n\nexport type Add_Person_Share_HoldersMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type Add_Person_Share_HoldersMutation = (\n  { __typename: 'Mutation' }\n  & { addPersonShareHolders: (\n    { __typename: 'AddPersonShareHoldersPayload' }\n    & { company: (\n      { __typename: 'Company' }\n      & Pick<Company, 'companyNumber'>\n    ) }\n  ) }\n);\n\nexport type WithIndex<TObject> = TObject & Record<string, any>;\nexport type ResolversObject<TObject> = WithIndex<TObject>;\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = ResolversObject<{\n  Query: ResolverTypeWrapper<{}>;\n  String: ResolverTypeWrapper<Scalars['String']>;\n  Mutation: ResolverTypeWrapper<{}>;\n  CompanyPartner: ResolverTypeWrapper<CompanyPartner>;\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\n  ID: ResolverTypeWrapper<Scalars['ID']>;\n  PersonPartner: ResolverTypeWrapper<PersonPartner>;\n  CompanyTrusteePartner: ResolverTypeWrapper<CompanyTrusteePartner>;\n  PersonTrusteePartner: ResolverTypeWrapper<PersonTrusteePartner>;\n  CompanyShareHolder: ResolverTypeWrapper<CompanyShareHolder>;\n  Int: ResolverTypeWrapper<Scalars['Int']>;\n  PersonShareHolder: ResolverTypeWrapper<PersonShareHolder>;\n  CompanyTrustee: ResolverTypeWrapper<CompanyTrustee>;\n  PersonTrustee: ResolverTypeWrapper<PersonTrustee>;\n  CompanyUnitHolder: ResolverTypeWrapper<CompanyUnitHolder>;\n  PersonUnitHolder: ResolverTypeWrapper<PersonUnitHolder>;\n  CompanySettlor: ResolverTypeWrapper<CompanySettlor>;\n  PersonSettlor: ResolverTypeWrapper<PersonSettlor>;\n  Company: ResolverTypeWrapper<Company>;\n  Person: ResolverTypeWrapper<Person>;\n  Trust: ResolverTypeWrapper<Trust>;\n  UnitType: UnitType;\n  Partnership: ResolverTypeWrapper<Partnership>;\n  AddNewPartnershipInput: AddNewPartnershipInput;\n  AddNewCompanyPayload: ResolverTypeWrapper<AddNewCompanyPayload>;\n  AddCompanyShareHoldersPayload: ResolverTypeWrapper<AddCompanyShareHoldersPayload>;\n  AddPersonShareHoldersPayload: ResolverTypeWrapper<AddPersonShareHoldersPayload>;\n  AddNewCompanyInput: AddNewCompanyInput;\n  AddCompanyShareHoldersInput: AddCompanyShareHoldersInput;\n  AddPersonShareHoldersInput: AddPersonShareHoldersInput;\n  AddNewTrustInput: AddNewTrustInput;\n  AddNewPersonPayload: ResolverTypeWrapper<AddNewPersonPayload>;\n  AddNewPersonInput: AddNewPersonInput;\n  IShareHolder: ResolversTypes['CompanyShareHolder'] | ResolversTypes['PersonShareHolder'];\n  PersonName: ResolverTypeWrapper<PersonName>;\n  DateTime: ResolverTypeWrapper<Scalars['DateTime']>;\n  ITrustee: ResolversTypes['CompanyTrustee'] | ResolversTypes['PersonTrustee'];\n  TrustType: TrustType;\n  IPartner: ResolversTypes['CompanyPartner'] | ResolversTypes['PersonPartner'] | ResolversTypes['CompanyTrusteePartner'] | ResolversTypes['PersonTrusteePartner'];\n  CompanyShareHolderInput: CompanyShareHolderInput;\n  PersonShareHolderInput: PersonShareHolderInput;\n  PersonNameInput: PersonNameInput;\n  ShareHolderInput: ShareHolderInput;\n}>;\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = ResolversObject<{\n  Query: {};\n  String: Scalars['String'];\n  Mutation: {};\n  CompanyPartner: CompanyPartner;\n  Boolean: Scalars['Boolean'];\n  ID: Scalars['ID'];\n  PersonPartner: PersonPartner;\n  CompanyTrusteePartner: CompanyTrusteePartner;\n  PersonTrusteePartner: PersonTrusteePartner;\n  CompanyShareHolder: CompanyShareHolder;\n  Int: Scalars['Int'];\n  PersonShareHolder: PersonShareHolder;\n  CompanyTrustee: CompanyTrustee;\n  PersonTrustee: PersonTrustee;\n  CompanyUnitHolder: CompanyUnitHolder;\n  PersonUnitHolder: PersonUnitHolder;\n  CompanySettlor: CompanySettlor;\n  PersonSettlor: PersonSettlor;\n  Company: Company;\n  Person: Person;\n  Trust: Trust;\n  Partnership: Partnership;\n  AddNewPartnershipInput: AddNewPartnershipInput;\n  AddNewCompanyPayload: AddNewCompanyPayload;\n  AddCompanyShareHoldersPayload: AddCompanyShareHoldersPayload;\n  AddPersonShareHoldersPayload: AddPersonShareHoldersPayload;\n  AddNewCompanyInput: AddNewCompanyInput;\n  AddCompanyShareHoldersInput: AddCompanyShareHoldersInput;\n  AddPersonShareHoldersInput: AddPersonShareHoldersInput;\n  AddNewTrustInput: AddNewTrustInput;\n  AddNewPersonPayload: AddNewPersonPayload;\n  AddNewPersonInput: AddNewPersonInput;\n  IShareHolder: ResolversParentTypes['CompanyShareHolder'] | ResolversParentTypes['PersonShareHolder'];\n  PersonName: PersonName;\n  DateTime: Scalars['DateTime'];\n  ITrustee: ResolversParentTypes['CompanyTrustee'] | ResolversParentTypes['PersonTrustee'];\n  IPartner: ResolversParentTypes['CompanyPartner'] | ResolversParentTypes['PersonPartner'] | ResolversParentTypes['CompanyTrusteePartner'] | ResolversParentTypes['PersonTrusteePartner'];\n  CompanyShareHolderInput: CompanyShareHolderInput;\n  PersonShareHolderInput: PersonShareHolderInput;\n  PersonNameInput: PersonNameInput;\n  ShareHolderInput: ShareHolderInput;\n}>;\n\nexport type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{\n  ping?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  partnerships?: Resolver<Maybe<Array<ResolversTypes['Partnership']>>, ParentType, ContextType>;\n  companies?: Resolver<Array<ResolversTypes['Company']>, ParentType, ContextType>;\n  trusts?: Resolver<Maybe<Array<ResolversTypes['Trust']>>, ParentType, ContextType>;\n}>;\n\nexport type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{\n  addNewPartnership?: Resolver<ResolversTypes['Partnership'], ParentType, ContextType, RequireFields<MutationAddNewPartnershipArgs, 'input'>>;\n  addNewCompany?: Resolver<ResolversTypes['AddNewCompanyPayload'], ParentType, ContextType, RequireFields<MutationAddNewCompanyArgs, 'newCompany'>>;\n  addCompanyShareHolders?: Resolver<ResolversTypes['AddCompanyShareHoldersPayload'], ParentType, ContextType, RequireFields<MutationAddCompanyShareHoldersArgs, 'newCompanyShareHolders'>>;\n  addPersonShareHolders?: Resolver<ResolversTypes['AddPersonShareHoldersPayload'], ParentType, ContextType, RequireFields<MutationAddPersonShareHoldersArgs, 'newPersonShareHolders'>>;\n  addNewTrust?: Resolver<ResolversTypes['Trust'], ParentType, ContextType, RequireFields<MutationAddNewTrustArgs, 'input'>>;\n  addNewPerson?: Resolver<ResolversTypes['AddNewPersonPayload'], ParentType, ContextType, RequireFields<MutationAddNewPersonArgs, 'newPerson'>>;\n}>;\n\nexport type CompanyPartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanyPartner'] = ResolversParentTypes['CompanyPartner']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonPartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonPartner'] = ResolversParentTypes['PersonPartner']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanyTrusteePartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanyTrusteePartner'] = ResolversParentTypes['CompanyTrusteePartner']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  trust?: Resolver<ResolversTypes['Trust'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  trustId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonTrusteePartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonTrusteePartner'] = ResolversParentTypes['PersonTrusteePartner']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  trust?: Resolver<ResolversTypes['Trust'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  trustId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanyShareHolderResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanyShareHolder'] = ResolversParentTypes['CompanyShareHolder']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  shareClass?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  sharesHeld?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  isBeneficiallyHeld?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isJointHolding?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isFullyPaid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonShareHolderResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonShareHolder'] = ResolversParentTypes['PersonShareHolder']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  shareClass?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  sharesHeld?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  isBeneficiallyHeld?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isJointHolding?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isFullyPaid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanyTrusteeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanyTrustee'] = ResolversParentTypes['CompanyTrustee']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonTrusteeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonTrustee'] = ResolversParentTypes['PersonTrustee']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanyUnitHolderResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanyUnitHolder'] = ResolversParentTypes['CompanyUnitHolder']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  unitsHeld?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  unitType?: Resolver<ResolversTypes['UnitType'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonUnitHolderResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonUnitHolder'] = ResolversParentTypes['PersonUnitHolder']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  unitsHeld?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  unitType?: Resolver<ResolversTypes['UnitType'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanySettlorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CompanySettlor'] = ResolversParentTypes['CompanySettlor']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonSettlorResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonSettlor'] = ResolversParentTypes['PersonSettlor']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type CompanyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Company'] = ResolversParentTypes['Company']> = ResolversObject<{\n  shareHolders?: Resolver<Maybe<Array<ResolversTypes['IShareHolder']>>, ParentType, ContextType>;\n  companyId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  eTag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  companyNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  legalName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonResolvers<ContextType = any, ParentType extends ResolversParentTypes['Person'] = ResolversParentTypes['Person']> = ResolversObject<{\n  personId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  eTag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['PersonName'], ParentType, ContextType>;\n  dateOfBirth?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type TrustResolvers<ContextType = any, ParentType extends ResolversParentTypes['Trust'] = ResolversParentTypes['Trust']> = ResolversObject<{\n  trustees?: Resolver<Maybe<Array<ResolversTypes['ITrustee']>>, ParentType, ContextType>;\n  trustId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  eTag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  trustType?: Resolver<ResolversTypes['TrustType'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PartnershipResolvers<ContextType = any, ParentType extends ResolversParentTypes['Partnership'] = ResolversParentTypes['Partnership']> = ResolversObject<{\n  partners?: Resolver<Maybe<Array<ResolversTypes['IPartner']>>, ParentType, ContextType>;\n  partnershipId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  eTag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  agreementAttachmentId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type AddNewCompanyPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddNewCompanyPayload'] = ResolversParentTypes['AddNewCompanyPayload']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type AddCompanyShareHoldersPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddCompanyShareHoldersPayload'] = ResolversParentTypes['AddCompanyShareHoldersPayload']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type AddPersonShareHoldersPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddPersonShareHoldersPayload'] = ResolversParentTypes['AddPersonShareHoldersPayload']> = ResolversObject<{\n  company?: Resolver<ResolversTypes['Company'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type AddNewPersonPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['AddNewPersonPayload'] = ResolversParentTypes['AddNewPersonPayload']> = ResolversObject<{\n  person?: Resolver<ResolversTypes['Person'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type IShareHolderResolvers<ContextType = any, ParentType extends ResolversParentTypes['IShareHolder'] = ResolversParentTypes['IShareHolder']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'CompanyShareHolder' | 'PersonShareHolder', ParentType, ContextType>;\n  shareClass?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  sharesHeld?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  isBeneficiallyHeld?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isJointHolding?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  isFullyPaid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n}>;\n\nexport type PersonNameResolvers<ContextType = any, ParentType extends ResolversParentTypes['PersonName'] = ResolversParentTypes['PersonName']> = ResolversObject<{\n  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  middleNames?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {\n  name: 'DateTime';\n}\n\nexport type ITrusteeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ITrustee'] = ResolversParentTypes['ITrustee']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'CompanyTrustee' | 'PersonTrustee', ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n}>;\n\nexport type IPartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['IPartner'] = ResolversParentTypes['IPartner']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'CompanyPartner' | 'PersonPartner' | 'CompanyTrusteePartner' | 'PersonTrusteePartner', ParentType, ContextType>;\n  ignored?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n}>;\n\nexport type Resolvers<ContextType = any> = ResolversObject<{\n  Query?: QueryResolvers<ContextType>;\n  Mutation?: MutationResolvers<ContextType>;\n  CompanyPartner?: CompanyPartnerResolvers<ContextType>;\n  PersonPartner?: PersonPartnerResolvers<ContextType>;\n  CompanyTrusteePartner?: CompanyTrusteePartnerResolvers<ContextType>;\n  PersonTrusteePartner?: PersonTrusteePartnerResolvers<ContextType>;\n  CompanyShareHolder?: CompanyShareHolderResolvers<ContextType>;\n  PersonShareHolder?: PersonShareHolderResolvers<ContextType>;\n  CompanyTrustee?: CompanyTrusteeResolvers<ContextType>;\n  PersonTrustee?: PersonTrusteeResolvers<ContextType>;\n  CompanyUnitHolder?: CompanyUnitHolderResolvers<ContextType>;\n  PersonUnitHolder?: PersonUnitHolderResolvers<ContextType>;\n  CompanySettlor?: CompanySettlorResolvers<ContextType>;\n  PersonSettlor?: PersonSettlorResolvers<ContextType>;\n  Company?: CompanyResolvers<ContextType>;\n  Person?: PersonResolvers<ContextType>;\n  Trust?: TrustResolvers<ContextType>;\n  Partnership?: PartnershipResolvers<ContextType>;\n  AddNewCompanyPayload?: AddNewCompanyPayloadResolvers<ContextType>;\n  AddCompanyShareHoldersPayload?: AddCompanyShareHoldersPayloadResolvers<ContextType>;\n  AddPersonShareHoldersPayload?: AddPersonShareHoldersPayloadResolvers<ContextType>;\n  AddNewPersonPayload?: AddNewPersonPayloadResolvers<ContextType>;\n  IShareHolder?: IShareHolderResolvers<ContextType>;\n  PersonName?: PersonNameResolvers<ContextType>;\n  DateTime?: GraphQLScalarType;\n  ITrustee?: ITrusteeResolvers<ContextType>;\n  IPartner?: IPartnerResolvers<ContextType>;\n}>;\n\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<ContextType = any> = Resolvers<ContextType>;\n\n\nexport const AddCompanyDocument = gql`\n    mutation addCompany($companyNumber: String!, $legalName: String! = \"LEGAL\") {\n  addNewCompany(\n    newCompany: {companyNumber: $companyNumber, legalName: $legalName}\n  ) {\n    company {\n      companyId\n    }\n  }\n}\n    `;\nexport type AddCompanyMutationFn = Apollo.MutationFunction<AddCompanyMutation, AddCompanyMutationVariables>;\n\n/**\n * __useAddCompanyMutation__\n *\n * To run a mutation, you first call `useAddCompanyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCompanyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCompanyMutation, { data, loading, error }] = useAddCompanyMutation({\n *   variables: {\n *      companyNumber: // value for 'companyNumber'\n *      legalName: // value for 'legalName'\n *   },\n * });\n */\nexport function useAddCompanyMutation(baseOptions?: Apollo.MutationHookOptions<AddCompanyMutation, AddCompanyMutationVariables>) {\n        return Apollo.useMutation<AddCompanyMutation, AddCompanyMutationVariables>(AddCompanyDocument, baseOptions);\n      }\nexport type AddCompanyMutationHookResult = ReturnType<typeof useAddCompanyMutation>;\nexport type AddCompanyMutationResult = Apollo.MutationResult<AddCompanyMutation>;\nexport type AddCompanyMutationOptions = Apollo.BaseMutationOptions<AddCompanyMutation, AddCompanyMutationVariables>;\nexport const PingDocument = gql`\n    query Ping {\n  ping\n}\n    `;\n\n/**\n * __usePingQuery__\n *\n * To run a query within a React component, call `usePingQuery` and pass it any options that fit your needs.\n * When your component renders, `usePingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePingQuery(baseOptions?: Apollo.QueryHookOptions<PingQuery, PingQueryVariables>) {\n        return Apollo.useQuery<PingQuery, PingQueryVariables>(PingDocument, baseOptions);\n      }\nexport function usePingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PingQuery, PingQueryVariables>) {\n          return Apollo.useLazyQuery<PingQuery, PingQueryVariables>(PingDocument, baseOptions);\n        }\nexport type PingQueryHookResult = ReturnType<typeof usePingQuery>;\nexport type PingLazyQueryHookResult = ReturnType<typeof usePingLazyQuery>;\nexport type PingQueryResult = Apollo.QueryResult<PingQuery, PingQueryVariables>;\nexport const FetchShareHoldersDocument = gql`\n    query fetchShareHolders {\n  companies {\n    eTag\n    legalName\n    companyNumber\n    shareHolders {\n      shareClass\n      sharesHeld\n      ... on CompanyShareHolder {\n        company {\n          eTag\n          companyNumber\n          legalName\n        }\n      }\n      ... on PersonShareHolder {\n        person {\n          eTag\n          dateOfBirth\n          name {\n            givenName\n            familyName\n            middleNames\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useFetchShareHoldersQuery__\n *\n * To run a query within a React component, call `useFetchShareHoldersQuery` and pass it any options that fit your needs.\n * When your component renders, `useFetchShareHoldersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFetchShareHoldersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFetchShareHoldersQuery(baseOptions?: Apollo.QueryHookOptions<FetchShareHoldersQuery, FetchShareHoldersQueryVariables>) {\n        return Apollo.useQuery<FetchShareHoldersQuery, FetchShareHoldersQueryVariables>(FetchShareHoldersDocument, baseOptions);\n      }\nexport function useFetchShareHoldersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchShareHoldersQuery, FetchShareHoldersQueryVariables>) {\n          return Apollo.useLazyQuery<FetchShareHoldersQuery, FetchShareHoldersQueryVariables>(FetchShareHoldersDocument, baseOptions);\n        }\nexport type FetchShareHoldersQueryHookResult = ReturnType<typeof useFetchShareHoldersQuery>;\nexport type FetchShareHoldersLazyQueryHookResult = ReturnType<typeof useFetchShareHoldersLazyQuery>;\nexport type FetchShareHoldersQueryResult = Apollo.QueryResult<FetchShareHoldersQuery, FetchShareHoldersQueryVariables>;\nexport const Add_Person_Share_HoldersDocument = gql`\n    mutation add_person_share_holders {\n  addPersonShareHolders(\n    newPersonShareHolders: {companyId: 722889, shareHolders: [{personId: 4, shares: {shareClass: \"A\", sharesHeld: 45, isBeneficiallyHeld: true, isFullyPaid: true, isJointHolding: false}}, {personId: 3, shares: {shareClass: \"B\", sharesHeld: 87, isBeneficiallyHeld: true, isFullyPaid: true, isJointHolding: false}}]}\n  ) {\n    company {\n      companyNumber\n    }\n  }\n}\n    `;\nexport type Add_Person_Share_HoldersMutationFn = Apollo.MutationFunction<Add_Person_Share_HoldersMutation, Add_Person_Share_HoldersMutationVariables>;\n\n/**\n * __useAdd_Person_Share_HoldersMutation__\n *\n * To run a mutation, you first call `useAdd_Person_Share_HoldersMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdd_Person_Share_HoldersMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPersonShareHoldersMutation, { data, loading, error }] = useAdd_Person_Share_HoldersMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useAdd_Person_Share_HoldersMutation(baseOptions?: Apollo.MutationHookOptions<Add_Person_Share_HoldersMutation, Add_Person_Share_HoldersMutationVariables>) {\n        return Apollo.useMutation<Add_Person_Share_HoldersMutation, Add_Person_Share_HoldersMutationVariables>(Add_Person_Share_HoldersDocument, baseOptions);\n      }\nexport type Add_Person_Share_HoldersMutationHookResult = ReturnType<typeof useAdd_Person_Share_HoldersMutation>;\nexport type Add_Person_Share_HoldersMutationResult = Apollo.MutationResult<Add_Person_Share_HoldersMutation>;\nexport type Add_Person_Share_HoldersMutationOptions = Apollo.BaseMutationOptions<Add_Person_Share_HoldersMutation, Add_Person_Share_HoldersMutationVariables>;","import { useFetchShareHoldersQuery } from 'client/graphql';\nimport PaddedContainer from 'components/PaddedContainer';\nimport React from 'react'\nimport DelayedLoader from 'components/DelayedLoader';\nimport styled from '@emotion/styled';\nimport { formatDate } from 'utils/date';\nimport { formatCompanyNumber } from 'utils/businessIdentifier';\nimport { Country } from 'types/Country';\n\nconst Block = styled.div`\n  padding: 5px;\n  border: 1px solid #ccc;\n`\n\nfunction Shareholders() {\n  const { loading, data } = useFetchShareHoldersQuery();\n  // const { errors,  } = useAdd_Person_Share_HoldersMutation();\n  // const { loading, data } = useAddCompanyMutation({ variables: { companyNumber: '', legalName: ''} })\n\n  return (\n    loading ? <DelayedLoader delay={0} /> :\n    <PaddedContainer>\n      {\n        // error ? \n        !!data &&\n        <Block>\n          {\n            data.companies.map((company, index) => \n              <Block key={index}>\n                {company.legalName} ({formatCompanyNumber(company.companyNumber, Country.AU)})\n                {\n                  (!!company.shareHolders && company.shareHolders.length) &&\n                  <Block>\n                    {\n                      company.shareHolders.map((shareholder, index) => \n                        <Block key={index}>\n                          {shareholder.shareClass} {shareholder.sharesHeld}\n                          {\n                            shareholder.__typename === 'CompanyShareHolder' &&\n                            <Block>{shareholder.company.companyNumber} {shareholder.company.legalName}</Block>\n                          }\n                          {\n                            shareholder.__typename === 'PersonShareHolder' &&\n                            <Block>{shareholder.person.name.givenName} {shareholder.person.name.familyName} {!!shareholder.person.dateOfBirth && formatDate(new Date(shareholder.person.dateOfBirth))} </Block>\n                          }\n                        </Block>\n                      )\n                    }\n                  </Block>\n                }\n              </Block>\n            )\n          }\n        </Block>\n      }\n    </PaddedContainer>\n  )\n}\n\nexport default Shareholders;\n"],"sourceRoot":""}