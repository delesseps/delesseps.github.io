{"version":3,"sources":["components/PaddedContainer.tsx","utils/isArray.ts","components/form/AutoCompleteField.tsx","components/form/TextField.tsx","components/LazyDialog.tsx","components/Card.tsx","components/form/DisplayField.tsx","types/EntityType.ts","types/AbrEntityType.ts","utils/abnAcn.ts","providers/Company.tsx","state/TradingEntityState.ts","components/organisms/TradingEntityPanel.tsx","types/TrustType.ts","components/form/UploadField.tsx","components/organisms/CompanyTrusteeDetails.tsx","components/organisms/TrustDetails.tsx","types/Trust.ts","pages/accounts/BusinessDetails.tsx"],"names":["PaddedContainer","styled","div","isArray","value","Array","TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","TextField","multiline","minRows","disabled","transform","fullWidth","event","target","LazyDialog","isOpen","children","useState","isOpenState","setOpenState","useEffect","timeoutId","setTimeout","clearTimeout","Suspense","fallback","open","Title","Head","Root","Card","title","ariaLabel","aria-label","LabelStyle","Value","DisplayField","fieldValue","join","EntityType","EntityTypeLabels","Map","None","Individual","Partnership","Company","Trust","AbrEntityType","AustralianPrivateCompany","AustralianPublicCompany","CorporateUnitTrust","DiscretionaryInvestmentTrust","DiscretionaryTradingTrust","FamilyPartnership","FixedTrust","FixedUnitTrust","HybridTrust","IndividualSoleTrader","OtherTrust","SelfManagedSuperannuationFund","nonDigits","formatAbnAcn","sanitizedValue","replace","sanitizeAbnAcn","length","formatAbn","formatAcn","slice","companyContext","React","createContext","useCompanyContext","useContext","CompanyProvider","undefined","company","setCompany","Provider","tradingEntityState","atom","key","default","AddTradingEntityDialog","lazy","EmptyState","MenuItemStyle","MainName","BusinessType","Abn","BusinessNames","BusinessName","SelectedTradingEntity","TradingEntityEditClass","EntityTypeStyle","TradingEntityPanel","TrustType","isModalOpen","setIsModalOpen","anchorEl","setAnchorEl","useRecoilState","tradingEntity","setTradingEntity","onMenuClose","Chip","get","entityType","variant","color","IconButton","onClick","currentTarget","Menu","getContentAnchorEl","keepMounted","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","mainName","abn","businessNames","map","businessName","index","Button","onSubmit","TrustTypeLabels","DropZoneStyle","UploadField","FormControl","InputLabel","defaultValue","as","useChipsForPreview","acceptedFiles","dropzoneText","showPreviews","showFileNames","showPreviewsInDropzone","filesLimit","showAlerts","getPreviewIcon","Fragment","files","TrusteeRoot","Body","CoreDetails","Name","span","Acn","Icon","Actions","CompanyTrusteeDetails","trustee","onRemove","Grid","container","spacing","item","xs","acn","directors","director","firstGivenName","familyName","AddCompanyTrusteeDialog","Trustees","Header","trustTypeOptions","entries","trustType","defaultValues","TrustDetails","trust","isCompanyModalOpen","setIsCompanyModalOpen","trustees","setTrustees","useForm","mode","removeTrustee","concat","sm","FormLabel","startIcon","endIcon","isCompanyTrustee","newCompanyDetails","Directors","TradingName","WebSite","TradingAddress","Notes","BusinessDetails","methods","handleSubmit","lg"],"mappings":"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","file":"static/js/11.10a58b51.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","const isArray = <T>(value: unknown): value is T[] => Array.isArray(value);\n\nexport default isArray;","import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={id || name}\n          fullWidth\n          autoFocus={autoFocus}\n          className={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","\nimport { Dialog } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\nexport interface LazyDialogProps {\n  children: React.ReactNode;\n  isOpen: boolean;\n}\n\nconst dialogCloseAnimationDuration = 500;\n\nfunction LazyDialog({ isOpen, children }: LazyDialogProps) {\n  const [isOpenState, setOpenState] = useState(isOpen);\n  // Defer close of the dialog for the animation to complete\n  useEffect(\n    () => {\n      let timeoutId: NodeJS.Timeout;\n      if (isOpenState !== isOpen) {\n        if (!isOpen) {\n          timeoutId = setTimeout(() => {\n            setOpenState(isOpen);\n          }, dialogCloseAnimationDuration);\n        } else {\n          setOpenState(isOpen);\n        }\n      }\n      return () => clearTimeout(timeoutId);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isOpen],\n  );\n\n  return (\n    <React.Suspense fallback={<Dialog open />}>\n      {isOpenState && children}\n    </React.Suspense>\n  )\n}\n\nexport default LazyDialog;\n","import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 18px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n  @media (min-width: 600px) {\n    border: 2px solid rgba(0,0,0,0.12);\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    /* padding: 0 0 16px 0; */\n    padding: 0;\n    /* border-bottom: 2px solid rgba(0,0,0,0.12); */\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  // actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n        title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;\n","import styled from '@emotion/styled';\nimport { FormControl, InputLabel } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React from 'react';\nimport isArray from 'utils/isArray';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst Value = styled.div`\n  padding: 5px 0;\n  font-size: 14px;\n  line-height: 1em;\n`;\n\ninterface Props {\n  label: string;\n  className?: string;\n  // type?: 'text' | 'number' | 'password';\n  value: string[] | React.ReactNode;\n}\n\nconst DisplayField = (props: Props) => {\n  const {\n    label,\n    value,\n  } = props;\n\n  let fieldValue: React.ReactNode = '';\n\n  if (isArray(value)) {\n    fieldValue = value.join('\\n');\n  } else {\n    fieldValue = value;\n  }\n  \n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <Value>{fieldValue}</Value>\n    </FormControl>\n  );\n};\n\nexport default DisplayField;\n","import AbrEntityType from './AbrEntityType';\n\nenum EntityType {\n  None = 0,\n  Individual = 1,\n  Partnership = 3,\n  Company = 5,\n  Trust = 7,\n}\n\nexport const EntityTypeLabels = new Map<EntityType, string>([\n  [EntityType.None, ''],\n  [EntityType.Individual, 'Individual'],\n  [EntityType.Partnership, 'Partnership'],\n  [EntityType.Company, 'Company'],\n  [EntityType.Trust, 'Trust'],\n]);\n\nexport const EntityTypeAbrEntityTypeMapping = new Map<AbrEntityType, EntityType>([\n  [AbrEntityType.None, EntityType.None],\n  [AbrEntityType.AustralianPrivateCompany, EntityType.Company],\n  [AbrEntityType.AustralianPublicCompany, EntityType.Company],\n  [AbrEntityType.CorporateUnitTrust, EntityType.Trust],\n  [AbrEntityType.DiscretionaryInvestmentTrust, EntityType.Trust],\n  [AbrEntityType.DiscretionaryTradingTrust, EntityType.Trust],\n  [AbrEntityType.FamilyPartnership, EntityType.Partnership],\n  [AbrEntityType.FixedTrust, EntityType.Trust],\n  [AbrEntityType.FixedUnitTrust, EntityType.Trust],\n  [AbrEntityType.HybridTrust, EntityType.Trust],\n  [AbrEntityType.IndividualSoleTrader, EntityType.Individual],\n  [AbrEntityType.OtherTrust, EntityType.Trust],\n  [AbrEntityType.Partnership, EntityType.Partnership],\n  [AbrEntityType.SelfManagedSuperannuationFund, EntityType.Trust],\n]);\n\nexport default EntityType;\n","enum AbrEntityType {\n  None = '',\n  AustralianPrivateCompany = 'PRV',\n  AustralianPublicCompany = 'PUB',\n  CorporateUnitTrust = 'CUT',\n  DiscretionaryInvestmentTrust = 'DIT',\n  DiscretionaryTradingTrust = 'DTT',\n  FamilyPartnership = 'FPT',\n  FixedTrust = 'FXT',\n  FixedUnitTrust = 'FUT',\n  HybridTrust = 'HYT',\n  IndividualSoleTrader = 'IND',\n  OtherTrust = 'TRT',\n  Partnership = 'PTR',\n  SelfManagedSuperannuationFund = 'SMF',\n}\n\nexport default AbrEntityType;\n","const nonDigits = /[^\\d]/g;\n\nexport const sanitizeAbnAcn = (value: string | null | undefined): string =>\n  value ? value.replace(nonDigits, '') : '';\n\nexport const formatAbnAcn = (value: string | null | undefined): string => {\n  if (!value) {\n    return '';\n  }\n  const sanitizedValue = sanitizeAbnAcn(value);\n\n  if (sanitizedValue.length === 11) {\n    return formatAbn(sanitizedValue);\n  }\n\n  if (sanitizedValue.length === 9) {\n    return formatAcn(sanitizedValue);\n  }\n\n  return value;\n};\n\nexport const formatAbn = (value: string): string => {\n  return `${value.slice(0, 2)} ${value.slice(2, 5)} ${value.slice(5, 8)} ${value.slice(8, 11)}`;\n};\n\nexport const formatAcn = (value: string): string => {\n  return `${value.slice(0, 3)} ${value.slice(3, 6)} ${value.slice(6, 9)}`;\n};","import React, { useContext, useState } from \"react\";\nimport Company from \"types/Company\";\n\nexport interface CompanyProviderProps {\n  children: React.ReactNode,\n}\n\nexport interface CompanyContext {\n  company?: Company;\n  setCompany: (company: Company | undefined) => void;\n}\n\nexport const companyContext = React.createContext<CompanyContext | null>(null);\nexport const useCompanyContext = () => useContext(companyContext)!;\n\nexport const CompanyProvider = ({\n  children,\n}: CompanyProviderProps): React.ReactElement => {\n\n  const [company, setCompany] = useState<Company | undefined>(undefined);\n\n  return (\n    <companyContext.Provider\n      value={{\n        company,\n        setCompany,\n      }}\n    >\n      {children}\n    </companyContext.Provider>\n  );\n};\n","import { atom } from 'recoil';\nimport TradingEntity from 'types/TradingEntity';\n\nexport const tradingEntityState = atom<TradingEntity | undefined>({\n  key: 'tradingEntityState',\n  default: undefined,\n});\n\n","import styled from \"@emotion/styled\";\nimport { Button, Chip, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport LazyDialog from \"components/LazyDialog\";\nimport { css } from \"emotion\";\nimport React, { useState } from \"react\";\nimport { MdMoreVert } from \"react-icons/md\";\nimport { useRecoilState } from \"recoil\";\nimport { tradingEntityState } from \"state/TradingEntityState\";\nimport { EntityTypeLabels } from \"types/EntityType\";\nimport TradingEntity from \"types/TradingEntity\";\n\nconst AddTradingEntityDialog = React.lazy(() => import('./AddTradingEntityDialog'))\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 24px;\n  background-color: #eee;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nconst MainName = styled.div`\n  font-size: 14px;\n`;\n\nconst BusinessType = styled.div`\n  position: absolute;\n  top: 0;\n  left: 50%;\n`;\n\nconst Abn = styled.div`\n  margin-top: 1em;\n  color: #777;\n`;\n\nconst BusinessNames = styled.div`\n  margin-top: 1em;\n  color: #777;\n`;\n\nconst BusinessName = styled.div`\n  color: #777;\n`;\n\nconst SelectedTradingEntity = styled.div`\n  padding: 24px 16px 16px 16px;\n  background-color: #eee;\n  position: relative;\n`;\n\nconst TradingEntityEditClass = css`\n  position: absolute;\n  right: 2px;\n  top: 2px;\n`;\n\nconst EntityTypeStyle = css`\n  margin-left: -50%;\n  margin-top: -40%;\n`;\n\nfunction TradingEntityPanel() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n  const [tradingEntity, setTradingEntity] = useRecoilState(tradingEntityState);\n\n  function onAssignClick() {\n    setIsModalOpen(true);\n  }\n\n  const onModalClose = () => {\n    setIsModalOpen(false);\n  }\n\n  const onModalSubmit = (tradingEntity: TradingEntity) => {\n    setIsModalOpen(false);\n    setTradingEntity(tradingEntity);\n  }\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    setTradingEntity(undefined);\n  }\n\n  function onTradingEntityActionMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <div>\n      {\n        !tradingEntity ?\n        <EmptyState>\n          {/* <Grid container spacing={2}>\n            <Grid item xs={12}>\n              No trading entity assigned\n            </Grid>\n            <Grid item xs={12}> */}\n              <Button variant=\"contained\" onClick={onAssignClick}>Assign Trading Entity</Button>\n            {/* </Grid>\n          </Grid> */}\n        </EmptyState> :\n        <SelectedTradingEntity>\n          <BusinessType>\n            <Chip\n              className={EntityTypeStyle}\n              label={EntityTypeLabels.get(tradingEntity.entityType)}\n              variant=\"filled\"\n              color=\"primary\"\n            />\n          </BusinessType>\n          <IconButton\n            className={TradingEntityEditClass}\n            onClick={onTradingEntityActionMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            {/* <MenuItem className={MenuItemStyle} onClick={() => {}}>Run</MenuItem> */}\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n          <MainName>{tradingEntity.mainName}</MainName>\n          <Abn>{tradingEntity.abn}</Abn>\n          <BusinessNames>{tradingEntity.businessNames?.map((businessName, index) => \n            <BusinessName key={index}>{businessName}</BusinessName>\n          )}</BusinessNames>\n        </SelectedTradingEntity>\n      }\n      <LazyDialog isOpen={isModalOpen}>\n        <AddTradingEntityDialog\n          isOpen={isModalOpen}\n          onClose={onModalClose}\n          onSubmit={onModalSubmit}\n        />\n      </LazyDialog>\n    </div>\n  )\n}\n\nexport default TradingEntityPanel;\n","import AbrEntityType from './AbrEntityType';\n\nenum TrustType {\n  None = 0,\n  FixedUnitTrust = 1,\n  FixedTrust = 3,\n  OtherTrust = 5,\n  CorporateUnitTrust = 7,\n  DiscretionaryTradingTrust = 9,\n  HybridTrust = 11,\n  SelfManagedSuperannuationFund = 13,\n  DiscretionaryInvestmentTrust = 15,\n}\n\nexport const TrustTypeFromAbrEntityType = new Map<AbrEntityType, TrustType>([\n  [AbrEntityType.None, TrustType.None],\n  [AbrEntityType.FixedUnitTrust, TrustType.FixedUnitTrust],\n  [AbrEntityType.FixedTrust, TrustType.FixedTrust],\n  [AbrEntityType.OtherTrust, TrustType.OtherTrust],\n  [AbrEntityType.CorporateUnitTrust, TrustType.CorporateUnitTrust],\n  [AbrEntityType.DiscretionaryTradingTrust, TrustType.DiscretionaryTradingTrust],\n  [AbrEntityType.DiscretionaryInvestmentTrust, TrustType.DiscretionaryInvestmentTrust],\n  [AbrEntityType.HybridTrust, TrustType.HybridTrust],\n  [AbrEntityType.SelfManagedSuperannuationFund, TrustType.SelfManagedSuperannuationFund],\n]);\n\nexport const TrustTypeLabels = new Map<TrustType, string>([\n  [TrustType.CorporateUnitTrust, 'Corporate Unit Trust'],\n  [TrustType.DiscretionaryInvestmentTrust, 'Discretionary Investment Trust'],\n  [TrustType.DiscretionaryTradingTrust, 'Discretionary Trading Trust'],\n  [TrustType.FixedTrust, 'Fixed Trust'],\n  [TrustType.FixedUnitTrust, 'Fixed Unit Trust'],\n  [TrustType.HybridTrust, 'Hybrid Trust'],\n  [TrustType.SelfManagedSuperannuationFund, 'Self Managed Super Fund'],\n  [TrustType.OtherTrust, 'Other Trust'],\n]);\n\nexport const isUnitTrustType = (trustType: TrustType): boolean => {\n  return trustType === TrustType.FixedUnitTrust ||\n    trustType === TrustType.CorporateUnitTrust;\n};\n\nexport default TrustType;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport React from 'react';\nimport { FormControl, InputLabel } from '@material-ui/core';\nimport { css } from 'emotion';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DropZoneStyle = css`\n  .MuiDropzoneArea-root {\n    background-color: #eee;\n    padding: 6px 5px;\n    outline: none;\n  }\n  .MuiDropzoneArea-active {\n    background-color: #ddd;\n  }\n  .MuiDropzoneArea-text {\n    margin: 5px 0;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\n// function EmptyIcon () {\n//   return (\n//     <React.Fragment />\n//   )\n// }\n\nconst UploadField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    // rules,\n    // type,\n    // placeholder,\n    // disabled,\n    // autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n      className={DropZoneStyle}\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <Controller\n        control={control}\n        name={name as FieldName<T>}\n        // rules={rules}\n        defaultValue=\"\"\n        // render={ ({ onChange, onBlur, value, name }) => (\n        as={\n          <DropzoneArea\n            // inputProps={{\n            //   id: name\n            // }}\n            // classes={{\n              // root: `css-${DropZoneStyle.name}`,\n              // root: classes.dropZoneRoot,\n              // text: classes.dropZoneText,\n              // active: classes.dropZoneActive,\n              // icon: classes.dropZoneIcon,\n            // }}\n            useChipsForPreview\n            acceptedFiles={['image/jpeg', 'image/png', 'application/pdf']}\n            dropzoneText=\"Click or drag JPG, PNG or PDF file here\"\n            showPreviews={false}\n            showFileNames={true}\n            showPreviewsInDropzone={true}\n            filesLimit={1}\n            // Icon={<EmptyIcon />}\n            showAlerts={false}\n            getPreviewIcon={() => <React.Fragment />}\n            // onChange={onChange}\n            // initialFiles={[]}\n            // initialFiles={identificationFiles}\n            onChange={(files) => {\n            //   setIdentificationFiles(files);\n            }}\n          />\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport default UploadField;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { CompanyTrustee } from \"types/Trust\";\nimport { BiBuilding } from \"react-icons/bi\";\nimport { MdMoreVert } from \"react-icons/md\";\nimport { Grid, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport { formatAbnAcn } from \"utils/abnAcn\";\nimport DisplayField from \"components/form/DisplayField\";\n\nconst TrusteeRoot = styled.div`\n  background-color: #eee;\n  margin-bottom: 2px;\n`;\n\nconst Body = styled.div`\n  display: flex;\n  padding: 0 16px 16px 46px;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div`\n  flex-grow: 1;\n  padding: 16px;\n  display: flex;\n`;\n\nconst CoreDetails = styled.div`\n  flex-grow: 1;\n`;\n\nconst Name = styled.span`\n  display: inline-block;\n  font-size: 14px;\n`;\n\nconst Acn = styled.span`\n  display: inline-block;\n  color: #777;\n`;\n\nconst Icon = styled.span`\n  display: inline-block;\n  font-size: 16px;\n  width: 30px;\n  vertical-align: middle;\n`;\n\nconst Actions = styled.div`\n  margin-right: 2px;\n  margin-top: 2px;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nexport interface CompanyTrusteeDetailsProps {\n  trustee: CompanyTrustee;\n  onRemove: (index: number) => void;\n  index: number;\n}\n\nfunction CompanyTrusteeDetails({ trustee, onRemove, index}: CompanyTrusteeDetailsProps) {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    onRemove(index);\n  }\n\n  function onMenuRunCreditCheck() {\n    onMenuClose();\n    // onRemove(index);\n  }\n\n  function onMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <TrusteeRoot>\n      <Head>\n        <Title>\n          <Icon>\n            <BiBuilding/>\n          </Icon>\n          <CoreDetails>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Name>{trustee.name}</Name>\n              </Grid>\n              <Grid item xs={12}>\n                <Acn>\n                  <span>{formatAbnAcn(trustee.acn)}</span>\n                  { !!trustee.abn && <> / <span>{formatAbnAcn(trustee.abn)}</span></>}\n                </Acn>\n              </Grid>\n            </Grid>\n          </CoreDetails>\n        </Title>\n        <Actions>\n          <IconButton\n            // className={TradingEntityEditClass}\n            onClick={onMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            {/* <MenuItem className={MenuItemStyle} onClick={() => {}}>Run</MenuItem> */}\n            <MenuItem className={MenuItemStyle} onClick={onMenuRunCreditCheck}>Run Credit Check</MenuItem>\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n        </Actions>\n      </Head>\n      {\n        (!!trustee.directors && !!trustee.directors.length) &&\n        <Body>\n          {/* TODO: Change to dedicated UI with icons for credit checks etc */}\n          <DisplayField\n            label=\"Directors\"\n            value={trustee.directors.map(director => `${director.firstGivenName} ${director.familyName}`)}\n          />\n        </Body>\n      }\n    </TrusteeRoot>\n  )\n}\n\nexport default CompanyTrusteeDetails;\n","import { Button, Grid } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { CompanyTrustee, isCompanyTrustee, Trust, Trustee } from \"types/Trust\";\nimport { FormLabel } from '@material-ui/core';\nimport styled from \"@emotion/styled\";\nimport { css } from \"emotion\";\nimport Card from \"components/Card\";\nimport { MdAdd, MdPerson } from \"react-icons/md\";\nimport { BiBuilding } from \"react-icons/bi\";\nimport AutoCompleteField, { SelectOption } from \"components/form/AutoCompleteField\";\nimport TrustType, { TrustTypeLabels } from \"types/TrustType\";\nimport { useForm } from \"react-hook-form\";\nimport UploadField from \"components/form/UploadField\";\nimport TextField from \"components/form/TextField\";\nimport CompanyTrusteeDetails from \"./CompanyTrusteeDetails\";\nimport LazyDialog from \"components/LazyDialog\";\nimport { CompanyProvider } from \"providers/Company\";\nimport { NewCompanyDetailsForm } from \"./NewCompanyDetails\";\n\nconst AddCompanyTrusteeDialog = React.lazy(() => import('./AddCompanyTrusteeDialog'))\n\nconst Trustees = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst LabelStyle = css`\n  flex-grow: 1;\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n  align-self: flex-end;\n`;\n\nconst Actions = styled.div`\n  .MuiButton-root {\n    margin-left: 8px;\n  }\n`;\n\nconst EmptyState = styled.div`\n  background-color: #eee;\n  padding: 24px;\n  text-align: center;\n`;\n\n\nconst trustTypeOptions = [...TrustTypeLabels.entries()].map(([trustType, label]) => \n  ({ label: label, value: trustType })\n);\n\nexport interface TrustDetailsProps {\n  trust?: Trust;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\ninterface TrustForm {\n  Name?: string;\n  TrustType?: SelectOption<TrustType>;\n  TrustDeed?: (File | string)[];\n}\n\nconst defaultValues: TrustForm = {\n}\n\nfunction TrustDetails({ trust }: TrustDetailsProps) {\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState(false);\n  const [trustees, setTrustees] = useState<Trustee[]>([]);\n\n  const methods = useForm<TrustForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    // handleSubmit,\n    control,\n    // watch,\n    // getValues,\n  } = methods;\n\n  function onCompanyModalClose() {\n    setIsCompanyModalOpen(false);\n  }\n\n  function onCompanyModalSubmit(newCompanyDetails: NewCompanyDetailsForm) {\n    setIsCompanyModalOpen(false);\n    addTrustee({\n      name: newCompanyDetails.Name,\n      acn: newCompanyDetails.Acn,\n      abn: newCompanyDetails.Abn,\n      directors: newCompanyDetails.Directors\n    } as CompanyTrustee);\n  }\n\n  function onAddCompany() {\n    setIsCompanyModalOpen(true);\n  }\n\n  function addTrustee(trustee: Trustee) {\n    setTrustees([...trustees, trustee]);\n  }\n\n  function removeTrustee(index: number) {\n    setTrustees(trustees.slice(0, index).concat(trustees.slice(index + 1)));\n  }\n\n  return (\n    <Card title=\"Trust Details\">\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            name=\"Name\"\n            control={control}\n            label=\"Name\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <AutoCompleteField\n            name=\"TrustType\"\n            control={control}\n            label=\"Type\"\n            options={trustTypeOptions}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <UploadField\n            name=\"TrustDeed\"\n            label=\"Certified Trust Deed\"\n            control={control}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Trustees>\n            <Header>\n              <FormLabel className={LabelStyle}>Trustees</FormLabel>\n              <Actions>\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<MdPerson/>}\n                />\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<BiBuilding/>}\n                  onClick={onAddCompany}\n                />\n              </Actions>\n            </Header>\n            {\n              !trustees.length ?\n              <EmptyState>No trustees assigned</EmptyState>\n              :\n              trustees.map((trustee, index) =>\n                isCompanyTrustee(trustee) ? \n                <CompanyTrusteeDetails\n                  key={index}\n                  index={index}\n                  trustee={trustee}\n                  onRemove={removeTrustee} />\n                :\n                <div key={index}>{trustee.familyName}</div>\n              )\n            }\n          </Trustees>\n        </Grid>\n      </Grid>\n      <LazyDialog isOpen={isCompanyModalOpen}>\n        <CompanyProvider>\n          <AddCompanyTrusteeDialog\n            isOpen={isCompanyModalOpen}\n            onClose={onCompanyModalClose}\n            onSubmit={onCompanyModalSubmit}\n          />\n        </CompanyProvider>\n      </LazyDialog>\n    </Card>\n  )\n}\n\nexport default TrustDetails;\n","import Company from \"./Company\";\nimport Person from \"./Person\";\nimport TrustType from \"./TrustType\";\n\nexport interface UnitTrust {\n  unitHolders?: Person[];\n  foundingUnitHolders?: Person[];\n}\n\nexport interface PersonTrustee extends Person {\n\n}\n\nexport interface CompanyTrustee extends Company {\n\n}\n\nexport interface CompanySettlor extends Company {\n\n}\n\nexport interface PersonSettlor extends Company {\n\n}\n\nexport type Trustee = PersonTrustee | CompanyTrustee;\nexport type Settlor = PersonSettlor | CompanySettlor;\n\nexport const isCompanyTrustee = (trustee: Trustee): trustee is CompanyTrustee => {\n  const isCompany = (trustee as CompanyTrustee).acn !== undefined;\n  return isCompany;\n}\n\nexport const isPersonTrustee = (trustee: Trustee): trustee is PersonTrustee => {\n  return (trustee as PersonTrustee).firstGivenName !== undefined\n}\n\nexport interface Trust {\n  legalName: string;\n  abn?: string;\n  trustees?: Trustee[];\n  unitTrust?: UnitTrust;\n  settlor?: Settlor;\n  deedDate?: string;\n  trustType?: TrustType;\n}\n","// import styled from '@emotion/styled';\n// import { GoCheck } from 'react-icons/go';\n// import { MdEdit, MdEmail, MdLocalPhone, MdSend } from 'react-icons/md';\n// import { useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\n// import AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport TextField from 'components/form/TextField';\nimport PaddedContainer from 'components/PaddedContainer';\n// import DisplayField from 'components/form/DisplayField';\nimport Card from 'components/Card';\nimport TradingEntityPanel from 'components/organisms/TradingEntityPanel';\nimport React from 'react';\nimport EntityType from 'types/EntityType';\nimport TrustDetails from 'components/organisms/TrustDetails';\nimport { useRecoilState } from 'recoil';\nimport { tradingEntityState } from 'state/TradingEntityState';\n\n// const ContactDetails = styled.div`\n//   padding: 16px 16px 1px 16px;\n//   background-color: #eee;\n//   margin-top: 1px;\n//   font-size: 14px;\n//   position: relative;\n// `;\n\n// const ContactLineIcon = styled.div`\n//   display: inline-block;\n//   margin-right: 10px;\n//   vertical-align: middle;\n// `;\n\n// const ContactDetailLine = styled.div`\n//   margin-bottom: 16px;\n// `;\n\n// const ContactEditClass = css`\n//   position: absolute;\n//   right: 2px;\n//   top: 2px;\n// `\n\n// const contactOptions: SelectOption<string>[] = [\n//   { label: \"Walter White\", value: \"123\" },\n//   { label: \"Saul Goodman\", value: \"456\" },\n//   { label: \"Kim Wexler\", value: \"789\" }\n// ];\n\ninterface BusinessDetailsForm {\n  // LegalName: string;\n  // ABN: string;\n  // ACN: string;\n  TradingName: string;\n  TradingAddress: string;\n  WebSite: string;\n  Notes: string;\n  // Abn: string;\n  // PrimaryContact: SelectOption<string> | undefined;\n  // SecondaryContact: SelectOption<string> | undefined;\n}\n\nconst defaultValues: BusinessDetailsForm = {\n  // LegalName: 'Breaking Bad Pty Ltd',\n  // ABN: '',\n  // ACN: '',\n  TradingName: '',\n  WebSite: '',\n  TradingAddress: '',\n  Notes: '',\n  // Abn: '12 345 678 901',\n  // PrimaryContact: contactOptions.find(option => option.value === '123'),\n  // SecondaryContact: undefined,\n}\n\nfunction BusinessDetails() {\n  // const [tradingEntity, setTradingEntity] = useState<TradingEntity | undefined>(undefined);\n  const [tradingEntity] = useRecoilState(tradingEntityState);\n\n  // const history = useHistory();\n  const methods = useForm<BusinessDetailsForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n  } = methods;\n\n\n  return (\n    <PaddedContainer>\n      <form onSubmit={handleSubmit(() => {})}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={6}>\n            <Card title=\"Trading Entity\">\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <TradingEntityPanel />\n                </Grid>\n                {/* <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ABN\"\n                    control={control}\n                    label=\"ABN\"\n                    placeholder=\"Find by name or ABN\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <DisplayField\n                    label=\"Legal Name\"\n                    value=\"\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ACN\"\n                    label=\"ACN\"\n                    control={control}\n                  />\n                </Grid> */}\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingName\"\n                    control={control}\n                    label=\"Trading Name\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingAddress\"\n                    control={control}\n                    label=\"Trading Address\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"WebSite\"\n                    control={control}\n                    label=\"Web Site\"\n                    placeholder=\"https://\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"Notes\"\n                    control={control}\n                    multiline\n                    minRows={3}\n                    label=\"Notes\"\n                  />\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid>\n          {\n            tradingEntity?.entityType === EntityType.Partnership &&\n            <Grid item xs={12} lg={6}>\n              <Card title=\"Partnership Details\">\n                \n              </Card>\n            </Grid>\n          }\n          {\n            tradingEntity?.entityType === EntityType.Trust &&\n            <Grid item xs={12} lg={6}>\n              <TrustDetails />\n            </Grid>\n          }\n          {/* <Grid item xs={12} lg={6}>\n            <Card title=\"Contacts\">\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"PrimaryContact\"\n                    control={control}\n                    label=\"Primary Contact\"\n                    options={[\n                      { label: \"Walter White\", value: \"123\" },\n                      { label: \"Saul Goodman\", value: \"456\" },\n                      { label: \"Kim Wexler\", value: \"789\" }\n                    ]}\n                    placeholder=\"Select contact\"\n                    rules={ { required: 'Required' } }\n                  />\n                  {\n                    primaryContact &&\n                    <ContactDetails>\n                      <IconButton\n                        css={ContactEditClass}\n                        onClick={() => history.push('./directory/100')}\n                      >\n                        <MdEdit />\n                      </IconButton>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdLocalPhone /></ContactLineIcon>+61 400 123 456\n                      </ContactDetailLine>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdEmail /></ContactLineIcon>walter.white@bb.com\n                        <Tooltip title=\"Joined\"><InviteStatusIcon css={Joined}><GoCheck /></InviteStatusIcon></Tooltip>\n                      </ContactDetailLine>\n                    </ContactDetails>\n                  }\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"SecondaryContact\"\n                    control={control}\n                    label=\"Secondary Contact\"\n                    options={[\n                      { label: \"Walter White\", value: \"123\" },\n                      { label: \"Saul Goodman\", value: \"456\" },\n                      { label: \"Kim Wexler\", value: \"789\" }\n                    ]}\n                    placeholder=\"Select contact\"\n                    rules={ { required: 'Required' } }\n                  />\n                  {\n                    secondaryContact &&\n                    <ContactDetails>\n                      <IconButton\n                        css={ContactEditClass}\n                        onClick={() => history.push('./directory/200')}\n                      >\n                        <MdEdit />\n                      </IconButton>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdLocalPhone /></ContactLineIcon>+61 444 555 666\n                      </ContactDetailLine>\n                      <ContactDetailLine>\n                        <ContactLineIcon><MdEmail /></ContactLineIcon>kim.wexler@wm.com\n                        <Tooltip title=\"Invited\"><InviteStatusIcon css={Invited}><MdSend /></InviteStatusIcon></Tooltip>\n                      </ContactDetailLine>\n                    </ContactDetails>\n                  }\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid> */}\n        </Grid>\n      </form>\n    </PaddedContainer>\n  )\n}\n\nexport default BusinessDetails;\n"],"sourceRoot":""}