{"version":3,"sources":["components/PaddedContainer.tsx","components/form/TextField.tsx","components/form/AutoCompleteField.tsx","components/table/FilterDrawer.tsx","utils/isNullOrUndefined.ts","utils/isArray.ts","utils/isObject.ts","utils/isEmptyObject.ts","components/table/Table.tsx","types/AccountAccessType.ts","types/AccountStatus.ts","utils/color.ts","components/form/CheckBoxField.tsx","components/organisms/UserAssignField.tsx","components/organisms/NewAccountUserDialog.tsx","components/organisms/EditAccountUserDialog.tsx","pages/accounts/Users.tsx","utils/initials.ts"],"names":["PaddedContainer","styled","div","TextFieldStyle","css","TextField","props","name","control","label","error","rules","multiline","minRows","placeholder","disabled","autoFocus","transform","render","onChange","onBlur","value","id","fullWidth","event","target","InputLabelProps","shrink","helperText","message","AutoCompleteField","creatable","getOptionLabel","option","disableClearable","renderOption","options","autoHighlight","freeSolo","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputProps","rest","useStyles","makeStyles","theme","createStyles","filterDrawer","filterHeading","padding","spacing","margin","borderBottom","borderBottomColor","palette","grey","filters","minHeight","filterDrawerContent","minWidth","display","height","gridTemplateRows","filterDrawerBackdrop","background","filteredCount","fontSize","color","marginLeft","filterFooter","borderTop","borderTopColor","FilterDrawer","isOpen","onClose","onClearFilters","children","topicName","classes","handleClear","useCallback","handleApply","Drawer","anchor","className","open","ModalProps","BackdropProps","toLowerCase","DialogActions","Button","size","onClick","variant","isNullOrUndefined","isArray","Array","isObject","isObjectType","Date","isEmptyObject","Object","keys","length","TableLoaderContainer","TableHeadCellStyles","TableCellStyles","TableRowClickableStyles","TableHeadCellInnerStyles","defaultPaginationState","total","current","pageSize","Table","frozenHeader","columns","data","onPaginationChange","onSortChange","onRowClick","pagination","sort","filterable","isLoading","rowsPerPageOptions","title","topic","useState","sortState","setSortState","paginationState","setPaginationState","filtersDrawerOpen","setFiltersDrawerOpen","useEffect","handleChangePage","_evt","newPage","newPaginationState","handleChangeRowsPerPage","handleRowClick","record","rowClassName","useMemo","undefined","tableHeaders","TableRow","map","column","index","columnSortState","dataIndex","columnDataIndex","TableCell","root","width","key","sortable","TableSortLabel","active","direction","newSortState","rowCells","row","i","filterComponents","filterComponent","Fragment","hasFilters","Toolbar","Tooltip","IconButton","aria-label","DelayedLoader","TableContainer","style","maxHeight","stickyHeader","TableHead","TableBody","TablePagination","count","rowsPerPage","page","onPageChange","onRowsPerPageChange","AccountAccessType","AccountStatus","AccountAccessTypeLabels","Map","View","Editor","Admin","AccountStatusLabels","Invited","Active","colorHash","lightness","CheckboxField","FormControlLabel","checked","Name","span","UserMatch","Email","Mobile","ListBoxStyles","allUsers","email","mobile","filter","createFilterOptions","UserAssignField","Autocomplete","listbox","state","inputValue","handleHomeEndKeys","filterOptions","params","filtered","indexOf","push","ContentStyle","SelectedUserChipLabelStyle","defaultValues","AccessType","get","Message","SendNotification","GivenName","FamilyName","accountAccessTypeOptions","entries","accountAccessType","NewAccountUserDialog","onSubmit","useTheme","fullScreen","useMediaQuery","breakpoints","down","selectedUser","setSelectedUser","methods","useForm","mode","reset","handleSubmit","sendNotification","watch","onModalClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","Grid","container","item","xs","Chip","onDelete","EditAccountUserDialog","accountUser","accessType","isDirty","formState","NewButtonStyle","ListItemStyle","SecondaryDetails","status","Users","isNewAccountUserModalOpen","setIsNewAccountUserModalOpen","isEditAccountUserModalOpen","setIsEditAccountUserModalOpen","selectedAccountUser","setSelectedAccountUser","List","ListItem","button","alignItems","ListItemAvatar","Avatar","alt","backgroundColor","hex","split","parts","charAt","join","initials","ListItemText","avatar","Fab"],"mappings":"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","file":"static/js/10.c1e64f75.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiTextField from '@material-ui/core/TextField';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst TextField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    error,\n    rules,\n    multiline,\n    minRows,\n    // type,\n    placeholder,\n    disabled,\n    autoFocus,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={name}\n          fullWidth\n          autoFocus={autoFocus}\n          css={TextFieldStyle}\n          multiline={multiline}\n          minRows={minRows}\n          // type={ type }\n          label={label}\n          placeholder={placeholder}\n          onChange={ (event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n        />\n      )}\n    />\n  );\n};\n\nexport default TextField;\n","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport MuiAutocomplete from '@material-ui/lab/Autocomplete';\nimport { AutocompleteRenderOptionState, InputLabelProps, TextField } from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                css={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import React, { PropsWithChildren, useCallback } from 'react';\nimport {\n  Button,\n  createStyles,\n  DialogActions,\n  Drawer,\n  // Grid,\n  makeStyles,\n  ModalProps\n  } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    filterDrawer: {\n    },\n    filterHeading: {\n      padding: theme.spacing(2),\n      margin: 0,\n      borderBottom: '1px solid',\n      borderBottomColor: theme.palette.grey[200]\n    },\n    filters: {\n      padding: theme.spacing(2),\n      minHeight: '100%',\n    },\n    filterDrawerContent: {\n      minWidth: 250,\n      display: 'grid',\n      height: '100%',\n      gridTemplateRows: 'auto 1fr auto',\n    },\n    filterDrawerBackdrop: {\n      background: 'rgba(0, 0, 0, 0.1)',\n    },\n    filteredCount: {\n      fontSize: '0.8em',\n      color: theme.palette.grey[400],\n      marginLeft: theme.spacing(1)\n    },\n    filterFooter: {\n      borderTop: '1px solid',\n      borderTopColor: theme.palette.grey[200]\n    },\n  }),\n);\n\ninterface FilterDrawerProps {\n  isOpen: boolean;\n  filteredCount: number;\n  topicName?: string;\n  isLoading?: boolean;\n  onClose: ModalProps['onClose'];\n  onClearFilters: () => void;\n}\n\nconst FilterDrawer: React.FC<PropsWithChildren<FilterDrawerProps>> = ({\n  isOpen,\n  onClose,\n  onClearFilters,\n  children,\n  topicName,\n  // isLoading,\n  filteredCount,\n}) => {\n  const classes = useStyles()\n\n  const handleClear = useCallback((evt: any) => {\n    if (onClearFilters) {\n      onClearFilters();\n    }\n    if (onClose) {\n      onClose(evt, 'escapeKeyDown');\n    }\n  }, [onClearFilters, onClose]);\n\n  const handleApply = useCallback((evt: any) => {\n    if (onClose) {\n      onClose(evt, 'escapeKeyDown');\n    }\n  }, [onClose]);\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      className={classes.filterDrawer}\n      open={isOpen}\n      onClose={onClose}\n      // transitionDuration={100}\n      ModalProps={{\n        BackdropProps: {\n          className: classes.filterDrawerBackdrop\n        }\n      }}\n    >\n      <div className={classes.filterDrawerContent}>\n        <h2 className={classes.filterHeading}>Filter <span className={classes.filteredCount}>{filteredCount} {topicName?.toLowerCase()}</span></h2>\n        <div className={classes.filters}>{children}</div>\n        <div className={classes.filterFooter}>\n          <DialogActions>\n            {/* <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <Button size=\"large\" autoFocus color=\"primary\" onClick={handleClear}>\n                  Clear\n                </Button>\n              </Grid>\n              <Grid item xs={6} className>\n                <Button size=\"large\" onClick={handleApply} variant=\"contained\" color=\"primary\">\n                  Apply\n                </Button>\n              </Grid>\n            </Grid> */}\n            <Button size=\"large\" color=\"primary\" onClick={handleClear}>\n              Clear\n            </Button>\n            <Button size=\"large\" onClick={handleApply} variant=\"contained\" color=\"primary\">\n              Apply\n            </Button>\n          </DialogActions>\n        </div>\n      </div>\n    </Drawer>\n  );\n}\n\nexport default FilterDrawer;\n","const isNullOrUndefined = (value: unknown): value is null | undefined => value == null;\n\nexport default isNullOrUndefined;","const isArray = <T>(value: unknown): value is T[] => Array.isArray(value);\n\nexport default isArray;","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nconst isObject = <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n\n export default isObject;\n ","import { EmptyObject } from 'types/resolvers';\nimport isObject from './isObject';\n\nconst isEmptyObject = (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n\nexport default isEmptyObject;","import DelayedLoader from '../DelayedLoader';\nimport FilterDrawer from './FilterDrawer';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n  } from 'react';\nimport {\n  // makeStyles,\n  // createStyles,\n  TableContainer,\n  Table as MuiTable,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableSortLabel,\n  TablePagination,\n  Toolbar,\n  Tooltip,\n  IconButton,\n} from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport isEmptyObject from 'utils/isEmptyObject';\n\nexport declare type CompareFn<T> = ((a: T, b: T, sortOrder?: 'ascend' | 'descend') => number);\n\nconst TableLoaderContainer = styled.div`\n  height: 4px;\n`\n\nconst TableHeadCellStyles = css`\n  border-bottom: 1px solid rgba(0,0,0,0.12);\n`;\n\nconst TableCellStyles = css`\n  padding: 10px 5px;\n  border-bottom: 1px solid rgba(0,0,0,0.12);\n  font-size: 14px;\n`;\n\nconst TableRowClickableStyles = css`\n  cursor: pointer;\n  &:hover {\n    td {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n  }\n`;\n\nconst TableHeadCellInnerStyles = css`\n  padding: 10px 5px;\n  width: 100%;\n  color: #777;\n  font-weight: normal;\n  display: inline-flex;\n  align-items: center;\n  flex-direction: inherit;\n  justify-content: flex-start;\n`;\n\nexport interface ColumnProps<T> {\n  title?: React.ReactNode;\n  dataIndex: keyof T;\n  render?: (value: any, record: T, index: number) => React.ReactNode;\n  align?: 'left' | 'right' | 'center';\n  // filters?: ColumnFilterItem[];\n  // onFilter?: (value: any, record: T) => boolean;\n  // filterMultiple?: boolean;\n  // filterDropdown?: React.ReactNode | ((props: Object) => React.ReactNode);\n  // filterDropdownVisible?: boolean;\n  // onFilterDropdownVisibleChange?: (visible: boolean) => void;\n  sortable?: boolean;\n  // sorter?: boolean | CompareFn<T>;\n  // defaultSortOrder?: 'ascend' | 'descend';\n  // colSpan?: number;\n  width?: string | number;\n  className?: string;\n  // fixed?: boolean | ('left' | 'right');\n  // filterIcon?: React.ReactNode;\n  // filteredValue?: any[];\n  filterComponent?: React.ReactNode;\n  // sortOrder?: SortOrder;\n  // children?: ColumnProps<T>[];\n  // onCellClick?: (record: T, event: any) => void;\n  // onCell?: (record: T) => any;\n  // onHeaderCell?: (props: ColumnProps<T>) => any;\n}\n\nexport declare type SortOrder = 'descend' | 'ascend';\n\nexport interface ListRequest<T> {\n  sort?: SortState<T>\n  // sortField?: string;\n  // sortOrder?: SortOrder;\n  filters?: FilterState<T>;\n  pageSize: number;\n  pageNumber: number;\n}\n\nexport const defaultListRequest: ListRequest<any> = {\n  pageNumber: 1,\n  pageSize: 1000,\n};\n\n\nexport interface ListItems<I extends object> {\n  isLoading: boolean;\n  items: I[];\n  hasRequested?: boolean;\n  totalCount: number;\n}\n\nexport interface PaginationProps {\n  total: number;\n  current: number;\n  pageSize: number;\n  // defaultCurrent?: number;\n  // defaultPageSize?: number;\n  // onChange?: (page: number, pageSize?: number) => void;\n  // hideOnSinglePage?: boolean;\n  // showSizeChanger?: boolean;\n  // pageSizeOptions?: string[];\n  // onShowSizeChange?: (current: number, size: number) => void;\n  // showQuickJumper?: boolean;\n  // showTotal?: (total: number, range: [number, number]) => React.ReactNode;\n  // size?: string;\n  // simple?: boolean;\n  // style?: CSSProperties;\n  // locale?: Object;\n  // className?: string;\n  // prefixCls?: string;\n  // selectPrefixCls?: string;\n  // itemRender?: (page: number, type: 'page' | 'prev' | 'next' | 'jump-prev' | 'jump-next') => React.ReactNode;\n  // role?: string;\n}\n\nexport interface SorterResult<T> {\n  column: ColumnProps<T>;\n  order: SortOrder;\n  field: string;\n  columnKey: string;\n}\n\nexport type SortState<T> = Partial<Record<keyof T, SortOrder>>;\nexport type FilterState<T> = Partial<Record<keyof T, string>>;\nexport type FilterKey<T> = keyof T;\n\nexport const defaultPaginationState: PaginationProps = {\n  total: 0,\n  current: 1,\n  pageSize: 10,\n}\nexport const defaultTableState: TableState<any> = {\n  pagination: defaultPaginationState,\n  filters: {},\n  sort: {}\n}\n\nexport interface TableState<T> {\n  pagination: PaginationProps;\n  filters: FilterState<T>;\n  sort: SortState<T>;\n};\n\nexport interface TableProps<T extends object> {\n  // localStorageStateKey: string;\n  height?: number;\n  frozenHeader?: boolean;\n  columns: ColumnProps<T>[];\n  data?: T[];\n  filterable?: boolean;\n  sort?: SortState<T>;\n  filters?: FilterState<T>;\n  isLoading?: boolean;\n  pagination?: PaginationProps;\n  onPaginationChange?: (paginationState: PaginationProps) => void;\n  onFilterChange?: (filterState: FilterState<T>) => void;\n  onSortChange?: (sortState: SortState<T>) => void;\n  onRowClick?: (record: T, evt: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;\n  rowClassName?: (record: T) => string;\n  onClearFilters?: () => void; \n  rowsPerPageOptions?: Array<number | { value: number; label: string }>\n  title?: string;\n  topic?: string;\n}\n\n// const useStyles = makeStyles(() =>\n//   createStyles({\n    // tableContainer: {\n    //   position: relative\n    // },\n    // tableLoader: {\n    //   // height: '4px',\n    // },\n    // tableToolbar: {\n      // paddingRight: theme.spacing(1),\n    // },\n    // tableTitle: {\n      // flex: '1 1 100%',\n      // margin: 0,\n    // },\n    // tableHeadCell: {\n      // padding: 0,\n      // textTransform: 'uppercase',\n      // backgroundColor: '#f2f2f2',\n      // fontSize: '10px',\n      // color: '#111',\n      // fontWeight: 'bold',\n    // },\n    // tableHeadCellInner: {\n      // padding: '6px 10px',\n      // width: '100%',\n      // display: 'inline-flex',\n      // alignItems: 'center',\n      // flexDirection: 'inherit',\n      // justifyContent: 'flex-start',\n    // },\n    // tableHeadCellSortable: {\n      // '&:hover': {\n      //   cursor: 'pointer',\n      //   backgroundColor: '#ddd',\n      // }\n    // },\n    // tableRowClickable: {\n      // cursor: 'pointer',\n      // '&:hover > td': {\n      //   backgroundColor: '#e7f6ff',\n      // }\n    // },\n//   }),\n// );\n\nexport function Table<T extends object>(props: TableProps<T>): React.ReactElement {\n  const {\n    // localStorageStateKey,\n    frozenHeader,\n    height,\n    columns,\n    data,\n    onPaginationChange,\n    onSortChange,\n    onRowClick,\n    pagination,\n    sort,\n    filters,\n    filterable,\n    isLoading,\n    rowsPerPageOptions = [10, 15, 20, 25],\n    title,\n    topic,\n    onClearFilters,\n    // onClick,\n  } = props\n\n  // const classes = useStyles()\n  // const initialSortState = columns.map(column => )\n  const [sortState, setSortState] = useState<SortState<T>>(sort || {});\n  // const [filterState, setFilterState] = useState<FilterState<T>>(filters || {});\n  const [paginationState, setPaginationState] = useState<PaginationProps>(pagination || defaultPaginationState);\n  const [filtersDrawerOpen, setFiltersDrawerOpen]= useState(false);\n\n  useEffect(() => {\n    if (pagination) {\n      setPaginationState(pagination)\n    }\n  }, [pagination])\n\n  const handleChangePage = useCallback((_evt: unknown, newPage: number) => {\n    const newPaginationState: PaginationProps = {\n      ...paginationState,\n      current: newPage + 1,\n    }\n    setPaginationState(newPaginationState);\n    onPaginationChange && onPaginationChange(newPaginationState)\n  }, [paginationState, onPaginationChange]);\n\n  const handleChangeRowsPerPage = useCallback((evt: React.ChangeEvent<HTMLInputElement>) => {\n    const newPaginationState: PaginationProps = {\n      ...paginationState,\n      pageSize: +evt.target.value,\n      current: 1,\n    }\n    setPaginationState(newPaginationState);\n    onPaginationChange && onPaginationChange(newPaginationState);\n  }, [paginationState, onPaginationChange]);;\n\n  const handleRowClick = useCallback((record: T, evt: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\n    if (onRowClick) {\n      onRowClick(record, evt);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onRowClick]);\n\n  const handleFilterClick = () => {\n    setFiltersDrawerOpen(true);\n  };\n\n  const rowClassName = useMemo(() => {\n    return !!onRowClick ? TableRowClickableStyles : undefined;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onRowClick])\n\n  const tableHeaders = useMemo(() => (\n    <TableRow>\n      {columns.map((column, index) => {\n        const columnSortState = sortState[column.dataIndex];\n        const columnDataIndex = column.dataIndex;\n        return (\n          <TableCell\n            classes={{\n              root: TableHeadCellStyles,\n            }}\n            // className={clsx(\n            //   // classes.tableHeadCell,\n            //   {[classes.tableHeadCellSortable]: column.sortable},\n            // )}\n            width={column.width}\n            key={index}\n          >\n            {\n              column.sortable ?\n              <TableSortLabel\n                className={TableHeadCellInnerStyles}\n                active={!!columnSortState}\n                direction={columnSortState ? columnSortState === 'descend' ? 'desc' : 'asc' : undefined}\n                onClick={() => {\n                  let newSortState: SortState<T> = {};\n                  if (columnSortState !== 'descend') {\n                    newSortState = {\n                      [columnDataIndex]: !columnSortState ? 'ascend' : 'descend',\n                    } as SortState<T>;\n                  }\n                  setSortState(newSortState)\n                  onSortChange && onSortChange(newSortState)\n                }}\n              >\n                {column.title}\n              </TableSortLabel> :\n              <span className={TableHeadCellInnerStyles}>{column.title}</span>\n            }\n          </TableCell>\n          )\n        }\n      )}\n    </TableRow>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  ), [columns, onSortChange, sortState]);\n\n  const rowCells = useMemo(\n    () =>\n      data?.map((row: T, i) => {\n        return (\n          <TableRow\n            key={i}\n            onClick={(evt: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => {\n              handleRowClick(row, evt);\n            }}\n            className={rowClassName}\n          >\n            {columns.map((column, index) => \n              <TableCell className={TableCellStyles} key={index}>\n                {column.render ? column.render(((row as any)[column.dataIndex]), row, index) : ((row as any)[column.dataIndex])}\n              </TableCell>\n            )}\n          </TableRow>\n        )\n      }),\n    [columns, data, handleRowClick, rowClassName]\n  );\n\n  const filterComponents = useMemo(\n    () => (\n      columns.map((column, index) => (\n        column.filterComponent &&\n        <React.Fragment key={index}>{column.filterComponent}</React.Fragment>\n      ))\n    ),\n    [columns],\n  )\n\n  const hasFilters = useMemo(\n    () => !isEmptyObject(filters),\n    [filters],\n  )\n\n  return (\n    <>\n      {\n        (title || filterable) &&\n        <Toolbar variant=\"dense\">\n          <h2>{title}</h2>\n          {\n            filterable &&\n            <Tooltip title=\"Filter\">\n              <IconButton\n                onClick={handleFilterClick}\n                aria-label=\"filter list\"\n                color={hasFilters ? \"primary\" : undefined}\n              >\n                <FilterListIcon />\n              </IconButton>\n            </Tooltip>\n          }\n        </Toolbar>\n      }\n      <TableLoaderContainer>{ isLoading && <DelayedLoader />}</TableLoaderContainer>\n      <TableContainer style={{ maxHeight: height }}>\n        <MuiTable stickyHeader={frozenHeader}>\n          <TableHead>{tableHeaders}</TableHead>\n          <TableBody>\n            {rowCells}\n          </TableBody>\n        </MuiTable>\n      </TableContainer>\n      {\n        (!!pagination) &&\n        <TablePagination\n          rowsPerPageOptions={rowsPerPageOptions}\n          count={pagination.total}\n          rowsPerPage={pagination.pageSize}\n          page={pagination.current - 1}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      }\n      {\n        (filterable && onClearFilters) &&\n        <FilterDrawer\n          filteredCount={pagination?.total || 0}\n          topicName={topic}\n          isOpen={filtersDrawerOpen}\n          onClose={() => setFiltersDrawerOpen(false)}\n          onClearFilters={onClearFilters}\n        >\n          {filterComponents}\n        </FilterDrawer>\n      }\n    </>\n  )\n}\n","\n\n\nexport enum AccountAccessType {\n  None = 0,\n  View = 1,\n  Editor = 3,\n  Admin = 5,\n}\n\nexport const AccountAccessTypeLabels = new Map<AccountAccessType, string>([\n  [AccountAccessType.View, 'Viewer'],\n  [AccountAccessType.Editor, 'Editor'],\n  [AccountAccessType.Admin, 'Owner'],\n]);\n","\n\n\nexport enum AccountStatus {\n  None = 0,\n  Invited = 1,\n  Active = 3,\n}\n\nexport const AccountStatusLabels = new Map<AccountStatus, string>([\n  [AccountStatus.Invited, 'Invited'],\n  [AccountStatus.Active, 'Active'],\n]);\n","import * as ColorHash from 'color-hash';\n\n// const colorHash = new ColorHash({ lightness: [0.3, 0.45, 0.6] });\n// const colorHash = new ColorHash({ lightness: [0.4, 0.4, 0.6] });\nconst colorHash = new ColorHash({ lightness: 0.45 });\n\nexport const stringToHslColor = (value: string, saturation: number, lightness: number) => {\n  let hash = 0;\n  for (var i = 0; i < value.length; i++) {\n    hash = value.charCodeAt(i) + ((hash << 5) - hash);\n    // hash = value.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  const hex = hash % 360;\n  return `hsl(${hex}, ${saturation}%, ${lightness}%)`;\n}\n\nexport const avatarColor = (value: string) => colorHash.hex(value)\n\n// export const avatarColor = (value: string) => stringToHslColor(value, 50, 50)\n\n// const hslGenerator = (value: string, saturation: number, lightness: number) => {\n//   const [...valueChars] = value;\n//   const hash = valueChars.reduce((a, c) => {\n//     const h = c.charCodeAt(0) + (a << 2) — a)\n//     return h % 360;\n//   }, 0);\n//   return `hsl(${hash}, ${saturation}%, ${lightness}%)`;\n// }\n","import React from 'react';\nimport { Control, Controller } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MuiCheckbox from '@material-ui/core/Checkbox';\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  // color?: 'primary' | 'secondary' | 'default';\n}\n\nconst CheckboxField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    // color,\n    label\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      render={({ onChange, onBlur, value }) => (\n        <FormControlLabel\n          label={label}\n          control={\n            <MuiCheckbox\n              id={id}\n              onChange={(event) => onChange(event.target.checked)}\n              onBlur={onBlur}\n              checked={value}\n              // color={color ?? 'primary'}\n            />\n          }\n        />\n      )}\n    />\n  );\n};\n\nexport default CheckboxField;\n","import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport AssignableUser from 'types/AssignableUser';\nimport { css } from 'emotion';\nimport React from 'react';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n  margin-bottom: 0.5em;\n`;\n\nconst UserMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst allUsers: AssignableUser[] = [\n  {\n    id: 3,\n    name: 'Kim Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    id: 2,\n    name: 'Saul Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    id: 1,\n    name: 'Walter White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<AssignableUser>();\n\ninterface UserAssignFieldProps {\n  value: AssignableUser | null;\n  onChange: (user: AssignableUser | null) => void;\n}\n\nconst UserAssignField = ({ value, onChange }: UserAssignFieldProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allUsers}\n      getOptionSelected={(option: AssignableUser, value: AssignableUser) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          value.id === 0 && !value.inputValue ? \n          <span>\n            <UserMatch>\n              <Email>{value.email}</Email>\n            </UserMatch>\n          </span> :\n          <li {...props}>\n            <UserMatch>\n              <Name>{value.name}</Name>\n              <Email>{value.email}</Email>\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </UserMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.name} ${option.email} ${option.mobile}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            id: 0,\n            name: newValue,\n            email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        // Suggest the creation of a new value\n        if (params.inputValue !== '') {\n          if (params.inputValue.indexOf('@') > -1) {\n            filtered.push({\n              inputValue: params.inputValue,\n              id: 0,\n              name: '',\n              email: `Add \"${params.inputValue}\"`\n            });\n          // } else {\n          //   filtered.push({\n          //     // inputValue: params.inputValue,\n          //     id: 0,\n          //     name: '',\n          //     email: 'Type email address to Add'\n          //   });\n          }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find or create user', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default UserAssignField;\n","// import styled from '@emotion/styled';\nimport {\n  Button,\n  Chip,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport CheckboxField from 'components/form/CheckBoxField';\nimport TextField from 'components/form/TextField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport AssignableUser from 'types/AssignableUser';\nimport UserAssignField from './UserAssignField';\n\nconst ContentStyle = css`\n  width: 350px;\n  min-height: 175px;\n`\n\nconst SelectedUserChipLabelStyle = css`\n  font-size: 14px;\n`\n\ninterface NewAccountUserForm {\n  AccessType: SelectOption<AccountAccessType>;\n  Message: string;\n  GivenName: string;\n  FamilyName: string;\n  SendNotification: boolean;\n}\n\nconst defaultValues: NewAccountUserForm = {\n  AccessType: { label: AccountAccessTypeLabels.get(AccountAccessType.Editor)!, value: AccountAccessType.Editor },\n  Message: '',\n  SendNotification: false,\n  GivenName: '',\n  FamilyName: '',\n}\n\nconst accountAccessTypeOptions = [...AccountAccessTypeLabels.entries()].map(([accountAccessType, label]) => \n  ({ label: label, value: accountAccessType })\n);\n\nexport interface NewAccountUserDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (accountUser: NewAccountUserForm) => void;\n}\n\nfunction NewAccountUserDialog({ isOpen, onClose, onSubmit }: NewAccountUserDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n  const [selectedUser, setSelectedUser] = useState<AssignableUser | null>(null);\n\n  const methods = useForm<NewAccountForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  const {\n    handleSubmit,\n    control,\n    watch,\n    // getValues,\n  } = methods;\n\n  const sendNotification = watch('SendNotification') === true;\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function reset() {\n    setSelectedUser(null);\n  }\n\n  function onModalOK() {\n    // onSubmit(getValues('FindAbn'));\n  }\n\n  function onSelectionRemove() {\n    setSelectedUser(null);\n  }\n  \n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        New Account User\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <form onSubmit={handleSubmit(() => {})}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              {\n                (selectedUser) ?\n                <Chip\n                  classes={{ label: SelectedUserChipLabelStyle }}\n                  label={selectedUser.inputValue ? selectedUser.inputValue : selectedUser.name}\n                  onDelete={onSelectionRemove}\n                  // variant=\"outlined\"\n                />\n                :\n                <UserAssignField\n                  value={selectedUser}\n                  onChange={setSelectedUser}\n                />\n              }\n            </Grid>\n\n            {\n              !!selectedUser &&\n              <React.Fragment>\n                {\n                  !!selectedUser.inputValue &&\n                  <Grid item container spacing={1}>\n                    <Grid item xs={6}>\n                      <TextField\n                        autoFocus\n                        name=\"GivenName\"\n                        label=\"First Name\"\n                        control={control}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <TextField\n                        name=\"FamilyName\"\n                        label=\"Family Name\"\n                        control={control}\n                      />\n                    </Grid>\n                  </Grid>\n                }\n                <Grid item xs={12}>\n                  <AutoCompleteField\n                    name=\"AccessType\"\n                    disableClearable\n                    control={control}\n                    label=\"Access\"\n                    options={accountAccessTypeOptions}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <CheckboxField\n                    name=\"SendNotification\"\n                    control={control}\n                    label=\"Notify\"\n                  />\n                </Grid>\n                {\n                  sendNotification &&\n                  <Grid item xs={12}>\n                    <TextField\n                      autoFocus\n                      name=\"Message\"\n                      control={control}\n                      multiline\n                      minRows={3}\n                      label=\"Message\"\n                    />\n                </Grid>\n                }\n              </React.Fragment>\n            }\n          </Grid>\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" onClick={onModalOK}>\n          { sendNotification ? 'Send' : 'Assign'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default NewAccountUserDialog;\n","// import styled from '@emotion/styled';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport AccountUser from 'types/AccountUser';\n\nconst ContentStyle = css`\n  width: 350px;\n`\n\ninterface EditAccountForm {\n  AccessType: SelectOption<AccountAccessType>;\n}\n\nconst defaultValues: EditAccountForm = {\n  AccessType: { label: AccountAccessTypeLabels.get(AccountAccessType.Editor)!, value: AccountAccessType.Editor },\n}\n\nconst accountAccessTypeOptions = [...AccountAccessTypeLabels.entries()].map(([accountAccessType, label]) => \n  ({ label: label, value: accountAccessType })\n);\n\nexport interface EditAccountUserDialogProps {\n  isOpen: boolean;\n  accountUser: AccountUser;\n  onClose: () => void;\n  onSubmit: () => void;\n}\n\nfunction EditAccountUserDialog({ isOpen, onClose, onSubmit, accountUser }: EditAccountUserDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))\n\n  const methods = useForm<EditAccountForm>({\n    defaultValues: {\n      ...defaultValues,\n      AccessType: { label: AccountAccessTypeLabels.get(accountUser.accessType)!, value: accountUser.accessType }\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n    formState: { isDirty },\n    // watch,\n    // getValues,\n  } = methods;\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onClose();\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {accountUser.name}\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <form onSubmit={handleSubmit(() => {})}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <AutoCompleteField\n                name=\"AccessType\"\n                disableClearable\n                control={control}\n                label=\"Access\"\n                options={accountAccessTypeOptions}\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!isDirty} onClick={onModalOK}>\n          Update\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default EditAccountUserDialog;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport styled from '@emotion/styled';\nimport { Avatar, Chip, Fab, Grid, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport PaddedContainer from 'components/PaddedContainer';\nimport { ColumnProps, Table } from 'components/table/Table';\nimport { css } from 'emotion';\nimport React, { useState } from 'react';\nimport { MdAdd } from 'react-icons/md';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport { AccountStatus, AccountStatusLabels } from 'types/AccountStatus';\nimport AccountUser from 'types/AccountUser';\nimport { avatarColor } from 'utils/color';\nimport { initials } from 'utils/initials';\nimport { FiClock } from 'react-icons/fi';\nimport NewAccountUserDialog from 'components/organisms/NewAccountUserDialog';\nimport EditAccountUserDialog from 'components/organisms/EditAccountUserDialog';\n\nconst NewButtonStyle = css`\n  font-size: 2em;\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`;\n\nconst ListItemStyle = css`\n  padding: 16px;\n  border-bottom: 1px solid rgba(0,0,0,0.12);\n\n  .MuiListItemAvatar-root {\n    min-width: 56px;\n  }\n`;\n\nconst SecondaryDetails = styled.div`\n  font-size: 13px;\n  margin-top: 10px;\n  line-height: 1.7em;\n  color: #777;\n`;\n\nconst Email = styled.div`\n`\n\nconst Name = styled.div`\n  font-size: 20px;\n`\n\nconst Mobile = styled.div`\n`\n\nconst data: AccountUser[] = [\n  {\n    id: 1,\n    name: 'Walter White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012',\n    accessType: AccountAccessType.Admin,\n    status: AccountStatus.Active,\n  },\n  {\n    id: 2,\n    name: 'Saul Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n    accessType: AccountAccessType.Editor,\n    status: AccountStatus.Invited,\n  },\n  {\n    id: 3,\n    name: 'Kim Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n    accessType: AccountAccessType.View,\n    status: AccountStatus.Active,\n  }\n]\n\nconst columns: ColumnProps<AccountUser>[] = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n  {\n    title: 'Mobile',\n    dataIndex: 'mobile',\n  },\n  {\n    title: 'Role',\n    dataIndex: 'accessType',\n    render: (value, record) => AccountAccessTypeLabels.get(value)\n  },\n  {\n    title: '',\n    dataIndex: 'status',\n    render: (value, record) => AccountStatusLabels.get(value)\n  },\n];\n\n\nfunction Users() {\n  const [isNewAccountUserModalOpen, setIsNewAccountUserModalOpen] = useState(false);\n  const [isEditAccountUserModalOpen, setIsEditAccountUserModalOpen] = useState(false);\n  const [selectedAccountUser, setSelectedAccountUser] = useState<AccountUser | undefined>(undefined);\n\n  const onNewButtonClick = () => {\n    setIsNewAccountUserModalOpen(true);\n  }\n\n  const onNewAccountUserModalClose = () => {\n    setIsNewAccountUserModalOpen(false);\n  }\n\n  const onNewAccountUserModalOK = () => {\n    setIsNewAccountUserModalOpen(false);\n  }\n\n  const onEditAccountUserModalClose = () => {\n    setSelectedAccountUser(undefined);\n    setIsEditAccountUserModalOpen(false);\n  }\n\n  const onEditAccountUserModalOK = () => {\n    setSelectedAccountUser(undefined);\n    setIsEditAccountUserModalOpen(false);\n  }\n\n  const handleRowClick = (row: AccountUser) => {\n    setSelectedAccountUser(row);\n    setIsEditAccountUserModalOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <PaddedContainer style={{ display: 'none '}}>\n        <Table<AccountUser>\n          // height={720}\n          // frozenHeader\n          // localStorageStateKey='client'\n          // data={data?.items}\n          data={data}\n          columns={columns}\n          // sort={sortState}\n          // filters={filterState}\n          // pagination={paginationState}\n          onRowClick={handleRowClick}\n          // onPaginationChange={setPaginationState}\n          // onSortChange={setSortState}\n          // onFilterChange={setFilterState}\n        />\n      </PaddedContainer>\n      <List>\n        {\n          data.map((accountUser, index) => \n            <ListItem button key={index} alignItems=\"flex-start\" className={ListItemStyle} onClick={() => handleRowClick(accountUser)}>\n              <ListItemAvatar>\n                <Avatar alt={accountUser.name} style={{ backgroundColor: avatarColor(accountUser.name)}}>{initials(accountUser.name)}</Avatar>\n              </ListItemAvatar>\n              <ListItemText>\n                <Grid container spacing={2}>\n                  <Grid item xs={8}>\n                    <Name>{accountUser.name}</Name>\n                    <SecondaryDetails>\n                      <Email>{accountUser.email}</Email>\n                      <Mobile>{accountUser.mobile}</Mobile>\n                    </SecondaryDetails>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Chip\n                      avatar={accountUser.status === AccountStatus.Invited ? <FiClock/> : undefined}\n                      label={AccountAccessTypeLabels.get(accountUser.accessType)}\n                      variant={accountUser.accessType === AccountAccessType.Admin ? \"filled\" : \"outlined\"}\n                      color={accountUser.accessType === AccountAccessType.View ? undefined : \"primary\"}\n                    />\n                  </Grid>\n                </Grid>\n              </ListItemText>\n            </ListItem>,\n          )\n        }\n        {/* {\n          ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'].map((value, index) =>\n            <ListItem button key={index} alignItems=\"flex-start\" className={ListItemStyle}>\n              <Avatar alt={value} style={{ backgroundColor: avatarColor(value)}}>{initials(value)}</Avatar>\n             </ListItem>,\n          )\n        } */}\n      </List>\n      <NewAccountUserDialog\n        isOpen={isNewAccountUserModalOpen}\n        onClose={onNewAccountUserModalClose}\n        onSubmit={onNewAccountUserModalOK}\n      />\n      {\n        !!selectedAccountUser &&\n        <EditAccountUserDialog\n          accountUser={selectedAccountUser}\n          isOpen={isEditAccountUserModalOpen}\n          onClose={onEditAccountUserModalClose}\n          onSubmit={onEditAccountUserModalOK}\n        />\n      }\n      <Fab aria-label=\"add\" color=\"primary\" className={NewButtonStyle} onClick={onNewButtonClick}>\n        <MdAdd />\n      </Fab>\n    </React.Fragment>\n  )\n}\n\nexport default Users;\n","\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')"],"sourceRoot":""}