{"version":3,"sources":["../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/unique.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isString.ts","../../src/utils/deepMerge.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isSameError.ts","../../src/logic/shouldRenderBasedOnError.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/isPrimitive.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/deepEqual.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","mutationWatcher","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","disconnect","deepMerge","target","source","targetValue","sourceValue","search","output","isString","startsWith","find","transformToNestObject","error","types","message","every","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isSameError","RegExp","validationData","isRegex","getValidateError","isMessage","validateAllFieldCriteria","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","criteriaMode","React.useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","dirtyFieldsRef","watchFieldsRef","Set","watchFieldsHookRef","watchFieldsHookRenderRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","React.useState","render","modeRef","modeChecker","isValidateAllFieldCriteria","readFormStateRef","isDirty","dirtyFields","submitCount","touched","isSubmitting","reRender","React.useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","isNameInFieldArray","previousIsDirty","getValues","getFieldArrayParentName","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","isFieldWatched","renderWatchedInputs","found","size","setValue","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","removeFieldEventListenerAndRef","clearErrors","inputName","setError","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","formState","commonProps","prop","control","FormContext","React.createContext","displayName","useFormContext","React.useContext","FormProvider","children","props","React.createElement","Provider","Controller","as","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","defineProperty","onBlur","onChange","React.isValidElement","React.cloneElement"],"mappings":"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","file":"static/js/2.5c016a80.chunk.js","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  SubmitErrorHandler,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n            isTouched: !!get(touchedFieldsRef.current, name),\n            ...modeRef.current,\n          });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted: isSubmittedRef.current,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}