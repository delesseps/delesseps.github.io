{"version":3,"sources":["components/form/AutoCompleteField.tsx","../node_modules/@material-ui/core/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/DialogContent/DialogContent.js","components/organisms/EditAccountUserDialog.tsx"],"names":["TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","DialogTitle","React","ref","children","classes","disableTypography","other","_objectWithoutPropertiesLoose","_extends","clsx","root","Typography","component","variant","withStyles","margin","padding","flex","DialogContent","dividers","theme","WebkitOverflowScrolling","overflowY","paddingTop","borderTop","palette","divider","borderBottom","ContentStyle","defaultValues","AccessType","AccountAccessTypeLabels","get","AccountAccessType","Editor","accountAccessTypeOptions","entries","map","accountAccessType","EditAccountUserDialog","isOpen","onClose","accountUser","onSubmit","useTheme","fullScreen","useMediaQuery","breakpoints","down","methods","useForm","accessType","mode","handleSubmit","isDirty","formState","onModalClose","open","aria-labelledby","aria-describedby","container","spacing","item","xs","onClick","disabled"],"mappings":"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","file":"static/js/18.a7a8a7d0.chunk.js","sourcesContent":["import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disableTypography = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   * @default false\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    WebkitOverflowScrolling: 'touch',\n    // Add iOS momentum scrolling.\n    overflowY: 'auto',\n    padding: '8px 24px',\n    '&:first-child': {\n      // dialog without title\n      paddingTop: 20\n    }\n  },\n\n  /* Styles applied to the root element if `dividers={true}`. */\n  dividers: {\n    padding: '16px 24px',\n    borderTop: `1px solid ${theme.palette.divider}`,\n    borderBottom: `1px solid ${theme.palette.divider}`\n  }\n});\nconst DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\n  const {\n    classes,\n    className,\n    dividers = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"dividers\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dividers && classes.dividers),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display the top and bottom dividers.\n   * @default false\n   */\n  dividers: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContent'\n})(DialogContent);","// import styled from '@emotion/styled';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport AccountUser from 'types/AccountUser';\n\nconst ContentStyle = css`\n  width: 350px;\n`\n\ninterface EditAccountForm {\n  AccessType: SelectOption<AccountAccessType>;\n}\n\nconst defaultValues: EditAccountForm = {\n  AccessType: { label: AccountAccessTypeLabels.get(AccountAccessType.Editor)!, value: AccountAccessType.Editor },\n}\n\nconst accountAccessTypeOptions = [...AccountAccessTypeLabels.entries()].map(([accountAccessType, label]) => \n  ({ label: label, value: accountAccessType })\n);\n\nexport interface EditAccountUserDialogProps {\n  isOpen: boolean;\n  accountUser: AccountUser;\n  onClose: () => void;\n  onSubmit: () => void;\n}\n\nfunction EditAccountUserDialog({ isOpen, onClose, onSubmit, accountUser }: EditAccountUserDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  const methods = useForm<EditAccountForm>({\n    defaultValues: {\n      ...defaultValues,\n      AccessType: { label: AccountAccessTypeLabels.get(accountUser.accessType)!, value: accountUser.accessType }\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n    formState: { isDirty },\n    // watch,\n    // getValues,\n  } = methods;\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onClose();\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {accountUser.name}\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <form onSubmit={handleSubmit(() => {})}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <AutoCompleteField\n                name=\"AccessType\"\n                disableClearable\n                control={control}\n                label=\"Access\"\n                options={accountAccessTypeOptions}\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!isDirty} onClick={onModalOK}>\n          Update\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default EditAccountUserDialog;\n"],"sourceRoot":""}