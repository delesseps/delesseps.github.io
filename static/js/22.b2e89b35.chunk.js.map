{"version":3,"sources":["components/form/AutoCompleteField.tsx","../node_modules/@material-ui/core/FormControl/FormControl.js","../node_modules/@material-ui/core/InputLabel/InputLabel.js","../node_modules/@material-ui/core/FormLabel/FormLabel.js","../node_modules/@material-ui/core/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/DialogContent/DialogContent.js","components/organisms/EditAccountUserDialog.tsx"],"names":["TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","selectedValueWithLabel","find","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","undefined","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","FormControl","React","ref","children","classes","color","component","Component","disabled","fullWidth","visuallyFocused","focused","hiddenLabel","margin","required","size","variant","other","_objectWithoutPropertiesLoose","initialAdornedStart","forEach","child","isMuiElement","input","isAdornedStart","adornedStart","setAdornedStart","initialFilled","isFilled","filled","setFilled","focusedState","setFocused","onFilled","childContext","onEmpty","onFocus","registerEffect","FormControlContext","Provider","_extends","clsx","root","capitalize","withStyles","display","flexDirection","position","minWidth","padding","border","verticalAlign","marginNormal","marginTop","marginBottom","marginDense","width","InputLabel","disableAnimation","shrinkProp","muiFormControl","useFormControl","fcs","formControlState","states","FormLabel","formControl","animated","outlined","asterisk","theme","transformOrigin","left","top","transform","transition","transitions","create","duration","shorter","easing","easeOut","zIndex","pointerEvents","palette","text","secondary","typography","body1","lineHeight","primary","main","colorSecondary","DialogTitle","disableTypography","Typography","flex","DialogContent","dividers","WebkitOverflowScrolling","overflowY","paddingTop","borderTop","divider","borderBottom","ContentStyle","defaultValues","accessType","AccountAccessType","Editor","accountAccessTypeOptions","AccountAccessTypeLabels","entries","map","accountAccessType","EditAccountUserDialog","isOpen","onClose","accountUser","onSubmit","useTheme","fullScreen","useMediaQuery","breakpoints","down","useForm","mode","isDirty","formState","onModalClose","open","aria-labelledby","aria-describedby","container","spacing","item","xs","onClick"],"mappings":"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","file":"static/js/22.b2e89b35.chunk.js","sourcesContent":["import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\ninterface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        const selectedValueWithLabel = options.find(option => option?.value === value) || null;\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) =>\n              value ? option.value === value.value : false\n            }\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            // value={value}\n            value={selectedValueWithLabel}\n            onChange={(evt, newValue) =>\n              onChange(!!newValue && newValue.value ? newValue.value : undefined)\n            }\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n */\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'primary',\n    component: Component = 'div',\n    disabled = false,\n    error = false,\n    fullWidth = false,\n    focused: visuallyFocused,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size,\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  });\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = visuallyFocused !== undefined ? visuallyFocused : focusedState;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  let registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant\n  };\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[`margin${capitalize(margin)}`], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    transformOrigin: 'top left'\n  },\n\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n\n  /* Pseudo-class applied to the asterisk element. */\n  asterisk: {},\n\n  /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n  formControl: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    // slight alteration to spec spacing to match visual spec result\n    transform: 'translate(0, 24px) scale(1)'\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    // Compensation for the `Input.inputDense` style.\n    transform: 'translate(0, 21px) scale(1)'\n  },\n\n  /* Styles applied to the `input` element if `shrink={true}`. */\n  shrink: {\n    transform: 'translate(0, 1.5px) scale(0.75)',\n    transformOrigin: 'top left'\n  },\n\n  /* Styles applied to the `input` element if `disableAnimation={false}`. */\n  animated: {\n    transition: theme.transitions.create(['color', 'transform'], {\n      duration: theme.transitions.duration.shorter,\n      easing: theme.transitions.easing.easeOut\n    })\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    // Chrome's autofill feature gives the input field a yellow background.\n    // Since the input field is behind the label in the HTML tree,\n    // the input field is drawn last and hides the label with an opaque background color.\n    // zIndex: 1 will raise the label above opaque background-colors of input.\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(12px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(12px, 17px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(12px, 10px) scale(0.75)',\n      '&$marginDense': {\n        transform: 'translate(12px, 7px) scale(0.75)'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    // see comment above on filled.zIndex\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(14px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(14px, 12px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(14px, -6px) scale(0.75)'\n    }\n  }\n});\nconst InputLabel = /*#__PURE__*/React.forwardRef(function InputLabel(props, ref) {\n  const {\n    classes,\n    className,\n    disableAnimation = false,\n    shrink: shrinkProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  const muiFormControl = useFormControl();\n  let shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return /*#__PURE__*/React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {\n      'filled': classes.filled,\n      'outlined': classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   * @default false\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _extends({\n    color: theme.palette.text.secondary\n  }, theme.typography.body1, {\n    lineHeight: 1,\n    padding: 0,\n    '&$focused': {\n      color: theme.palette.primary.main\n    },\n    '&$disabled': {\n      color: theme.palette.text.disabled\n    },\n    '&$error': {\n      color: theme.palette.error.main\n    }\n  }),\n\n  /* Styles applied to the root element if the color is secondary. */\n  colorSecondary: {\n    '&$focused': {\n      color: theme.palette.secondary.main\n    }\n  },\n\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n\n  /* Pseudo-class applied to the root element if `filled={true}`. */\n  filled: {},\n\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n\n  /* Styles applied to the asterisk element. */\n  asterisk: {\n    '&$error': {\n      color: theme.palette.error.main\n    }\n  }\n});\nconst FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'label'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[`color${capitalize(fcs.color || 'primary')}`], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    disableTypography = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   * @default false\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    WebkitOverflowScrolling: 'touch',\n    // Add iOS momentum scrolling.\n    overflowY: 'auto',\n    padding: '8px 24px',\n    '&:first-child': {\n      // dialog without title\n      paddingTop: 20\n    }\n  },\n\n  /* Styles applied to the root element if `dividers={true}`. */\n  dividers: {\n    padding: '16px 24px',\n    borderTop: `1px solid ${theme.palette.divider}`,\n    borderBottom: `1px solid ${theme.palette.divider}`\n  }\n});\nconst DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\n  const {\n    classes,\n    className,\n    dividers = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"dividers\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dividers && classes.dividers),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display the top and bottom dividers.\n   * @default false\n   */\n  dividers: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContent'\n})(DialogContent);","// import styled from '@emotion/styled';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport AutoCompleteField from 'components/form/AutoCompleteField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AccountAccessType, AccountAccessTypeLabels } from 'types/AccountAccessType';\nimport AccountUser from 'types/AccountUser';\n\nconst ContentStyle = css`\n  width: 350px;\n`\n\ninterface EditAccountForm {\n  accessType?: AccountAccessType;\n}\n\nconst defaultValues: EditAccountForm = {\n  accessType: AccountAccessType.Editor,\n}\n\nconst accountAccessTypeOptions = [...AccountAccessTypeLabels.entries()].map(([accountAccessType, label]) => \n  ({ label: label, value: accountAccessType })\n);\n\nexport interface EditAccountUserDialogProps {\n  isOpen: boolean;\n  accountUser: AccountUser;\n  onClose: () => void;\n  onSubmit: () => void;\n}\n\nfunction EditAccountUserDialog({ isOpen, onClose, onSubmit, accountUser }: EditAccountUserDialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n\n  const { control, formState: { isDirty } } = useForm<EditAccountForm>({\n    defaultValues: {\n      ...defaultValues,\n      ...accountUser,\n    },\n    mode: 'onChange',\n  });\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    onClose();\n  }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {accountUser.name}\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <AutoCompleteField\n              name=\"accessType\"\n              disableClearable\n              control={control}\n              label=\"Access\"\n              options={accountAccessTypeOptions}\n              rules={ { required: 'Required' } }\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!isDirty} onClick={onModalOK}>\n          Update\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default EditAccountUserDialog;\n"],"sourceRoot":""}