{"version":3,"sources":["components/organisms/PersonPicker.tsx","components/organisms/NewPersonDetails.tsx","components/form/DateField.tsx","components/organisms/DirectorshipDetails.tsx","components/organisms/DirectorFormPanel.tsx","components/organisms/AddDirectorDialog.tsx"],"names":["Name","styled","span","EntityMatch","Email","Mobile","ListBoxStyles","css","TextFieldStyle","allPersonEntities","firstGivenName","familyName","email","mobile","filter","createFilterOptions","PersonPicker","value","onChange","Autocomplete","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","props","state","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","inputValue","otherGivenName","evt","newValue","nameParts","split","substring","length","filterOptions","params","filtered","noSpaces","push","renderInput","InputLabelProps","InputProps","rest","TextField","autoFocus","className","shrink","placeholder","NewPersonDetails","control","useFormContext","Grid","container","spacing","alignItems","item","xs","md","name","label","LabelStyle","DatePickerStyles","DialogStyles","DateField","rules","disabled","FormControl","fullWidth","InputLabel","utils","DateFnsUtils","render","onBlur","autoOk","DialogProps","showTodayButton","format","DirectorshipDetails","SectionHeading","DirectorFormPanel","ref","director","onDirtyChange","methods","useForm","defaultValues","FirstGivenName","OtherGivenName","FamilyName","AppointmentDate","CeaseDate","mode","isDirty","formState","getValues","getFormValues","React","useImperativeHandle","useEffect","forwardRef","ContentStyle","bp","sm","AddDirectorDialog","isOpen","onClose","onSubmit","useState","selectedPerson","setSelectedPerson","setIsDirty","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","directorFormRef","useRef","reset","onModalClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogActions","Button","onClick","variant","current"],"mappings":"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","file":"static/js/22.c071a55e.chunk.js","sourcesContent":["import { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Person from 'types/Person';\nimport { noSpaces } from 'utils/string';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Email = styled.span`\n  margin-top: 0.5em;\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst Mobile = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface PersonInput extends Person {\n  inputValue?: string;\n}\n\nconst allPersonEntities: PersonInput[] = [\n  {\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012'\n  }\n];\n\nconst filter = createFilterOptions<PersonInput>();\n\ninterface PersonPickerProps {\n  value: PersonInput | null;\n  onChange: (tradingEntity: PersonInput | null) => void;\n}\n\nconst PersonPicker = ({ value, onChange }: PersonPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allPersonEntities}\n      getOptionSelected={(option: PersonInput, value: PersonInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.abn === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.firstGivenName} {value.familyName}</Name>\n              {!!value.email && <Email>{value.email}</Email>}\n              {!!value.mobile && <Mobile>{value.mobile}</Mobile>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.firstGivenName}${!!option.otherGivenName ? ` ${option.otherGivenName}` : ''} ${option.familyName} ${option.mobile} ${option.email}`\n      }}\n      onChange={(evt, newValue) => {\n        if (newValue) {\n          if (newValue.inputValue) {\n            const nameParts = newValue.inputValue.split(' ');\n            onChange({\n              firstGivenName: nameParts[0],\n              familyName: newValue.inputValue.substring(nameParts[0].length + 1)\n            });\n          } else {\n            onChange(newValue);\n          }\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            familyName: '',\n            firstGivenName: `Create Person \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by Name, Email or Mobile', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default PersonPicker;\n","import { Grid } from \"@material-ui/core\";\nimport TextField from \"components/form/TextField\";\nimport React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nexport interface NewPersonDetailsForm {\n  FirstGivenName: string;\n  OtherGivenName: string;\n  FamilyName: string;\n  Mobile: string;\n  Email: string;\n}\n\nfunction NewPersonDetails() {\n  const methods = useFormContext<NewPersonDetailsForm>();\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={12} md={4}>\n        <TextField\n          autoFocus\n          name=\"FirstGivenName\"\n          label=\"First Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"OtherGivenName\"\n          label=\"Other Given Name\"\n          control={control}\n        />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <TextField\n          name=\"FamilyName\"\n          label=\"Family Name\"\n          control={control}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default NewPersonDetails;\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DatePickerStyles = css`\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst DialogStyles = css`\n  .MuiToolbar-root {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label?: string;\n  className?: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  placeholder?: string;\n  multiline?: boolean;\n  minRows?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\nconst DateField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    rules,\n    // type,\n    placeholder = 'dd/mm/yyyy',\n    disabled,\n    autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Controller\n          control={control}\n          name={name as FieldName<T>}\n          rules={rules}\n          render={({ onChange, onBlur, value }) => (\n            <KeyboardDatePicker\n              // variant=\"inline\"\n              autoOk\n              DialogProps={{ className: DialogStyles }}\n              className={DatePickerStyles}\n              disabled={disabled}\n              onBlur={onBlur}\n              autoFocus={autoFocus}\n              // clearable // TODO: add clear adornment if possible\n              placeholder={placeholder}\n              showTodayButton\n              value={value}\n              // onChange={handleDateChange}\n              onChange={onChange}\n              // onChange={date => handleDateChange(date)}\n              // minDate={new Date()}\n              format=\"dd/MM/yyyy\"\n            />\n          )}\n        />\n      </MuiPickersUtilsProvider>\n    </FormControl>\n  );\n};\n\nexport default DateField;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport SectionHeading from 'components/SectionHeading';\nimport DateField from 'components/form/DateField';\n\nexport interface DirectorshipDetailsForm {\n  AppointmentDate: Date | null;\n  CeaseDate: Date | null;\n}\n\nfunction DirectorshipDetails() {\n  const methods = useFormContext<DirectorshipDetailsForm>();\n\n  const {\n    control,\n  } = methods;\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}><SectionHeading>Directorship</SectionHeading></Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"AppointmentDate\"\n          label=\"Appointment Date\"\n        />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <DateField\n          control={control}\n          name=\"CeaseDate\"\n          label=\"Cease Date\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default DirectorshipDetails;\n","import { Grid } from '@material-ui/core';\nimport NewPersonDetails, { NewPersonDetailsForm } from './NewPersonDetails';\nimport DirectorshipDetails, { DirectorshipDetailsForm } from './DirectorshipDetails';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport Director from 'types/Director';\nimport React, { useEffect } from 'react';\n\n\nexport interface DirectorFormProps {\n  director: Director;\n  onDirtyChange: (isDirty: boolean) => void;\n}\n\nexport interface DirectorForm extends NewPersonDetailsForm, DirectorshipDetailsForm { }\n\nexport interface DirectorsFormPanelRefProps {\n  getFormValues: () => DirectorForm;\n}\n\nfunction DirectorFormPanel({ director: { firstGivenName, otherGivenName, familyName }, onDirtyChange }: DirectorFormProps, ref: React.Ref<DirectorsFormPanelRefProps>) {\n  const methods = useForm<DirectorForm>({\n    defaultValues: {\n      FirstGivenName: firstGivenName,\n      OtherGivenName: otherGivenName || '',\n      FamilyName: familyName,\n      AppointmentDate: null,\n      CeaseDate: null,\n    },\n    mode: 'onChange'\n  });\n\n  const { formState: { isDirty }, getValues } = methods;\n\n  React.useImperativeHandle(ref, () => ({ getFormValues }));\n\n  function getFormValues() {\n    return getValues();\n  };\n\n  useEffect(\n    () => {\n      onDirtyChange(isDirty);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isDirty],\n  );\n\n  return (\n    <FormProvider {...methods} >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <NewPersonDetails />\n        </Grid>\n        <Grid item xs={12}>\n          <DirectorshipDetails />\n        </Grid>\n      </Grid>\n    </FormProvider>\n  )\n}\n\nexport default React.forwardRef(DirectorFormPanel);\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport PersonPicker, { PersonInput } from './PersonPicker';\nimport DirectorFormPanel, { DirectorForm, DirectorsFormPanelRefProps } from './DirectorFormPanel';\nimport { MdWarning } from \"react-icons/md\";\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddDirectorDialogProps {\n  isOpen: boolean;\n  // company?: PersonInput;\n  onClose: () => void;\n  onSubmit: (directorForm: DirectorForm) => void;\n}\n\nfunction AddDirectorDialog({ isOpen, onClose, onSubmit }: AddDirectorDialogProps) {\n  const [selectedPerson, setSelectedPerson] = useState<PersonInput | null>(null);\n  const [isDirty, setIsDirty] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const directorFormRef = React.useRef<DirectorsFormPanelRefProps>(null);\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  function reset() {\n    setSelectedPerson(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    if (directorFormRef.current) {\n      onSubmit(directorFormRef.current.getFormValues())\n    };\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedPerson(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Director  { isDirty && <MdWarning /> }\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (selectedPerson) ?\n              <DirectorFormPanel\n                director={!!selectedPerson.inputValue ? {\n                  firstGivenName: selectedPerson.inputValue,\n                  familyName: ''\n                } : selectedPerson}\n                onDirtyChange={setIsDirty}\n                ref={directorFormRef}\n              />\n              :\n              <PersonPicker\n                value={selectedPerson}\n                onChange={setSelectedPerson}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedPerson} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddDirectorDialog;\n"],"sourceRoot":""}