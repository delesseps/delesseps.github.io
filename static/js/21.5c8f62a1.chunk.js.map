{"version":3,"sources":["utils/isArray.ts","components/LazyDialog.tsx","components/form/DisplayField.tsx","utils/date.ts","utils/number.ts","../node_modules/@material-ui/core/Dialog/Dialog.js","../node_modules/@material-ui/core/Fab/Fab.js","types/InsuranceProvider.ts","pages/accounts/InsurancePolicies.tsx"],"names":["isArray","value","Array","LazyDialog","isOpen","children","useState","isOpenState","setOpenState","useEffect","timeoutId","setTimeout","clearTimeout","Suspense","fallback","open","LabelStyle","css","Value","styled","div","DisplayField","props","label","fieldValue","join","fullWidth","className","shrink","formatDate","date","format","formatTime","injectThousandsSeparator","replace","formatDecimal","formatThousands","decimals","places","formatted","Decimal","toFixed","undefined","formatMoney","formatPerc","formatInteger","Math","round","toString","defaultTransitionDuration","enter","duration","enteringScreen","exit","leavingScreen","Dialog","React","ref","BackdropProps","classes","disableBackdropClick","disableEscapeKeyDown","fullScreen","maxWidth","onBackdropClick","onClose","onEscapeKeyDown","PaperComponent","Paper","PaperProps","scroll","TransitionComponent","Fade","transitionDuration","TransitionProps","ariaDescribedby","ariaLabelledby","other","_objectWithoutPropertiesLoose","backdropClick","Modal","_extends","clsx","root","BackdropComponent","Backdrop","closeAfterTransition","onClick","event","current","appear","in","timeout","role","container","capitalize","onMouseDown","target","currentTarget","elevation","paper","String","paperFullScreen","paperFullWidth","withStyles","theme","position","scrollPaper","display","justifyContent","alignItems","scrollBody","overflowY","overflowX","textAlign","content","verticalAlign","height","width","outline","margin","boxShadow","paperScrollPaper","flexDirection","maxHeight","paperScrollBody","paperWidthFalse","paperWidthXs","max","breakpoints","values","xs","down","paperWidthSm","sm","paperWidthMd","md","paperWidthLg","lg","paperWidthXl","xl","borderRadius","name","Fab","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant","themeVariantsClasses","useThemeVariants","ButtonBase","primary","secondary","colorInherit","focusRipple","focusVisible","typography","button","minHeight","transition","transitions","create","short","padding","minWidth","shadows","palette","getContrastText","grey","backgroundColor","A100","textDecoration","action","disabledBackground","contrastText","main","dark","extended","circular","sizeSmall","sizeMedium","InsuranceProvider","InsuranceProviderLabels","Map","QBE","Atradius","Coface","EulerHermes","TheBondAndCreditCompany","TCUA","AIG","NewInsurancePolicyDialog","lazy","EditInsurancePolicyDialog","NewButtonStyle","ListItemStyle","Name","HorizontalStack","StackShrink","data","policyNumber","insuranceProvider","policyStartDate","Date","policyEndDate","discretionaryCreditLimit","maximumLiability","maxInvoicingDays","maxExtensionDays","InsurancePolicies","isNewDialogOpen","setIsNewDialogOpen","isEditDialogOpen","setIsEditDialogOpen","selectedInsurancePolicy","setSelectedInsurancePolicy","Fragment","map","insurancePolicy","index","spacing","item","get","onSubmit","aria-label"],"mappings":"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","file":"static/js/21.5c8f62a1.chunk.js","sourcesContent":["const isArray = <T>(value: unknown): value is T[] => Array.isArray(value);\n\nexport default isArray;","\nimport { Dialog } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\nexport interface LazyDialogProps {\n  children: React.ReactNode;\n  isOpen: boolean;\n}\n\nconst dialogCloseAnimationDuration = 500;\n\nfunction LazyDialog({ isOpen, children }: LazyDialogProps) {\n  const [isOpenState, setOpenState] = useState(isOpen);\n  // Defer close of the dialog for the animation to complete\n  useEffect(\n    () => {\n      let timeoutId: NodeJS.Timeout;\n      if (isOpenState !== isOpen) {\n        if (!isOpen) {\n          timeoutId = setTimeout(() => {\n            setOpenState(isOpen);\n          }, dialogCloseAnimationDuration);\n        } else {\n          setOpenState(isOpen);\n        }\n      }\n      return () => clearTimeout(timeoutId);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isOpen],\n  );\n\n  return (\n    <React.Suspense fallback={<Dialog open />}>\n      {isOpenState && children}\n    </React.Suspense>\n  )\n}\n\nexport default LazyDialog;\n","import styled from '@emotion/styled';\nimport { FormControl, InputLabel } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React from 'react';\nimport isArray from 'utils/isArray';\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst Value = styled.div`\n  padding: 5px 0;\n  font-size: 14px;\n  line-height: 1em;\n`;\n\ninterface Props {\n  label: string;\n  className?: string;\n  // type?: 'text' | 'number' | 'password';\n  value: string[] | React.ReactNode;\n}\n\nconst DisplayField = (props: Props) => {\n  const {\n    label,\n    value,\n  } = props;\n\n  let fieldValue: React.ReactNode = '';\n\n  if (isArray(value)) {\n    fieldValue = value.join('\\n');\n  } else {\n    fieldValue = value;\n  }\n  \n  return (\n    <FormControl\n      fullWidth\n    >\n      <InputLabel className={LabelStyle} shrink>{label}</InputLabel>\n      <Value>{fieldValue}</Value>\n    </FormControl>\n  );\n};\n\nexport default DisplayField;\n","import { format } from \"date-fns\";\n\nexport const formatDate = (date: Date | undefined | null): string => {\n  return date ? format(date, 'd MMM yyyy') : '';\n}\n\nexport const formatTime = (date: Date | undefined): string => {\n  return date ? format(date, 'h:mm a') : '';\n}\n","import Decimal from \"decimal.js-light\";\n\nconst injectThousandsSeparator = (value: string) =>\n  value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nexport const formatDecimal = (value: number, formatThousands = true, decimals = true, places = 2): string => {\n  const formatted = new Decimal(value).toFixed(decimals ? places : undefined);\n  return formatThousands ? injectThousandsSeparator(formatted) : formatted;\n};\n\nexport const formatMoney = (value: number, places = 2): string => {\n  return `$${formatDecimal(value, true, true, places)}`;\n};\n\nexport const formatPerc = (value: number, places = 2): string => {\n  return `${formatDecimal(value, false, true, places)}%`;\n};\n\nexport const formatInteger = (value: number): string =>\n  injectThousandsSeparator(Math.round(value).toString());\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport Modal from '../Modal';\nimport Backdrop from '../Backdrop';\nimport Fade from '../Fade';\nimport { duration } from '../styles/transitions';\nimport Paper from '../Paper';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '@media print': {\n      // Use !important to override the Modal inline-style.\n      position: 'absolute !important'\n    }\n  },\n\n  /* Styles applied to the container element if `scroll=\"paper\"`. */\n  scrollPaper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the container element if `scroll=\"body\"`. */\n  scrollBody: {\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    textAlign: 'center',\n    '&:after': {\n      content: '\"\"',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      height: '100%',\n      width: '0'\n    }\n  },\n\n  /* Styles applied to the container element. */\n  container: {\n    height: '100%',\n    '@media print': {\n      height: 'auto'\n    },\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    margin: 32,\n    position: 'relative',\n    overflowY: 'auto',\n    // Fix IE11 issue, to remove at some point.\n    '@media print': {\n      overflowY: 'visible',\n      boxShadow: 'none'\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `scroll=\"paper\"`. */\n  paperScrollPaper: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxHeight: 'calc(100% - 64px)'\n  },\n\n  /* Styles applied to the `Paper` component if `scroll=\"body\"`. */\n  paperScrollBody: {\n    display: 'inline-block',\n    verticalAlign: 'middle',\n    textAlign: 'left' // 'initial' doesn't work on IE11\n\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=false`. */\n  paperWidthFalse: {\n    maxWidth: 'calc(100% - 64px)'\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=\"xs\"`. */\n  paperWidthXs: {\n    maxWidth: Math.max(theme.breakpoints.values.xs, 444),\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)'\n      }\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=\"sm\"`. */\n  paperWidthSm: {\n    maxWidth: theme.breakpoints.values.sm,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)'\n      }\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=\"md\"`. */\n  paperWidthMd: {\n    maxWidth: theme.breakpoints.values.md,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)'\n      }\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=\"lg\"`. */\n  paperWidthLg: {\n    maxWidth: theme.breakpoints.values.lg,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)'\n      }\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `maxWidth=\"xl\"`. */\n  paperWidthXl: {\n    maxWidth: theme.breakpoints.values.xl,\n    '&$paperScrollBody': {\n      [theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2)]: {\n        maxWidth: 'calc(100% - 64px)'\n      }\n    }\n  },\n\n  /* Styles applied to the `Paper` component if `fullWidth={true}`. */\n  paperFullWidth: {\n    width: 'calc(100% - 64px)'\n  },\n\n  /* Styles applied to the `Paper` component if `fullScreen={true}`. */\n  paperFullScreen: {\n    margin: 0,\n    width: '100%',\n    maxWidth: '100%',\n    height: '100%',\n    maxHeight: 'none',\n    borderRadius: 0,\n    '&$paperScrollBody': {\n      margin: 0,\n      maxWidth: '100%'\n    }\n  }\n});\nconst defaultTransitionDuration = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\n/**\n * Dialogs are overlaid modal paper based components with a backdrop.\n */\n\nconst Dialog = /*#__PURE__*/React.forwardRef(function Dialog(props, ref) {\n  const {\n    BackdropProps,\n    children,\n    classes,\n    className,\n    disableBackdropClick = false,\n    disableEscapeKeyDown = false,\n    fullScreen = false,\n    fullWidth = false,\n    maxWidth = 'sm',\n    onBackdropClick,\n    onClose,\n    onEscapeKeyDown,\n    open,\n    PaperComponent = Paper,\n    PaperProps = {},\n    scroll = 'paper',\n    TransitionComponent = Fade,\n    transitionDuration = defaultTransitionDuration,\n    TransitionProps,\n    'aria-describedby': ariaDescribedby,\n    'aria-labelledby': ariaLabelledby\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"BackdropProps\", \"children\", \"classes\", \"className\", \"disableBackdropClick\", \"disableEscapeKeyDown\", \"fullScreen\", \"fullWidth\", \"maxWidth\", \"onBackdropClick\", \"onClose\", \"onEscapeKeyDown\", \"open\", \"PaperComponent\", \"PaperProps\", \"scroll\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\", \"aria-describedby\", \"aria-labelledby\"]);\n\n  const backdropClick = React.useRef();\n\n  const handleMouseDown = event => {\n    // We don't want to close the dialog when clicking the dialog content.\n    // Make sure the event starts and ends on the same DOM element.\n    backdropClick.current = event.target === event.currentTarget;\n  };\n\n  const handleBackdropClick = event => {\n    // Ignore the events not coming from the \"backdrop\".\n    if (!backdropClick.current) {\n      return;\n    }\n\n    backdropClick.current = null;\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, _extends({\n    className: clsx(classes.root, className),\n    BackdropComponent: Backdrop,\n    BackdropProps: _extends({\n      transitionDuration\n    }, BackdropProps),\n    closeAfterTransition: true,\n    disableBackdropClick: disableBackdropClick,\n    disableEscapeKeyDown: disableEscapeKeyDown,\n    onEscapeKeyDown: onEscapeKeyDown,\n    onClose: onClose,\n    open: open,\n    ref: ref,\n    onClick: handleBackdropClick\n  }, other), /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    appear: true,\n    in: open,\n    timeout: transitionDuration,\n    role: \"none presentation\"\n  }, TransitionProps), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.container, classes[`scroll${capitalize(scroll)}`]),\n    onMouseDown: handleMouseDown\n  }, /*#__PURE__*/React.createElement(PaperComponent, _extends({\n    elevation: 24,\n    role: \"dialog\",\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-labelledby\": ariaLabelledby\n  }, PaperProps, {\n    className: clsx(classes.paper, classes[`paperScroll${capitalize(scroll)}`], classes[`paperWidth${capitalize(String(maxWidth))}`], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)\n  }), children))));\n});\nprocess.env.NODE_ENV !== \"production\" ? Dialog.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The id(s) of the element(s) that describe the dialog.\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * The id(s) of the element(s) that label the dialog.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * Dialog children, usually the included sub-components.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clicking the backdrop will not fire the `onClose` callback.\n   * @default false\n   */\n  disableBackdropClick: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * If `true`, the dialog will be full-screen\n   * @default false\n   */\n  fullScreen: PropTypes.bool,\n\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.\n   *\n   * Notice that the dialog width grow is limited by the default margin.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the dialog.\n   * The dialog width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'sm'\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false]),\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableKeyboard` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * If `true`, the Dialog is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * The component used to render the body of the dialog.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Paper`](/api/paper/) element.\n   * @default {}\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Determine the container for scrolling the dialog.\n   * @default 'paper'\n   */\n  scroll: PropTypes.oneOf(['body', 'paper']),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Fade\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialog'\n})(Dialog);","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useThemeVariants } from '@material-ui/styles';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: _extends({}, theme.typography.button, {\n    minHeight: 36,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {\n      duration: theme.transitions.duration.short\n    }),\n    borderRadius: '50%',\n    padding: 0,\n    minWidth: 0,\n    width: 56,\n    height: 56,\n    boxShadow: theme.shadows[6],\n    '&:active': {\n      boxShadow: theme.shadows[12]\n    },\n    color: theme.palette.getContrastText(theme.palette.grey[300]),\n    backgroundColor: theme.palette.grey[300],\n    '&:hover': {\n      backgroundColor: theme.palette.grey.A100,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.grey[300]\n      },\n      textDecoration: 'none'\n    },\n    '&$focusVisible': {\n      boxShadow: theme.shadows[6]\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled,\n      boxShadow: theme.shadows[0],\n      backgroundColor: theme.palette.action.disabledBackground\n    }\n  }),\n\n  /* Styles applied to the span element that wraps the children. */\n  label: {\n    width: '100%',\n    // assure the correct width for iOS Safari\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  primary: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.primary.main\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  secondary: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: theme.palette.secondary.main\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"extended\"`. */\n  extended: {\n    borderRadius: 48 / 2,\n    padding: '0 16px',\n    width: 'auto',\n    minHeight: 'auto',\n    minWidth: 48,\n    height: 48,\n    '&$sizeSmall': {\n      width: 'auto',\n      padding: '0 8px',\n      borderRadius: 34 / 2,\n      minWidth: 34,\n      height: 34\n    },\n    '&$sizeMedium': {\n      width: 'auto',\n      padding: '0 16px',\n      borderRadius: 40 / 2,\n      minWidth: 40,\n      height: 40\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"circular\"`. */\n  circular: {},\n\n  /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n  focusVisible: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit'\n  },\n\n  /* Styles applied to the root element if `size=\"small\"``. */\n  sizeSmall: {\n    width: 40,\n    height: 40\n  },\n\n  /* Styles applied to the root element if `size=\"medium\"``. */\n  sizeMedium: {\n    width: 48,\n    height: 48\n  }\n});\nconst Fab = /*#__PURE__*/React.forwardRef(function Fab(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'default',\n    component = 'button',\n    disabled = false,\n    disableFocusRipple = false,\n    focusVisibleClassName,\n    size = 'large',\n    variant = 'circular'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"]);\n\n  const themeVariantsClasses = useThemeVariants(_extends({}, props, {\n    color,\n    component,\n    disabled,\n    disableFocusRipple,\n    size,\n    variant\n  }), 'MuiFab');\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, classes[variant], themeVariantsClasses, className, size !== 'large' && classes[`size${capitalize(size)}`], disabled && classes.disabled, {\n      'primary': classes.primary,\n      'secondary': classes.secondary,\n      'inherit': classes.colorInherit\n    }[color]),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? Fab.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the button will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   * @default 'large'\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['circular', 'extended']), PropTypes.string])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFab'\n})(Fab);","export enum InsuranceProvider {\n  None = 0,\n  QBE = 1,\n  Atradius = 3,\n  Coface = 5,\n  EulerHermes = 7,\n  TheBondAndCreditCompany = 9,\n  TCUA = 11,\n  AIG = 13,\n}\n\nexport const InsuranceProviderLabels = new Map<InsuranceProvider, string>([\n  [InsuranceProvider.QBE, 'QBE'],\n  [InsuranceProvider.Atradius, 'Atradius'],\n  [InsuranceProvider.Coface, 'Coface'],\n  [InsuranceProvider.EulerHermes, 'Euler Hermes'],\n  [InsuranceProvider.TheBondAndCreditCompany, 'The Bond and Credit Company'],\n  [InsuranceProvider.TCUA, 'TCUA'],\n  [InsuranceProvider.AIG, 'AIG'],\n]);\n\nexport default InsuranceProvider;\n","import styled from '@emotion/styled';\nimport { Fab, Grid, List, ListItem, ListItemText } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React, { useState } from 'react';\nimport { MdAdd } from 'react-icons/md';\nimport InsurancePolicy from 'types/InsurancePolicy';\nimport LazyDialog from 'components/LazyDialog';\nimport InsuranceProvider, { InsuranceProviderLabels } from 'types/InsuranceProvider';\nimport DisplayField from 'components/form/DisplayField';\nimport { formatInteger, formatMoney } from 'utils/number';\nimport { formatDate } from 'utils/date';\n\nconst NewInsurancePolicyDialog = React.lazy(() => import('components/organisms/NewInsurancePolicyDialog'))\nconst EditInsurancePolicyDialog = React.lazy(() => import('components/organisms/EditInsurancePolicyDialog'))\n\nconst NewButtonStyle = css`\n  font-size: 2em;\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`;\n\nconst ListItemStyle = css`\n  padding: 16px;\n  border-bottom: 1px solid rgba(0,0,0,0.12);\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.04);\n    cursor: pointer;\n  }\n\n  .MuiListItemAvatar-root {\n    min-width: 56px;\n  }\n`;\n\nconst Name = styled.div`\n  font-size: 18px;\n`\n\nconst HorizontalStack = styled.div`\n  display: flex;\n  margin: -8px -16px;\n  flex-flow: wrap;\n`;\n\nconst StackShrink = styled.div`\n  flex-shrink: 1;\n  margin: 8px 16px;\n`;\n\nconst data: InsurancePolicy[] = [\n  {\n    policyNumber: 'E202002-AU-71501',\n    insuranceProvider: InsuranceProvider.TheBondAndCreditCompany,\n    policyStartDate: new Date('2020-04-01'),\n    policyEndDate: new Date('2021-03-31'),\n    discretionaryCreditLimit: 30000,\n    maximumLiability: 500000,\n    maxInvoicingDays: 30,\n    maxExtensionDays: 60,\n  }\n]\n\nfunction InsurancePolicies() {\n  const [isNewDialogOpen, setIsNewDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedInsurancePolicy, setSelectedInsurancePolicy] = useState<InsurancePolicy | undefined>(undefined);\n\n  const onNewButtonClick = () => {\n    setIsNewDialogOpen(true);\n  }\n\n  const onNewDialogClose = () => {\n    setIsNewDialogOpen(false);\n  }\n\n  const onNewDialogOk = () => {\n    setIsNewDialogOpen(false);\n  }\n\n  const onEditDialogClose = () => {\n    setSelectedInsurancePolicy(undefined);\n    setIsEditDialogOpen(false);\n  }\n\n  const onEditDialogOK = () => {\n    setSelectedInsurancePolicy(undefined);\n    setIsEditDialogOpen(false);\n  }\n\n  const handleRowClick = (row: InsurancePolicy) => {\n    setSelectedInsurancePolicy(row);\n    setIsEditDialogOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <List>\n        {\n          data.map((insurancePolicy, index) => \n            <ListItem key={index} alignItems=\"flex-start\" className={ListItemStyle} onClick={() => handleRowClick(insurancePolicy)}>\n              <ListItemText>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Name>Policy: {insurancePolicy.policyNumber}</Name>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <DisplayField\n                      label=\"Provider\"\n                      value={InsuranceProviderLabels.get(insurancePolicy.insuranceProvider!)}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <HorizontalStack>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"Start Date\"\n                          value={formatDate(insurancePolicy.policyStartDate)}\n                        />\n                      </StackShrink>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"End Date\"\n                          value={formatDate(insurancePolicy.policyEndDate)}\n                        />\n                      </StackShrink>\n                    </HorizontalStack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <HorizontalStack>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"Maximum Policy Liability\"\n                          value={formatMoney(insurancePolicy.maximumLiability!)}\n                        />\n                      </StackShrink>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"Discretionary Credit Limit\"\n                          value={formatMoney(insurancePolicy.discretionaryCreditLimit!)}\n                        />\n                      </StackShrink>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"Max Invoicing Days\"\n                          value={formatInteger(insurancePolicy.maxInvoicingDays!)}\n                        />\n                      </StackShrink>\n                      <StackShrink>\n                        <DisplayField\n                          label=\"Max Extension Days\"\n                          value={formatInteger(insurancePolicy.maxExtensionDays!)}\n                        />\n                      </StackShrink>\n                    </HorizontalStack>\n                  </Grid>\n                </Grid>\n              </ListItemText>\n            </ListItem>,\n          )\n        }\n      </List>\n      <LazyDialog isOpen={isNewDialogOpen}>\n        <NewInsurancePolicyDialog\n          isOpen={isNewDialogOpen}\n          onClose={onNewDialogClose}\n          onSubmit={onNewDialogOk}\n        />\n      </LazyDialog>\n      {\n        !!selectedInsurancePolicy &&\n        <LazyDialog isOpen={isEditDialogOpen}>\n          <EditInsurancePolicyDialog\n            insurancePolicy={selectedInsurancePolicy}\n            isOpen={isEditDialogOpen}\n            onClose={onEditDialogClose}\n            onSubmit={onEditDialogOK}\n          />\n        </LazyDialog>\n      }\n      <Fab aria-label=\"add\" color=\"primary\" className={NewButtonStyle} onClick={onNewButtonClick}>\n        <MdAdd />\n      </Fab>\n    </React.Fragment>\n  )\n}\n\nexport default InsurancePolicies;\n"],"sourceRoot":""}