{"version":3,"sources":["components/PaddedContainer.tsx","components/form/AutoCompleteField.tsx","utils/isArray.ts","components/Card.tsx","types/AccountType.ts","components/form/DisplayField.tsx","types/ConfidentialityType.ts","components/form/NumberField.tsx","types/RecourseType.ts","types/FeeModelType.ts","components/form/PercentField.tsx","pages/accounts/Facility.tsx"],"names":["PaddedContainer","styled","div","TextFieldStyle","css","AutoCompleteField","props","name","control","error","rules","label","placeholder","creatable","getOptionLabel","option","disableClearable","renderOption","autoFocus","options","render","onChange","onBlur","value","id","autoHighlight","getOptionSelected","selectOnFocus","clearOnBlur","evt","newValue","renderInput","InputLabelProps","InputProps","rest","className","shrink","helperText","message","isArray","Array","Title","Head","Root","Card","children","title","ariaLabel","aria-label","AccountType","AccountTypeLabels","Map","InvoiceFinance","Instalments","DisplayFieldStyle","DisplayField","disabled","multiline","fieldValue","join","fullWidth","ConfidentialityType","ConfidentialityTypeLabels","Disclosed","Confidential","RecourseType","NumberFormatCustom","inputRef","other","getInputRef","onValueChange","values","target","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","prefix","NumberField","transform","event","inputComponent","FeeModelType","RecourseTypeLabels","Recourse","NonRecourse","FeeModelTypeLabels","SplitFee","max","min","suffix","PercentField","defaultValues","get","confidentialityTypeOptions","entries","map","confidentialityType","recourseTypeOptions","recourseType","feeModelTypeOptions","feeModelType","Facility","methods","useForm","mode","handleSubmit","onSubmit","Grid","container","spacing","item","xs","lg","sm"],"mappings":"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","file":"static/js/13.6e9d51d1.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer\n","import { Control, Controller, FieldError } from 'react-hook-form';\nimport {\n  AutocompleteRenderOptionState,\n  InputLabelProps,\n  TextField,\n  Autocomplete as MuiAutocomplete\n} from '@material-ui/core';\nimport { FieldRules } from 'types/FieldRules';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { css } from 'emotion';\nimport React from 'react';\n\nexport interface SelectOption<R> {\n  label: string;\n  value: R;\n}\n\ninterface Props<T,R> {\n  name: keyof T;\n  control: Control<T>;\n  error?: FieldError;\n  rules?: FieldRules;\n  label?: string;\n  options: Array<SelectOption<R>>;\n  placeholder?: string;\n  getOptionLabel?: (option: SelectOption<R>) => string;\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: SelectOption<R>,\n    state: AutocompleteRenderOptionState\n  ) => React.ReactNode;\n  autoFocus?: boolean;\n  creatable?: boolean;\n  InputLabelProps?: Partial<InputLabelProps>;\n  disableClearable?: boolean | undefined;\n}\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nconst AutoCompleteField = <T extends Record<string, any>, R extends any>(props: Props<T,R>) => {\n  const {\n    name,\n    control,\n    error,\n    rules,\n    label,\n    placeholder,\n    creatable,\n    getOptionLabel = (option: SelectOption<R>) => option?.label || '',\n    disableClearable,\n    renderOption,\n    autoFocus,\n    options,\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => {\n        // const selectedValueWithLabel = options.find(option => option?.value === value);\n\n        return (\n          <MuiAutocomplete\n            id={name}\n            autoHighlight\n            // freeSolo={creatable}\n            disableClearable={disableClearable}\n            options={options}\n            getOptionSelected={(option: SelectOption<R>, value: SelectOption<R>) => { \n              return value ? option.value === value.value : false;\n            }}\n            renderOption={renderOption}\n            selectOnFocus={creatable}\n            clearOnBlur={creatable}\n            getOptionLabel={getOptionLabel}\n            value={value}\n            // value={selectedValueWithLabel}\n            onChange={(evt, newValue) => onChange(newValue)}\n            onBlur={onBlur}\n            renderInput={({ InputLabelProps, InputProps, ...rest }) => \n              <TextField\n                autoFocus={autoFocus}\n                className={TextFieldStyle}\n                label={label}\n                error={!!error}\n                InputLabelProps={{ shrink: true, ...InputLabelProps }}\n                InputProps={{ placeholder: placeholder, ...InputProps }}\n                helperText={ error?.message ?? '' }\n                {...rest}\n              />\n            }\n          />\n        )\n      }}\n    />\n  )\n};\n\nexport default AutoCompleteField;\n","const isArray = <T>(value: unknown): value is T[] => Array.isArray(value);\n\nexport default isArray;","import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n\n  @media (min-width: 600px) {\n    border: 2px solid rgba(0,0,0,0.12);\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    /* padding: 0 0 16px 0; */\n    padding: 0;\n    /* border-bottom: 2px solid rgba(0,0,0,0.12); */\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  // actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n      title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;\n","export enum AccountType {\n  None = 0,\n  InvoiceFinance = 1,\n  Instalments = 3,\n}\n\nexport const AccountTypeLabels = new Map<AccountType, string>([\n  [AccountType.InvoiceFinance, 'Invoice Finance'],\n  [AccountType.Instalments, 'Instalments'],\n]);\n\n","import TextField from '@material-ui/core/TextField';\nimport { css } from 'emotion';\nimport React from 'react';\nimport isArray from 'utils/isArray';\n\nconst DisplayFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    /* background-color: #fafafa; */\n  }\n  .MuiInput-input {\n    padding: 2px 0;\n    font-size: 14px;\n  }\n`;\ninterface Props {\n  label: string;\n  className?: string;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  value: string | string[];\n  transform?: (value: string) => any;\n}\n\nconst DisplayField = (props: Props) => {\n  const {\n    label,\n    disabled,\n    value,\n  } = props;\n\n  let multiline = false;\n  let fieldValue = '';\n\n  if (isArray(value)) {\n    fieldValue = value.join('\\n');\n    multiline= true;\n  } else {\n    fieldValue = value;\n  }\n  \n  return (\n    <TextField\n      fullWidth\n      className={DisplayFieldStyle}\n      // type={ type }\n      label={label}\n      value={fieldValue}\n      multiline={multiline}\n      InputLabelProps={{ shrink: true }}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default DisplayField;\n","\n\n\nexport enum ConfidentialityType {\n  None = 0,\n  Disclosed = 1,\n  Confidential = 3,\n}\n\nexport const ConfidentialityTypeLabels = new Map<ConfidentialityType, string>([\n  [ConfidentialityType.Disclosed, 'Disclosed'],\n  [ConfidentialityType.Confidential, 'Confidential'],\n]);\n","import MuiTextField from '@material-ui/core/TextField';\nimport NumberFormat from 'react-number-format';\nimport React from 'react';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport {\n  Control,\n  Controller,\n  FieldError,\n  // FieldName\n} from 'react-hook-form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T extends Record<string, any>> {\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  // TODO: Implement min/max\n  max?: number;\n  min?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  transform?: (value: string) => any;\n}\n\ninterface NumberFormatCustomProps {\n  inputRef: (instance: NumberFormat | null) => void;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst NumberFormatCustom = (props: NumberFormatCustomProps) => {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      decimalScale={2}\n      fixedDecimalScale\n      thousandSeparator\n      isNumericString\n      prefix=\"$\"\n    />\n  );\n}\n\nconst NumberField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    error,\n    rules,\n    // type,\n    disabled,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={name}\n          fullWidth\n          // type={ type }\n          className={TextFieldStyle}\n          label={label}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n          InputProps={{\n            inputComponent: NumberFormatCustom as any\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default NumberField;\n","\n\n\nexport enum RecourseType {\n  None = 0,\n  Recourse = 1,\n  NonRecourse = 3,\n}\n\nexport const RecourseTypeLabels = new Map<RecourseType, string>([\n  [RecourseType.Recourse, 'Recourse'],\n  [RecourseType.NonRecourse, 'Non Recourse'],\n]);\n","\n\n\nexport enum FeeModelType {\n  None = 0,\n  SplitFee = 1,\n}\n\nexport const FeeModelTypeLabels = new Map<FeeModelType, string>([\n  [FeeModelType.SplitFee, 'Split Fee'],\n]);\n","import MuiTextField from '@material-ui/core/TextField';\nimport NumberFormat from 'react-number-format';\nimport React from 'react';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport {\n  Control,\n  Controller,\n  FieldError,\n  // FieldName\n} from 'react-hook-form';\nimport { FieldRules } from 'types/FieldRules';\nimport { css } from 'emotion';\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\ninterface Props<T extends Record<string, any>> {\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  // TODO: Implement min/max\n  max?: number;\n  min?: number;\n  // type?: 'text' | 'number' | 'password';\n  disabled?: boolean;\n  transform?: (value: string) => any;\n}\n\ninterface NumberFormatCustomProps {\n  inputRef: (instance: NumberFormat | null) => void;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n}\n\nconst NumberFormatCustom = (props: NumberFormatCustomProps) => {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      max={100}\n      min={0}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      decimalScale={2}\n      fixedDecimalScale\n      thousandSeparator\n      isNumericString\n      suffix=\"%\"\n    />\n  );\n}\n\nconst PercentField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    error,\n    rules,\n    // type,\n    disabled,\n    transform\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      rules={rules}\n      render={({ onChange, onBlur, value, name }) => (\n        <MuiTextField\n          id={name}\n          fullWidth\n          // type={ type }\n          className={TextFieldStyle}\n          label={label}\n          onChange={(event) => {\n            if (transform) {\n              onChange(transform(event.target.value));\n            } else {\n              onChange(event.target.value);\n            }\n          }}\n          onBlur={onBlur}\n          value={value}\n          error={!!error}\n          InputLabelProps={{ shrink: true }}\n          helperText={error?.message ?? ''}\n          disabled={disabled}\n          InputProps={{\n            inputComponent: NumberFormatCustom as any\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default PercentField;\n","// import styled from '@emotion/styled';\n// import { GoCheck } from 'react-icons/go';\n// import { MdEdit, MdEmail, MdLocalPhone, MdSend } from 'react-icons/md';\n// import { useHistory } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\nimport AutoCompleteField, { SelectOption } from 'components/form/AutoCompleteField';\nimport PaddedContainer from 'components/PaddedContainer';\n// import DisplayField from 'components/form/DisplayField';\nimport Card from 'components/Card';\nimport { ConfidentialityType, ConfidentialityTypeLabels } from 'types/ConfidentialityType';\nimport NumberField from 'components/form/NumberField';\nimport { RecourseType, RecourseTypeLabels } from 'types/RecourseType';\nimport { FeeModelType, FeeModelTypeLabels } from 'types/FeeModelType';\nimport PercentField from 'components/form/PercentField';\nimport DisplayField from 'components/form/DisplayField';\nimport { AccountType, AccountTypeLabels } from 'types/AccountType';\nimport React from 'react';\n\ninterface FacilityForm {\n  FeeModelType: SelectOption<FeeModelType> | undefined;\n  RecourseType: SelectOption<RecourseType> | undefined;\n  ConfidentialityType: SelectOption<ConfidentialityType> | undefined;\n  Limit?: number;\n  EstablishmentFee?: number;\n  MinMonthlyDrawdownFee?: number;\n  DrawdownFeePerc?: number;\n  // ABN: string;\n  // ACN: string;\n  // TradingName: string;\n  // TradingAddress: string;\n  // WebSite: string;\n  // Notes: string;\n  // Abn: string;\n  // PrimaryContact: SelectOption<string> | undefined;\n  // SecondaryContact: SelectOption<string> | undefined;\n}\n\nconst defaultValues: FacilityForm = {\n  ConfidentialityType: { value: ConfidentialityType.Disclosed, label: ConfidentialityTypeLabels.get(ConfidentialityType.Disclosed)! },\n  RecourseType: { value: RecourseType.Recourse, label: RecourseTypeLabels.get(RecourseType.Recourse)! },\n  FeeModelType: { value: FeeModelType.SplitFee, label: FeeModelTypeLabels.get(FeeModelType.SplitFee)! },\n  // LegalName: 'Breaking Bad Pty Ltd',\n  // ABN: '',\n  // ACN: '',\n  // TradingName: '',\n  // WebSite: '',\n  // TradingAddress: '',\n  // Notes: '',\n  // Abn: '12 345 678 901',\n  // PrimaryContact: contactOptions.find(option => option.value === '123'),\n  // SecondaryContact: undefined,\n}\n\nconst confidentialityTypeOptions = [...ConfidentialityTypeLabels.entries()].map(([confidentialityType, label]) => \n  ({ label: label, value: confidentialityType })\n);\n\nconst recourseTypeOptions = [...RecourseTypeLabels.entries()].map(([recourseType, label]) => \n  ({ label: label, value: recourseType })\n);\n\nconst feeModelTypeOptions = [...FeeModelTypeLabels.entries()].map(([feeModelType, label]) => \n  ({ label: label, value: feeModelType })\n);\n\nfunction Facility() {\n  // const history = useHistory();\n  const methods = useForm<FacilityForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    // formState,\n    // watch,\n    control,\n  } = methods;\n\n  // const primaryContact = watch('PrimaryContact');\n  // const secondaryContact = watch('SecondaryContact');\n\n  return (\n    <PaddedContainer>\n      <form onSubmit={handleSubmit(() => {})}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={6}>\n            <Card>\n              <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                  <DisplayField\n                    label=\"Type\"\n                    value={AccountTypeLabels.get(AccountType.InvoiceFinance)!}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"FeeModelType\"\n                    control={control}\n                    label=\"Fee Model\"\n                    options={feeModelTypeOptions}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <NumberField\n                    name=\"Limit\"\n                    control={control}\n                    label=\"Limit\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <NumberField\n                    name=\"EstablishmentFee\"\n                    control={control}\n                    label=\"Establishment Fee\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <NumberField\n                    name=\"MinMonthlyDrawdownFee\"\n                    control={control}\n                    label=\"Min Monthly Drawdown Fee\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <PercentField\n                    name=\"DrawdownFeePerc\"\n                    control={control}\n                    label=\"Drawdown Fee\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"ConfidentialityType\"\n                    control={control}\n                    label=\"Confidentiality\"\n                    options={confidentialityTypeOptions}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <AutoCompleteField\n                    name=\"RecourseType\"\n                    control={control}\n                    label=\"Recourse\"\n                    options={recourseTypeOptions}\n                  />\n                </Grid>\n                {/* <Grid item xs={12} sm={6}>\n                  <DisplayField\n                    label=\"Legal Name\"\n                    value=\"\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <TextField\n                    name=\"ACN\"\n                    label=\"ACN\"\n                    control={control}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingName\"\n                    control={control}\n                    label=\"Trading Name\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"TradingAddress\"\n                    control={control}\n                    label=\"Trading Address\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"WebSite\"\n                    control={control}\n                    label=\"Web Site\"\n                    placeholder=\"https://\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    name=\"Notes\"\n                    control={control}\n                    multiline\n                    minRows={3}\n                    label=\"Notes\"\n                    placeholder=\"About the business...\"\n                  />\n                </Grid> */}\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n      </form>\n    </PaddedContainer>\n  )\n}\n\nexport default Facility;\n"],"sourceRoot":""}