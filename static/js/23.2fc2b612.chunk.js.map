{"version":3,"sources":["utils/string.ts","utils/color.ts","pages/entities/people/List.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","colorHash","ColorHash","lightness","avatarColor","hex","NewButtonStyle","css","ListItemStyle","ListActions","styled","div","SearchField","SearchIcon","SearchInputStyles","SecondaryDetails","Email","Name","Mobile","data","personId","firstGivenName","familyName","email","mobile","PeopleList","history","useHistory","Fragment","placeholder","fullWidth","classes","input","inputProps","accountUser","index","alignItems","className","onClick","person","push","alt","style","backgroundColor","container","spacing","item","xs","aria-label","color"],"mappings":"+GACA,oEAAO,IAAMA,EAAW,SAACC,GAAD,OACtBA,EAAMC,MAAM,KAAKC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,OAAO,MAAIC,KAAK,KAEzCC,EAAW,SAACN,GAAD,OACtBA,EAAMO,QAAQ,MAAO,M,iCCLvB,+CAIMC,EAAY,IAAIC,EAAU,CAAEC,UAAW,MAahCC,EAAc,SAACX,GAAD,OAAmBQ,EAAUI,IAAIZ,K,yyECF5D,IAAMa,EAAiBC,YAAH,KAOdC,EAAgBD,YAAH,KAcbE,EAAcC,IAAOC,IAAV,KAMXC,EAAcF,IAAOC,IAAV,KAmBXE,EAAaH,IAAOC,IAAV,KAWVG,EAAoBP,YAAH,KAWjBQ,EAAmBL,IAAOC,IAAV,KAOhBK,EAAQN,IAAOC,IAAV,KAGLM,EAAOP,IAAOC,IAAV,KAIJO,EAASR,IAAOC,IAAV,KAGNQ,EAAiB,CACrB,CACEC,SAAU,EACVC,eAAgB,MAChBC,WAAY,SACZC,MAAO,oBACPC,OAAQ,mBAEV,CACEJ,SAAU,EACVC,eAAgB,OAChBC,WAAY,UACZC,MAAO,iCACPC,OAAQ,mBAEV,CACEJ,SAAU,EACVC,eAAgB,SAChBC,WAAY,QACZC,MAAO,sBACPC,OAAQ,oBA6GGC,UAzGf,WACE,IAAMC,EAAUC,cA+BhB,OACE,eAAC,IAAMC,SAAP,WACE,cAACnB,EAAD,UACE,eAACG,EAAD,WACE,cAACC,EAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CACEgB,YAAY,mBACZC,WAAS,EACTC,QAAS,CAEPC,MAAOlB,GAETmB,WAAY,CAAE,aAAc,iBAIlC,cAAC,IAAD,UAEId,EAAKxB,KAAI,SAACuC,EAAaC,GAAd,OACP,eAAC,IAAD,CAAsBC,WAAW,aAAaC,UAAW7B,EAAe8B,QAAS,kBAzBnEC,EAyBwFL,OAxB9GR,EAAQc,KAAR,2BAAiCD,EAAOnB,WADnB,IAACmB,GAyBd,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQE,IAAG,UAAKP,EAAYb,eAAjB,YAAmCa,EAAYZ,YAAcoB,MAAO,CAAEC,gBAAiBvC,YAAY,GAAD,OAAI8B,EAAYb,eAAhB,YAAkCa,EAAYZ,cAA3J,SAA4K9B,YAAS,GAAD,OAAI0C,EAAYb,eAAhB,YAAkCa,EAAYZ,iBAEpO,cAAC,IAAD,UACE,eAAC,IAAD,CAAMsB,WAAS,EAACC,QAAS,EAAzB,UACE,eAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,UACE,eAAC9B,EAAD,WAAOiB,EAAYb,eAAnB,IAAoCa,EAAYZ,cAChD,eAACP,EAAD,WACE,cAACC,EAAD,UAAQkB,EAAYX,QACpB,cAACL,EAAD,UAASgB,EAAYV,eAGzB,cAAC,IAAD,CAAMsB,MAAI,EAACC,GAAI,WAbNZ,QA6CrB,cAAC,IAAD,CAAKa,aAAW,MAAMC,MAAM,UAAUZ,UAAW/B,EAAgBgC,QA5F5C,aA4FrB,SACE,cAAC,IAAD","file":"static/js/23.2fc2b612.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","import * as ColorHash from 'color-hash';\n\n// const colorHash = new ColorHash({ lightness: [0.3, 0.45, 0.6] });\n// const colorHash = new ColorHash({ lightness: [0.4, 0.4, 0.6] });\nconst colorHash = new ColorHash({ lightness: 0.45 });\n\nexport const stringToHslColor = (value: string, saturation: number, lightness: number) => {\n  let hash = 0;\n  for (var i = 0; i < value.length; i++) {\n    hash = value.charCodeAt(i) + ((hash << 5) - hash);\n    // hash = value.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  \n  const hex = hash % 360;\n  return `hsl(${hex}, ${saturation}%, ${lightness}%)`;\n}\n\nexport const avatarColor = (value: string) => colorHash.hex(value)\n\n// export const avatarColor = (value: string) => stringToHslColor(value, 50, 50)\n\n// const hslGenerator = (value: string, saturation: number, lightness: number) => {\n//   const [...valueChars] = value;\n//   const hash = valueChars.reduce((a, c) => {\n//     const h = c.charCodeAt(0) + (a << 2) â€” a)\n//     return h % 360;\n//   }, 0);\n//   return `hsl(${hash}, ${saturation}%, ${lightness}%)`;\n// }\n","import styled from '@emotion/styled';\nimport { Avatar, Fab, Grid, InputBase, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { MdAdd, MdSearch } from 'react-icons/md';\nimport { useHistory } from 'react-router-dom';\nimport Person from 'types/Person';\nimport { avatarColor } from 'utils/color';\nimport { initials } from 'utils/string';\n// import { FiClock } from 'react-icons/fi';\n// import LazyDialog from 'components/LazyDialog';\n\n// const NewPersonDialog = React.lazy(() => import('components/organisms/NewPersonDialog'))\n// const EditPersonDialog = React.lazy(() => import('components/organisms/EditPersonDialog'))\n\nconst NewButtonStyle = css`\n  font-size: 2em;\n  position: fixed;\n  right: 24px;\n  bottom: 24px;\n`;\n\nconst ListItemStyle = css`\n  padding: 16px;\n  border-bottom: 1px solid rgba(0,0,0,0.12);\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.04);\n    cursor: pointer;\n  }\n\n  .MuiListItemAvatar-root {\n    min-width: 56px;\n  }\n`;\n\nconst ListActions = styled.div`\n  padding: 16px;\n  /* background-color: #eee;\n  border-bottom: 1px solid rgba(0,0,0,0.12); */\n`;\n\nconst SearchField = styled.div`\n  position: relative;\n  background-color: #eee;\n  border-radius: 4px;\n  max-width: 500px;\n  /* borderRadius: theme.shape.borderRadius,\n      backgroundColor: alpha(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0, */\n  /* width: 100%; */\n      /* [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n      }, */\n`;\n\nconst SearchIcon = styled.div`\n  padding: 0 12px;\n  height: 100%;\n  position: absolute;\n  pointer-events: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n`;\n\nconst SearchInputStyles = css`\n  padding: 8px 8px 8px 40px;\n      // vertical padding + font size from searchIcon\n  /* paddingLeft: calc(1em + theme.spacing(4), */\n  /* transition: theme.transitions.create('width'), */\n  /* width: 100%; */\n  /* [theme.breakpoints.up('md')]: {\n    width: '20ch',\n  }, */\n`;\n\nconst SecondaryDetails = styled.div`\n  font-size: 13px;\n  margin-top: 10px;\n  line-height: 1.7em;\n  color: #777;\n`;\n\nconst Email = styled.div`\n`\n\nconst Name = styled.div`\n  font-size: 18px;\n`\n\nconst Mobile = styled.div`\n`\n\nconst data: Person[] = [\n  {\n    personId: 3,\n    firstGivenName: 'Kim',\n    familyName: 'Wexler',\n    email: 'kim.wexler@wm.com',\n    mobile: '+61 444 555 666',\n  },\n  {\n    personId: 2,\n    firstGivenName: 'Saul',\n    familyName: 'Goodman',\n    email: 'saul.goodman@itsallgoodman.com',\n    mobile: '+61 432 109 876',\n  },\n  {\n    personId: 1,\n    firstGivenName: 'Walter',\n    familyName: 'White',\n    email: 'walter.white@bb.com',\n    mobile: '+61 456 789 012',\n  }\n]\n\nfunction PeopleList() {\n  const history = useHistory();\n  // const [isNewPersonModalOpen, setIsNewPersonModalOpen] = useState(false);\n  // const [isEditPersonModalOpen, setIsEditPersonModalOpen] = useState(false);\n  // const [selectedPerson, setSelectedPerson] = useState<Person | undefined>(undefined);\n\n  const onNewButtonClick = () => {\n    // setIsNewPersonModalOpen(true);\n  }\n\n  // const onNewPersonModalClose = () => {\n  //   setIsNewPersonModalOpen(false);\n  // }\n\n  // const onNewPersonModalOK = () => {\n  //   setIsNewPersonModalOpen(false);\n  // }\n\n  // const onEditPersonModalClose = () => {\n  //   setSelectedPerson(undefined);\n  //   setIsEditPersonModalOpen(false);\n  // }\n\n  // const onEditPersonModalOK = () => {\n  //   setSelectedPerson(undefined);\n  //   setIsEditPersonModalOpen(false);\n  // }\n\n  const handleRowClick = (person: Person) => {\n    history.push(`/entities/people/${person.personId!}`);\n  };\n\n  return (\n    <React.Fragment>\n      <ListActions>\n        <SearchField>\n          <SearchIcon>\n            <MdSearch />\n          </SearchIcon>\n          <InputBase\n            placeholder=\"Search people...\"\n            fullWidth\n            classes={{\n              // root: classes.inputRoot,\n              input: SearchInputStyles,\n            }}\n            inputProps={{ 'aria-label': 'search' }}\n          />\n        </SearchField>\n      </ListActions>\n      <List>\n        {\n          data.map((accountUser, index) => \n            <ListItem key={index} alignItems=\"flex-start\" className={ListItemStyle} onClick={() => handleRowClick(accountUser)}>\n              <ListItemAvatar>\n                <Avatar alt={`${accountUser.firstGivenName} ${accountUser.familyName}`} style={{ backgroundColor: avatarColor(`${accountUser.firstGivenName} ${accountUser.familyName}`)}}>{initials(`${accountUser.firstGivenName} ${accountUser.familyName}`)}</Avatar>\n              </ListItemAvatar>\n              <ListItemText>\n                <Grid container spacing={2}>\n                  <Grid item xs={8}>\n                    <Name>{accountUser.firstGivenName} {accountUser.familyName}</Name>\n                    <SecondaryDetails>\n                      <Email>{accountUser.email}</Email>\n                      <Mobile>{accountUser.mobile}</Mobile>\n                    </SecondaryDetails>\n                  </Grid>\n                  <Grid item xs={4}>\n                    {/* <Chip\n                      avatar={accountUser.status === AccountInviteStatus.Invited ? <FiClock/> : undefined}\n                      label={AccountAccessTypeLabels.get(accountUser.accessType)}\n                      variant={accountUser.accessType === AccountAccessType.Admin ? \"filled\" : \"outlined\"}\n                      color={accountUser.accessType === AccountAccessType.View ? undefined : \"primary\"}\n                    /> */}\n                  </Grid>\n                </Grid>\n              </ListItemText>\n            </ListItem>,\n          )\n        }\n      </List>\n      {/* <LazyDialog isOpen={isNewPersonModalOpen}>\n        <NewPersonDialog\n          isOpen={isNewPersonModalOpen}\n          onClose={onNewPersonModalClose}\n          onSubmit={onNewPersonModalOK}\n        />\n      </LazyDialog>\n      {\n        !!selectedPerson &&\n        <LazyDialog isOpen={isEditPersonModalOpen}>\n          <EditPersonDialog\n            accountUser={selectedPerson}\n            isOpen={isEditPersonModalOpen}\n            onClose={onEditPersonModalClose}\n            onSubmit={onEditPersonModalOK}\n          />\n        </LazyDialog>\n      } */}\n      <Fab aria-label=\"add\" color=\"primary\" className={NewButtonStyle} onClick={onNewButtonClick}>\n        <MdAdd />\n      </Fab>\n    </React.Fragment>\n  )\n}\n\nexport default PeopleList;\n"],"sourceRoot":""}