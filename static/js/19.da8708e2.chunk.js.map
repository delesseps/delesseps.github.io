{"version":3,"sources":["utils/string.ts","components/SectionHeading.tsx","utils/date.ts","components/form/SwitchField.tsx","components/organisms/CompanyPicker.tsx","components/organisms/CompanyDirectorDetails.tsx","components/organisms/NewCompanyDetails.tsx","components/organisms/AddCompanyTrusteeDialog.tsx"],"names":["initials","value","split","map","parts","charAt","join","noSpaces","replace","SectionHeading","styled","div","formatDate","date","format","formatTime","LabelStyle","css","SwitchField","props","id","name","control","label","render","onChange","onBlur","className","labelPlacement","event","target","checked","Name","span","EntityMatch","Abn","ListBoxStyles","TextFieldStyle","allCompanyEntities","abn","acn","filter","createFilterOptions","CompanyPicker","Autocomplete","autoHighlight","classes","listbox","options","getOptionSelected","option","renderOption","state","inputValue","formatAbnAcn","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","evt","newValue","filterOptions","params","filtered","cleanValue","length","isValidACN","isValidABN","push","renderInput","InputLabelProps","InputProps","rest","TextField","autoFocus","shrink","placeholder","DirectorRoot","Head","Body","Title","CoreDetails","Icon","Actions","MenuItemStyle","CompanyDirectorDetails","director","onRemove","index","React","useState","anchorEl","setAnchorEl","onMenuClose","Grid","container","spacing","item","xs","firstGivenName","familyName","IconButton","onClick","currentTarget","Menu","getContentAnchorEl","keepMounted","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","appointmentDate","md","DisplayField","ceaseDate","AddDirectorDialog","lazy","Directors","Header","EmptyState","NewCompanyDetails","ref","initialCompany","onDirtyChange","isDirectorModalOpen","setIsDirectorModalOpen","directors","setDirectors","getFormValues","getValues","useImperativeHandle","methods","useForm","defaultValues","Acn","IsTradingEntity","IsForeign","mode","watch","isDirty","formState","isTradingEntity","isForeign","removeDirector","slice","concat","useEffect","alignItems","FormLabel","Button","startIcon","endIcon","LazyDialog","isOpen","onSubmit","directorForm","FirstGivenName","otherGivenName","OtherGivenName","FamilyName","CeaseDate","undefined","AppointmentDate","forwardRef","ContentStyle","bp","sm","AddCompanyTrusteeDialog","selectedCompany","setSelectedCompany","setIsDirty","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","useCompanyContext","company","setCompany","newCompanyDetailsRef","useRef","reset","onModalClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","variant","disabled","current"],"mappings":"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","file":"static/js/19.da8708e2.chunk.js","sourcesContent":["\nexport const initials = (value: string) =>\n  value.split(' ').map(parts => parts.charAt(0)).join('')\n\nexport const noSpaces = (value: string) =>\n  value.replace(/\\s/g, '')","import styled from '@emotion/styled';\n\nconst SectionHeading = styled.div`\n  font-size: 11px;\n  color: #777;\n  /* padding: 8px 0;\n  border-top: 1px solid; */\n`;\n\nexport default SectionHeading\n","import { format } from \"date-fns\";\n\nexport const formatDate = (date: Date | undefined): string => {\n  return date ? format(date, 'd MMM yyyy') : '';\n}\n\nexport const formatTime = (date: Date | undefined): string => {\n  return date ? format(date, 'h:mm a') : '';\n}\n","import React from 'react';\nimport { Control, Controller } from 'react-hook-form';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MuiSwitch from '@material-ui/core/Switch';\nimport { css } from 'emotion';\n\nconst LabelStyle = css`\n  .MuiFormControlLabel-label {\n    font-size: 11px;\n    color: #777;\n    line-height: 2em;\n  }\n`;\n\ninterface Props<T> {\n  id?: string;\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  // color?: 'primary' | 'secondary' | 'default';\n}\n\nconst SwitchField = <T extends object>(props: Props<T>) => {\n  const {\n    id,\n    name,\n    control,\n    // color,\n    label\n  } = props;\n\n  return (\n    <Controller\n      control={control}\n      name={name as FieldName<T>}\n      render={({ onChange, onBlur, value }) => (\n        <FormControlLabel\n          className={LabelStyle}\n          label={label}\n          labelPlacement=\"top\"\n          control={\n            <MuiSwitch\n              id={id}\n              onChange={(event) => onChange(event.target.checked)}\n              onBlur={onBlur}\n              checked={value}\n              // color={color ?? 'primary'}\n            />\n          }\n        />\n      )}\n    />\n  );\n};\n\nexport default SwitchField;\n","import { isValidABN, isValidACN } from 'abnacn-validator';\nimport { Autocomplete, createFilterOptions, TextField } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { css } from 'emotion';\nimport React from 'react';\nimport Company from 'types/Company';\nimport { noSpaces } from 'utils/string';\nimport { formatAbnAcn } from 'utils/abnAcn';\n\nconst Name = styled.span`\n  display: block !important;\n  font-size: 14px;\n  margin-bottom: 0.5em;\n`;\n\nconst EntityMatch = styled.span`\n  display: block;\n`;\n\nconst Abn = styled.span`\n  display: block;\n  font-size: 11px;\n  color: #666;\n`;\n\nconst ListBoxStyles = css`\n  .MuiAutocomplete-option {\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n`;\n\nconst TextFieldStyle = css`\n  .MuiFormLabel-root {\n    font-size: 11px;\n    color: #777;\n    /* text-transform: uppercase; */\n    line-height: 2em;\n  }\n  .MuiInput-root {\n    background-color: #eee;\n  }\n  .MuiInput-input {\n    padding: 6px 5px;\n    font-size: 14px;\n  }\n`;\n\nexport interface CompanyInput extends Company {\n  inputValue?: string;\n}\n\nconst allCompanyEntities: CompanyInput[] = [\n  {\n    abn: '86162372741',\n    acn: '162372741',\n    name: 'APOSITIVE PTY LTD'\n  },\n  {\n    acn: '609328207',\n    name: 'CROFT FAMILY PTY LTD'\n  }\n];\n\nconst filter = createFilterOptions<CompanyInput>();\n\ninterface CompanyPickerProps {\n  value: CompanyInput | null;\n  onChange: (tradingEntity: CompanyInput | null) => void;\n}\n\nconst CompanyPicker = ({ value, onChange }: CompanyPickerProps) => {\n  return (\n    <Autocomplete\n      value={value}\n      autoHighlight\n      classes={{\n        listbox: ListBoxStyles\n      }}\n      options={allCompanyEntities}\n      getOptionSelected={(option: CompanyInput, value: CompanyInput) => { \n        return value ? option === value : false;\n      }}\n      renderOption={(props, value, state) => {\n        return (\n          // value.abn === '' && !value.inputValue ? \n          // <span>\n          //   <EntityMatch>\n          //     <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>\n          //   </EntityMatch>\n          // </span> :\n          <li {...props}>\n            <EntityMatch>\n              <Name>{value.name}</Name>\n              {!value.inputValue && <Abn>{formatAbnAcn(value.acn)} {!!value.abn && <> / {formatAbnAcn(value.abn)}</>}</Abn>}\n            </EntityMatch>\n          </li>\n        )\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return `${option.name} ${option.acn.replace(/\\s/g, '')} ${option.abn?.replace(/\\s/g, '')}`\n      }}\n      // getOptionLabel={(option) => `${option.name} ${option.email} ${option.mobile}`}\n      // value={value}\n      // value={selectedValueWithLabel}\n      // onChange={(evt, newValue) => onChange(newValue)}\n      onChange={(evt, newValue) => {\n        if (typeof newValue === 'string') {\n          onChange({\n            acn: '',\n            name: newValue,\n            // email: newValue,\n          });\n        } else if (newValue) {\n          // Create a new value from the user input\n          onChange(newValue);\n        } else {\n          onChange(null);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n        const cleanValue = noSpaces(params.inputValue);\n        // const numericValue = parseInt(cleanValue)\n        // const isNumeric = `${numericValue}`.length === cleanValue.length && !isNaN(numericValue);\n\n        // Suggest the creation of a new value\n        if (cleanValue !== '') {\n          // if (isNumeric) {\n          if ((cleanValue.length === 9 && isValidACN(cleanValue)) || (cleanValue.length === 11 && isValidABN(cleanValue))) {\n            filtered.push({\n              inputValue: params.inputValue,\n              acn: cleanValue,\n              name: `Create Company \"${formatAbnAcn(cleanValue)}\"`\n              // email: `Add \"${params.inputValue}\"`\n            });\n            // }\n          } else {\n            filtered.push({\n              inputValue: params.inputValue,\n              acn: '',\n              name: `Create Company \"${params.inputValue}\"`\n            });\n          }\n        }\n\n        return filtered;\n      }}\n      // onBlur={onBlur}\n      // freeSolo\n      renderInput={({ InputLabelProps, InputProps, ...rest }) => \n        <TextField\n          autoFocus={true}\n          className={TextFieldStyle}\n          // label=\"Find or create user\"\n          // error={!!error}\n          InputLabelProps={{ shrink: true, ...InputLabelProps }}\n          InputProps={{ placeholder: 'Find by ACN, ABN or name', ...InputProps }}\n          // helperText={ error?.message ?? '' }\n          {...rest}\n        />\n      }\n    />\n  )\n};\n\nexport default CompanyPicker;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { MdMoreVert, MdPerson } from \"react-icons/md\";\nimport { Grid, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport Director from \"types/Director\";\nimport DisplayField from \"components/form/DisplayField\";\nimport { formatDate } from \"utils/date\";\n\nconst DirectorRoot = styled.div`\n  background-color: #eee;\n  margin-bottom: 2px;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Body = styled.div`\n  padding: 0 16px 16px 46px;\n  display: flex;\n`;\n\nconst Title = styled.div`\n  flex-grow: 1;\n  padding: 16px;\n  display: flex;\n`;\n\nconst CoreDetails = styled.div`\n  flex-grow: 1;\n`;\n\nconst Name = styled.span`\n  display: inline-block;\n  font-size: 14px;\n`;\n\nconst Icon = styled.span`\n  display: inline-block;\n  font-size: 16px;\n  width: 30px;\n  vertical-align: middle;\n`;\n\nconst Actions = styled.div`\n  margin-right: 2px;\n  margin-top: 2px;\n`;\n\nconst MenuItemStyle = css`\n  padding: 10px 16px;\n`;\n\nexport interface CompanyDirectorDetailsProps {\n  director: Director;\n  onRemove: (index: number) => void;\n  index: number;\n}\n\nfunction CompanyDirectorDetails({ director, onRemove, index}: CompanyDirectorDetailsProps) {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  function onMenuClose() {\n    setAnchorEl(null);\n  }\n\n  function onMenuRemove() {\n    onMenuClose();\n    onRemove(index);\n  }\n\n  function onMenuRunCreditCheck() {\n    onMenuClose();\n    // onRemove(index);\n  }\n\n  function onMenuClick(evt: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    setAnchorEl(evt.currentTarget);\n  }\n\n  return (\n    <DirectorRoot>\n      <Head>\n        <Title>\n          <Icon>\n            <MdPerson/>\n          </Icon>\n          <CoreDetails>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Name>{director.firstGivenName} {director.familyName}</Name>\n              </Grid>\n            </Grid>\n          </CoreDetails>\n        </Title>\n        <Actions>\n          <IconButton\n            onClick={onMenuClick}\n          >\n            <MdMoreVert />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            getContentAnchorEl={null}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onMenuClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            <MenuItem className={MenuItemStyle} onClick={onMenuRunCreditCheck}>Run Credit Check</MenuItem>\n            <MenuItem className={MenuItemStyle} onClick={onMenuRemove}>Remove</MenuItem>\n          </Menu>\n        </Actions>\n      </Head>\n      {\n        !!director.appointmentDate &&\n        <Body>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <DisplayField\n                label=\"Appointment Date\"\n                value={formatDate(director.appointmentDate)}\n              />\n            </Grid>\n            {\n              !!director.ceaseDate &&\n              <Grid item xs={12} md={6}>\n                <DisplayField\n                  label=\"Cease Date\"\n                  value={formatDate(director.ceaseDate)}\n                />\n              </Grid>\n            }\n          </Grid>\n        </Body>\n      }\n    </DirectorRoot>\n  )\n}\n\nexport default CompanyDirectorDetails;\n","import styled from \"@emotion/styled\";\nimport { Button, FormLabel, Grid } from \"@material-ui/core\";\nimport SwitchField from \"components/form/SwitchField\";\nimport TextField from \"components/form/TextField\";\nimport SectionHeading from \"components/SectionHeading\";\nimport { css } from \"emotion\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { MdAdd, MdPerson } from \"react-icons/md\";\nimport Director from \"types/Director\";\nimport Company from \"types/Company\";\nimport { formatAbnAcn } from \"utils/abnAcn\";\nimport CompanyDirectorDetails from \"./CompanyDirectorDetails\";\nimport LazyDialog from \"components/LazyDialog\";\nimport { DirectorForm } from \"./DirectorFormPanel\";\n\nconst AddDirectorDialog = React.lazy(() => import('./AddDirectorDialog'))\n\nconst Directors = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n`;\n\nconst LabelStyle = css`\n  flex-grow: 1;\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n  align-self: flex-end;\n`;\n\nconst Actions = styled.div`\n  .MuiButton-root {\n    margin-left: 8px;\n  }\n`;\n\nconst EmptyState = styled.div`\n  background-color: #eee;\n  padding: 24px;\n  text-align: center;\n`;\n\nexport interface NewCompanyDetailsProps {\n  initialCompany: Company;\n  onDirtyChange: (isDirty: boolean) => void;\n  // onChange: (tradingEntity?: TradingEntity) => void;\n}\n\nexport interface NewCompanyDetailsForm {\n  Name: string;\n  Acn: string;\n  Abn: string;\n  IsTradingEntity: boolean;\n  IsForeign: boolean;\n  ForeignIdentifier: string;\n  Directors: Director[]; // Not used in Form Fields\n}\n\nexport interface NewCompanyDetailsRefProps {\n  getFormValues: () => NewCompanyDetailsForm;\n}\n\nfunction NewCompanyDetails({ initialCompany: { acn, abn, name }, onDirtyChange }: NewCompanyDetailsProps, ref: React.Ref<NewCompanyDetailsRefProps>) {\n  const [isDirectorModalOpen, setIsDirectorModalOpen] = useState(false);\n  const [directors, setDirectors] = useState<Director[]>([]);\n\n  React.useImperativeHandle(ref, () => ({ getFormValues }));\n\n  function getFormValues(): NewCompanyDetailsForm {\n    return { ...getValues(), Directors: directors };\n  };\n\n  const methods = useForm<NewCompanyDetailsForm>({\n    defaultValues: {\n      Name: name,\n      Acn: formatAbnAcn(acn),\n      IsTradingEntity: !!abn,\n      Abn: formatAbnAcn(abn),\n      IsForeign: false,\n    },\n    mode: 'onChange',\n  });\n\n  const {\n    control,\n    watch,\n    formState: { isDirty },\n    getValues,\n  } = methods;\n\n  const isTradingEntity = watch('IsTradingEntity');\n  const isForeign = watch('IsForeign');\n\n  useEffect(\n    () => {\n      onDirtyChange(isDirty);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [isDirty],\n  );\n\n  function onDirectorModalClose() {\n    setIsDirectorModalOpen(false);\n  }\n\n  function onDirectorModalSubmit(directorForm: DirectorForm) {\n    setIsDirectorModalOpen(false);\n    addDirector({\n      firstGivenName: directorForm.FirstGivenName,\n      otherGivenName: directorForm.OtherGivenName,\n      familyName: directorForm.FamilyName,\n      ceaseDate: directorForm.CeaseDate || undefined,\n      appointmentDate: directorForm.AppointmentDate || undefined,\n    });\n  }\n\n  function onAddDirector() {\n    setIsDirectorModalOpen(true);\n  }\n\n  function addDirector(director: Director) {\n    setDirectors([...directors, director]);\n  }\n\n  function removeDirector(index: number) {\n    setDirectors(directors.slice(0, index).concat(directors.slice(index + 1)));\n  }\n  return (\n    <>\n      <Grid container spacing={2} alignItems=\"flex-end\">\n        <Grid item xs={12}><SectionHeading>Company Details</SectionHeading></Grid>\n        <Grid item xs={10}>\n          <TextField\n            autoFocus\n            id=\"NewCompanyName\"\n            name=\"Name\"\n            label=\"Name\"\n            control={control}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <SwitchField\n            name=\"IsForeign\"\n            control={control}\n            label=\"Foreign?\"\n          />\n        </Grid>\n        {\n          isForeign ?\n          <Grid item xs={12}>\n            <TextField\n              name=\"ForeignIdentifier\"\n              label=\"Identifier\"\n              control={control}\n            />\n          </Grid>\n          :\n          <>\n            <Grid item xs={12} md={3}>\n              <TextField\n                name=\"Acn\"\n                label=\"ACN\"\n                control={control}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <SwitchField\n                name=\"IsTradingEntity\"\n                control={control}\n                label=\"Is Trading?\"\n              />\n            </Grid>\n            {\n              isTradingEntity &&\n              <Grid item xs={9} md={6}>\n                <TextField\n                  name=\"Abn\"\n                  label=\"ABN\"\n                  control={control}\n                />\n              </Grid>\n            }\n          </>\n        }\n        <Grid item xs={12}>\n          <Directors>\n            <Header>\n              <FormLabel className={LabelStyle}>Directors</FormLabel>\n              <Actions>\n                <Button\n                  startIcon={<MdAdd />}\n                  endIcon={<MdPerson/>}\n                  onClick={onAddDirector}\n                />\n              </Actions>\n            </Header>\n            {\n              !directors?.length ?\n              <EmptyState>No directors assigned</EmptyState>\n              :\n              directors.map((director, index) =>\n                <CompanyDirectorDetails\n                  key={index}\n                  index={index}\n                  director={director}\n                  onRemove={removeDirector} />\n              )\n            }\n          </Directors>\n        </Grid>\n      </Grid>\n      <LazyDialog isOpen={isDirectorModalOpen}>\n        <AddDirectorDialog\n          isOpen={isDirectorModalOpen}\n          onClose={onDirectorModalClose}\n          onSubmit={onDirectorModalSubmit}\n        />\n      </LazyDialog>\n    </>\n  )\n}\n\nexport default React.forwardRef(NewCompanyDetails);\n","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, useMediaQuery, useTheme } from '@material-ui/core';\nimport { css } from 'emotion';\nimport { useCompanyContext } from 'providers/Company';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { bp } from 'theme';\nimport CompanyPicker, { CompanyInput } from './CompanyPicker';\nimport NewCompanyDetails, { NewCompanyDetailsForm, NewCompanyDetailsRefProps } from './NewCompanyDetails';\nimport { MdWarning } from \"react-icons/md\";\n\nconst ContentStyle = css`\n  ${bp.xs} {\n    width: 100%\n  }\n  ${bp.sm} {\n    width: 580px;\n  }\n`\n\n// const SelectedEntityChipLabelStyle = css`\n//   font-size: 14px;\n//   ${bp.xs} {\n//     max-width: 340px;\n//   }\n//   ${bp.sm} {\n//     max-width: 500px;\n//   }\n// `\n\nexport interface AddCompanyTrusteeDialogProps {\n  isOpen: boolean;\n  // company?: CompanyInput;\n  onClose: () => void;\n  onSubmit: (newCompanyDetails: NewCompanyDetailsForm) => void;\n}\n\nfunction AddCompanyTrusteeDialog({ isOpen, onClose, onSubmit }: AddCompanyTrusteeDialogProps) {\n  const [selectedCompany, setSelectedCompany] = useState<CompanyInput | null>(null);\n  const [isDirty, setIsDirty] = useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xlMob'))\n  const { company, setCompany } = useCompanyContext();\n  const newCompanyDetailsRef = React.useRef<NewCompanyDetailsRefProps>(null);\n\n  useEffect(\n    () => {\n      // Unmount CallBack\n      if (!isOpen) {\n        reset();\n      }\n      return () => reset();\n    },\n    [isOpen]\n  )\n\n  useEffect(\n    () => {\n      setCompany(selectedCompany ? !!selectedCompany.inputValue ?\n        selectedCompany.acn ? {\n          name: '',\n          acn: selectedCompany.acn\n        } : {\n          name: selectedCompany.inputValue,\n          acn: ''\n        } : selectedCompany : undefined)\n\n    },\n    [selectedCompany, setCompany]\n  )\n\n  function reset() {\n    setSelectedCompany(null);\n  }\n\n  function onModalClose() {\n    onClose();\n  }\n\n  function onModalOK() {\n    if (newCompanyDetailsRef.current) {\n      onSubmit(newCompanyDetailsRef.current.getFormValues())\n    };\n  }\n\n  // function onSelectionRemove() {\n  //   setSelectedCompany(null);\n  // }\n\n  return (\n    <Dialog\n      fullScreen={fullScreen}\n      open={isOpen}\n      onClose={onModalClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Add Company Trustee { isDirty && <MdWarning /> }\n      </DialogTitle>\n      <DialogContent className={ContentStyle}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            {\n              (company) ?\n              <NewCompanyDetails\n                ref={newCompanyDetailsRef}\n                initialCompany={company}\n                onDirtyChange={setIsDirty}\n              />\n              :\n              <CompanyPicker\n                value={selectedCompany}\n                onChange={setSelectedCompany}\n              />\n            }\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onModalClose}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" disabled={!selectedCompany} onClick={onModalOK}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddCompanyTrusteeDialog;\n"],"sourceRoot":""}