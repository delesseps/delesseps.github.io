{"version":3,"sources":["components/Card.tsx","components/PaddedContainer.tsx","components/form/UploadField.tsx","pages/account/Support.tsx"],"names":["Title","styled","div","Head","Root","Card","children","title","ariaLabel","actionMenu","aria-label","PaddedContainer","LabelStyle","css","DropZoneStyle","UploadField","props","name","control","label","fullWidth","shrink","defaultValue","as","useChipsForPreview","acceptedFiles","dropzoneText","showPreviews","showFileNames","showPreviewsInDropzone","filesLimit","showAlerts","getPreviewIcon","Fragment","onChange","files","defaultValues","ShareholderAgreement","Trust1","Support","methods","useForm","mode","handleSubmit","onSubmit","container","spacing","item","xs","lg"],"mappings":"wmBAGA,IAAMA,EAAQC,IAAOC,IAAV,KAMLC,EAAOF,IAAOC,IAAV,KAIJE,EAAOH,IAAOC,IAAV,KAsCKG,IAnBf,YAKkC,IAJhCC,EAI+B,EAJ/BA,SACAC,EAG+B,EAH/BA,MACAC,EAE+B,EAF/BA,UAIA,OAF+B,EAD/BC,WAIE,kBAACL,EAAD,CAAMM,aAAYF,GAEhBD,GACE,kBAACJ,EAAD,KACE,kBAACH,EAAD,KAAQO,IAGXD,K,uIC7CP,IAAMK,E,OAAkBV,EAAOC,IAAV,KAINS,O,4gBCIf,IAAMC,EAAaC,YAAH,KAMVC,EAAgBD,YAAH,KA4FJE,IA7DK,SAAmBC,GAAqB,IAExDC,EAUED,EAVFC,KACAC,EASEF,EATFE,QACAC,EAQEH,EARFG,MAUF,OACE,YAAC,IAAD,CACEC,WAAS,EACTP,IAAKC,GAEL,YAAC,IAAD,CAAYD,IAAKD,EAAYS,QAAM,GAAEF,GACrC,YAAC,IAAD,CACED,QAASA,EACTD,KAAMA,EAENK,aAAa,GAEbC,GACE,YAAC,IAAD,CAWEC,oBAAkB,EAClBC,cAAe,CAAC,aAAc,YAAa,mBAC3CC,aAAa,kDACbC,cAAc,EACdC,eAAe,EACfC,wBAAwB,EACxBC,WAAY,EAEZC,YAAY,EACZC,eAAgB,kBAAM,YAAC,IAAMC,SAAP,OAItBC,SAAU,SAACC,Y,iCClGvB,gEAaMC,EAA6B,CACjCC,qBAAsB,GACtBC,OAAQ,IA4CKC,UAzCf,WACE,IAAMC,EAAUC,YAAqB,CACnCL,gBACAM,KAAM,aAINC,EAEEH,EAFFG,aACAzB,EACEsB,EADFtB,QAGF,OACE,YAAC,IAAD,KACE,oBAAM0B,SAAUD,GAAa,gBAC3B,YAAC,IAAD,CAAME,WAAS,EAACC,QAAS,GACvB,YAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,YAAC,IAAD,CAAM1C,MAAM,uCACV,YAAC,IAAD,CAAMsC,WAAS,EAACC,QAAS,GACvB,YAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,YAAC,IAAD,CACE/B,KAAK,uBACLE,MAAM,iDACND,QAASA,KAGb,YAAC,IAAD,CAAM6B,MAAI,EAACC,GAAI,IACb,YAAC,IAAD,CACE/B,KAAK,SACLE,MAAM,8CACND,QAASA","file":"static/js/17.eccc7b31.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nimport React, { PropsWithChildren } from 'react';\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-bottom: 16px;\n  flex-grow: 1;\n`;\n\nconst Head = styled.div`\n  display: flex;\n`;\n\nconst Root = styled.div`\n\n  @media (min-width: 600px) {\n    border: 2px solid #eee;\n    padding: 16px;\n  }\n  @media (max-width: 599.95px) {\n    padding: 0;\n    border-bottom: 2px solid #eee;\n  }\n`;\n\ninterface CardProps {\n  title?: string;\n  ariaLabel?: string;\n  actionMenu?: React.ReactNode;\n}\n\n// const Card: React.ForwardRefRenderFunction<PropsWithChildren<CardProps>, HTMLDivElement | null | any> = ({\nfunction Card({\n  children,\n  title,\n  ariaLabel,\n  actionMenu,\n}: PropsWithChildren<CardProps>) {\n// }, ref) => {\n  return (\n    <Root aria-label={ariaLabel}>\n      {\n      title &&\n        <Head>\n          <Title>{title}</Title>\n        </Head>\n      }\n      {children}</Root>\n  )\n}\n\nexport default Card;","import styled from '@emotion/styled';\n\nconst PaddedContainer = styled.div`\n  padding: 16px;\n`;\n\nexport default PaddedContainer;","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { Control, Controller, FieldError } from 'react-hook-form';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { FieldName } from 'react-hook-form/dist/types/form';\nimport { FieldRules } from 'types/FieldRules';\nimport React from 'react';\nimport { FormControl, InputLabel } from '@material-ui/core';\n\n\nconst LabelStyle = css`\n  font-size: 11px;\n  color: #777;\n  line-height: 2em;\n`;\n\nconst DropZoneStyle = css`\n  .MuiDropzoneArea-root {\n    background-color: #eee;\n    padding: 6px 5px;\n    outline: none;\n  }\n  .MuiDropzoneArea-active {\n    background-color: #ddd;\n  }\n  .MuiDropzoneArea-text {\n    margin: 5px 0;\n  }\n`;\n\ninterface Props<T> {\n  name: keyof T;\n  control: Control<T>;\n  label: string;\n  error?: FieldError;\n  rules?: FieldRules;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  transform?: (value: string) => any;\n}\n\n// function EmptyIcon () {\n//   return (\n//     <React.Fragment />\n//   )\n// }\n\nconst UploadField = <T extends object>(props: Props<T>) => {\n  const {\n    name,\n    control,\n    label,\n    // error,\n    // rules,\n    // type,\n    // placeholder,\n    // disabled,\n    // autoFocus,\n    // transform\n  } = props;\n\n  return (\n    <FormControl\n      fullWidth\n      css={DropZoneStyle}\n    >\n      <InputLabel css={LabelStyle} shrink>{label}</InputLabel>\n      <Controller\n        control={control}\n        name={name as FieldName<T>}\n        // rules={rules}\n        defaultValue=\"\"\n        // render={ ({ onChange, onBlur, value, name }) => (\n        as={\n          <DropzoneArea\n            // inputProps={{\n            //   id: name\n            // }}\n            // classes={{\n              // root: `css-${DropZoneStyle.name}`,\n              // root: classes.dropZoneRoot,\n              // text: classes.dropZoneText,\n              // active: classes.dropZoneActive,\n              // icon: classes.dropZoneIcon,\n            // }}\n            useChipsForPreview\n            acceptedFiles={['image/jpeg', 'image/png', 'application/pdf']}\n            dropzoneText=\"Click or drag JPG, PNG or PDF file to this area\"\n            showPreviews={false}\n            showFileNames={true}\n            showPreviewsInDropzone={true}\n            filesLimit={1}\n            // Icon={<EmptyIcon />}\n            showAlerts={false}\n            getPreviewIcon={() => <React.Fragment />}\n            // onChange={onChange}\n            // initialFiles={[]}\n            // initialFiles={identificationFiles}\n            onChange={(files) => {\n            //   setIdentificationFiles(files);\n            }}\n          />\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport default UploadField;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { useForm } from 'react-hook-form';\nimport { Grid } from '@material-ui/core';\nimport PaddedContainer from 'components/PaddedContainer';\nimport Card from 'components/Card';\nimport UploadField from 'components/form/UploadField';\n\ninterface SupportForm {\n  ShareholderAgreement: (File | string)[];\n  Trust1: (File | string)[];\n}\n\nconst defaultValues: SupportForm = {\n  ShareholderAgreement: [],\n  Trust1: [],\n}\n\nfunction Support() {\n  const methods = useForm<SupportForm>({\n    defaultValues,\n    mode: 'onChange',\n  });\n\n  const {\n    handleSubmit,\n    control,\n  } = methods;\n\n  return (\n    <PaddedContainer>\n      <form onSubmit={handleSubmit(() => {})}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} lg={7}>\n            <Card title=\"Additional Supporting Documentation\">\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <UploadField\n                    name=\"ShareholderAgreement\"\n                    label=\"Shareholder agreement for Breaking Bad Pty Ltd\"\n                    control={control}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <UploadField\n                    name=\"Trust1\"\n                    label=\"Certified Trust Deed for White Family Trust\"\n                    control={control}\n                  />\n                </Grid>\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n      </form>\n    </PaddedContainer>\n  )\n}\n\nexport default Support;\n"],"sourceRoot":""}